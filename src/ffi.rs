/* automatically generated by rust-bindgen */

pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type ino_t = __ino_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type off_t = __off_t;
pub type uid_t = __uid_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: Struct_timespec,
    pub st_mtim: Struct_timespec,
    pub st_ctim: Struct_timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
impl ::std::clone::Clone for Struct_stat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bfd_int64_t = ::std::os::raw::c_long;
pub type bfd_uint64_t = ::std::os::raw::c_ulong;
pub type bfd_hostptr_t = ::std::os::raw::c_ulong;
pub type bfd = Struct_bfd;
pub type bfd_boolean = ::std::os::raw::c_int;
pub type bfd_vma = ::std::os::raw::c_ulong;
pub type bfd_signed_vma = ::std::os::raw::c_long;
pub type bfd_size_type = ::std::os::raw::c_ulong;
pub type symvalue = ::std::os::raw::c_ulong;
pub type file_ptr = ::std::os::raw::c_long;
pub type ufile_ptr = ::std::os::raw::c_ulong;
pub type flagword = ::std::os::raw::c_uint;
pub type bfd_byte = ::std::os::raw::c_uchar;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_format {
    bfd_unknown = 0,
    bfd_object = 1,
    bfd_archive = 2,
    bfd_core = 3,
    bfd_type_end = 4,
}
pub type bfd_format = Enum_bfd_format;
pub type symindex = ::std::os::raw::c_ulong;
pub type reloc_howto_type = Struct_reloc_howto_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_carsym {
    pub name: *mut ::std::os::raw::c_char,
    pub file_offset: file_ptr,
}
impl ::std::clone::Clone for Struct_carsym {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_carsym {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type carsym = Struct_carsym;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_orl {
    pub name: *mut *mut ::std::os::raw::c_char,
    pub u: Union_Unnamed2,
    pub namidx: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_orl {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_orl {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed2 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed2 {
    pub unsafe fn pos(&mut self) -> *mut file_ptr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn abfd(&mut self) -> *mut *mut bfd {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lineno_cache_entry {
    pub line_number: ::std::os::raw::c_uint,
    pub u: Union_Unnamed3,
}
impl ::std::clone::Clone for Struct_lineno_cache_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_lineno_cache_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn sym(&mut self) -> *mut *mut Struct_bfd_symbol {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn offset(&mut self) -> *mut bfd_vma {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alent = Struct_lineno_cache_entry;
pub type sec_ptr = *mut Struct_bfd_section;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_print_symbol {
    bfd_print_symbol_name = 0,
    bfd_print_symbol_more = 1,
    bfd_print_symbol_all = 2,
}
pub type bfd_print_symbol_type = Enum_bfd_print_symbol;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__symbol_info {
    pub value: symvalue,
    pub _type: ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub stab_type: ::std::os::raw::c_uchar,
    pub stab_other: ::std::os::raw::c_char,
    pub stab_desc: ::std::os::raw::c_short,
    pub stab_name: *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct__symbol_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__symbol_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type symbol_info = Struct__symbol_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bfd_hash_entry {
    pub next: *mut Struct_bfd_hash_entry,
    pub string: *const ::std::os::raw::c_char,
    pub hash: ::std::os::raw::c_ulong,
}
impl ::std::clone::Clone for Struct_bfd_hash_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bfd_hash_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bfd_hash_table {
    pub table: *mut *mut Struct_bfd_hash_entry,
    pub newfunc: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                *mut Struct_bfd_hash_entry,
                                                            arg2:
                                                                *mut Struct_bfd_hash_table,
                                                            arg3:
                                                                *const ::std::os::raw::c_char)
                                           -> *mut Struct_bfd_hash_entry>,
    pub memory: *mut ::std::os::raw::c_void,
    pub size: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub entsize: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_bfd_hash_table {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bfd_hash_table {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_compressed_debug_section_type {
    COMPRESS_DEBUG_NONE = 0,
    COMPRESS_DEBUG = 1,
    COMPRESS_DEBUG_GNU_ZLIB = 3,
    COMPRESS_DEBUG_GABI_ZLIB = 5,
}
pub enum Struct_bfd_strtab_hash { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stab_info {
    pub strings: *mut Struct_bfd_strtab_hash,
    pub includes: Struct_bfd_hash_table,
    pub stabstr: *mut Struct_bfd_section,
}
impl ::std::clone::Clone for Struct_stab_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_stab_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_ecoff_debug_info { }
pub enum Struct_ecoff_debug_swap { }
pub enum Struct_ecoff_extr { }
pub enum Struct_bfd_link_info { }
pub enum Struct_bfd_link_hash_entry { }
pub enum Struct_bfd_section_already_linked { }
pub enum Struct_bfd_elf_version_tree { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bfd_link_needed_list {
    pub next: *mut Struct_bfd_link_needed_list,
    pub by: *mut bfd,
    pub name: *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_bfd_link_needed_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bfd_link_needed_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_dynamic_lib_link_class {
    DYN_NORMAL = 0,
    DYN_AS_NEEDED = 1,
    DYN_DT_NEEDED = 2,
    DYN_NO_ADD_NEEDED = 4,
    DYN_NO_NEEDED = 8,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_notice_asneeded_action {
    notice_as_needed = 0,
    notice_not_needed = 1,
    notice_needed = 2,
}
pub enum Struct__bfd_window_internal { }
pub type bfd_window_internal = Struct__bfd_window_internal;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__bfd_window {
    pub data: *mut ::std::os::raw::c_void,
    pub size: bfd_size_type,
    pub i: *mut Struct__bfd_window_internal,
}
impl ::std::clone::Clone for Struct__bfd_window {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__bfd_window {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bfd_window = Struct__bfd_window;
pub enum Struct_internal_syment { }
pub enum Union_internal_auxent { }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed4 {
    BFD_ARM_VFP11_FIX_DEFAULT = 0,
    BFD_ARM_VFP11_FIX_NONE = 1,
    BFD_ARM_VFP11_FIX_SCALAR = 2,
    BFD_ARM_VFP11_FIX_VECTOR = 3,
}
pub type bfd_arm_vfp11_fix = Enum_Unnamed4;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed5 {
    BFD_ARM_STM32L4XX_FIX_NONE = 0,
    BFD_ARM_STM32L4XX_FIX_DEFAULT = 1,
    BFD_ARM_STM32L4XX_FIX_ALL = 2,
}
pub type bfd_arm_stm32l4xx_fix = Enum_Unnamed5;
pub enum Struct_bfd_link_order { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bfd_section {
    pub name: *const ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_uint,
    pub next: *mut Struct_bfd_section,
    pub prev: *mut Struct_bfd_section,
    pub flags: flagword,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub vma: bfd_vma,
    pub lma: bfd_vma,
    pub size: bfd_size_type,
    pub rawsize: bfd_size_type,
    pub compressed_size: bfd_size_type,
    pub relax: *mut Struct_relax_table,
    pub relax_count: ::std::os::raw::c_int,
    pub output_offset: bfd_vma,
    pub output_section: *mut Struct_bfd_section,
    pub alignment_power: ::std::os::raw::c_uint,
    pub relocation: *mut Struct_reloc_cache_entry,
    pub orelocation: *mut *mut Struct_reloc_cache_entry,
    pub reloc_count: ::std::os::raw::c_uint,
    pub filepos: file_ptr,
    pub rel_filepos: file_ptr,
    pub line_filepos: file_ptr,
    pub userdata: *mut ::std::os::raw::c_void,
    pub contents: *mut ::std::os::raw::c_uchar,
    pub lineno: *mut alent,
    pub lineno_count: ::std::os::raw::c_uint,
    pub entsize: ::std::os::raw::c_uint,
    pub kept_section: *mut Struct_bfd_section,
    pub moving_line_filepos: file_ptr,
    pub target_index: ::std::os::raw::c_int,
    pub used_by_bfd: *mut ::std::os::raw::c_void,
    pub constructor_chain: *mut Struct_relent_chain,
    pub owner: *mut bfd,
    pub symbol: *mut Struct_bfd_symbol,
    pub symbol_ptr_ptr: *mut *mut Struct_bfd_symbol,
    pub map_head: Union_Unnamed6,
    pub map_tail: Union_Unnamed6,
}
impl ::std::clone::Clone for Struct_bfd_section {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bfd_section {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed6 {
    pub unsafe fn link_order(&mut self) -> *mut *mut Struct_bfd_link_order {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut *mut Struct_bfd_section {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type asection = Struct_bfd_section;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_relax_table {
    pub addr: bfd_vma,
    pub size: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_relax_table {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_relax_table {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_architecture {
    bfd_arch_unknown = 0,
    bfd_arch_obscure = 1,
    bfd_arch_m68k = 2,
    bfd_arch_vax = 3,
    bfd_arch_i960 = 4,
    bfd_arch_or1k = 5,
    bfd_arch_sparc = 6,
    bfd_arch_spu = 7,
    bfd_arch_mips = 8,
    bfd_arch_i386 = 9,
    bfd_arch_l1om = 10,
    bfd_arch_k1om = 11,
    bfd_arch_iamcu = 12,
    bfd_arch_we32k = 13,
    bfd_arch_tahoe = 14,
    bfd_arch_i860 = 15,
    bfd_arch_i370 = 16,
    bfd_arch_romp = 17,
    bfd_arch_convex = 18,
    bfd_arch_m88k = 19,
    bfd_arch_m98k = 20,
    bfd_arch_pyramid = 21,
    bfd_arch_h8300 = 22,
    bfd_arch_pdp11 = 23,
    bfd_arch_plugin = 24,
    bfd_arch_powerpc = 25,
    bfd_arch_rs6000 = 26,
    bfd_arch_hppa = 27,
    bfd_arch_d10v = 28,
    bfd_arch_d30v = 29,
    bfd_arch_dlx = 30,
    bfd_arch_m68hc11 = 31,
    bfd_arch_m68hc12 = 32,
    bfd_arch_m9s12x = 33,
    bfd_arch_m9s12xg = 34,
    bfd_arch_z8k = 35,
    bfd_arch_h8500 = 36,
    bfd_arch_sh = 37,
    bfd_arch_alpha = 38,
    bfd_arch_arm = 39,
    bfd_arch_nds32 = 40,
    bfd_arch_ns32k = 41,
    bfd_arch_w65 = 42,
    bfd_arch_tic30 = 43,
    bfd_arch_tic4x = 44,
    bfd_arch_tic54x = 45,
    bfd_arch_tic6x = 46,
    bfd_arch_tic80 = 47,
    bfd_arch_v850 = 48,
    bfd_arch_v850_rh850 = 49,
    bfd_arch_arc = 50,
    bfd_arch_m32c = 51,
    bfd_arch_m32r = 52,
    bfd_arch_mn10200 = 53,
    bfd_arch_mn10300 = 54,
    bfd_arch_fr30 = 55,
    bfd_arch_frv = 56,
    bfd_arch_moxie = 57,
    bfd_arch_ft32 = 58,
    bfd_arch_mcore = 59,
    bfd_arch_mep = 60,
    bfd_arch_metag = 61,
    bfd_arch_ia64 = 62,
    bfd_arch_ip2k = 63,
    bfd_arch_iq2000 = 64,
    bfd_arch_epiphany = 65,
    bfd_arch_mt = 66,
    bfd_arch_pj = 67,
    bfd_arch_avr = 68,
    bfd_arch_bfin = 69,
    bfd_arch_cr16 = 70,
    bfd_arch_cr16c = 71,
    bfd_arch_crx = 72,
    bfd_arch_cris = 73,
    bfd_arch_rl78 = 74,
    bfd_arch_rx = 75,
    bfd_arch_s390 = 76,
    bfd_arch_score = 77,
    bfd_arch_mmix = 78,
    bfd_arch_xstormy16 = 79,
    bfd_arch_msp430 = 80,
    bfd_arch_xc16x = 81,
    bfd_arch_xgate = 82,
    bfd_arch_xtensa = 83,
    bfd_arch_z80 = 84,
    bfd_arch_lm32 = 85,
    bfd_arch_microblaze = 86,
    bfd_arch_tilepro = 87,
    bfd_arch_tilegx = 88,
    bfd_arch_aarch64 = 89,
    bfd_arch_nios2 = 90,
    bfd_arch_visium = 91,
    bfd_arch_last = 92,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bfd_arch_info {
    pub bits_per_word: ::std::os::raw::c_int,
    pub bits_per_address: ::std::os::raw::c_int,
    pub bits_per_byte: ::std::os::raw::c_int,
    pub arch: Enum_bfd_architecture,
    pub mach: ::std::os::raw::c_ulong,
    pub arch_name: *const ::std::os::raw::c_char,
    pub printable_name: *const ::std::os::raw::c_char,
    pub section_align_power: ::std::os::raw::c_uint,
    pub the_default: bfd_boolean,
    pub compatible: ::std::option::Option<unsafe extern "C" fn(a:
                                                                   *const Struct_bfd_arch_info,
                                                               b:
                                                                   *const Struct_bfd_arch_info)
                                              -> *const Struct_bfd_arch_info>,
    pub scan: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *const Struct_bfd_arch_info,
                                                         arg2:
                                                             *const ::std::os::raw::c_char)
                                        -> bfd_boolean>,
    pub fill: ::std::option::Option<extern "C" fn(count: bfd_size_type,
                                                  is_bigendian: bfd_boolean,
                                                  code: bfd_boolean)
                                        -> *mut ::std::os::raw::c_void>,
    pub next: *const Struct_bfd_arch_info,
}
impl ::std::clone::Clone for Struct_bfd_arch_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bfd_arch_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bfd_arch_info_type = Struct_bfd_arch_info;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_reloc_status {
    bfd_reloc_ok = 0,
    bfd_reloc_overflow = 1,
    bfd_reloc_outofrange = 2,
    bfd_reloc_continue = 3,
    bfd_reloc_notsupported = 4,
    bfd_reloc_other = 5,
    bfd_reloc_undefined = 6,
    bfd_reloc_dangerous = 7,
}
pub type bfd_reloc_status_type = Enum_bfd_reloc_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_reloc_cache_entry {
    pub sym_ptr_ptr: *mut *mut Struct_bfd_symbol,
    pub address: bfd_size_type,
    pub addend: bfd_vma,
    pub howto: *mut reloc_howto_type,
}
impl ::std::clone::Clone for Struct_reloc_cache_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_reloc_cache_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type arelent = Struct_reloc_cache_entry;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_complain_overflow {
    complain_overflow_dont = 0,
    complain_overflow_bitfield = 1,
    complain_overflow_signed = 2,
    complain_overflow_unsigned = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_reloc_howto_struct {
    pub _type: ::std::os::raw::c_uint,
    pub rightshift: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_int,
    pub bitsize: ::std::os::raw::c_uint,
    pub pc_relative: bfd_boolean,
    pub bitpos: ::std::os::raw::c_uint,
    pub complain_on_overflow: Enum_complain_overflow,
    pub special_function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut bfd,
                                                                     arg2:
                                                                         *mut arelent,
                                                                     arg3:
                                                                         *mut Struct_bfd_symbol,
                                                                     arg4:
                                                                         *mut ::std::os::raw::c_void,
                                                                     arg5:
                                                                         *mut asection,
                                                                     arg6:
                                                                         *mut bfd,
                                                                     arg7:
                                                                         *mut *mut ::std::os::raw::c_char)
                                                    -> bfd_reloc_status_type>,
    pub name: *mut ::std::os::raw::c_char,
    pub partial_inplace: bfd_boolean,
    pub src_mask: bfd_vma,
    pub dst_mask: bfd_vma,
    pub pcrel_offset: bfd_boolean,
}
impl ::std::clone::Clone for Struct_reloc_howto_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_reloc_howto_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_relent_chain {
    pub relent: arelent,
    pub next: *mut Struct_relent_chain,
}
impl ::std::clone::Clone for Struct_relent_chain {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_relent_chain {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type arelent_chain = Struct_relent_chain;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_reloc_code_real {
    _dummy_first_bfd_reloc_code_real = 0,
    BFD_RELOC_64 = 1,
    BFD_RELOC_32 = 2,
    BFD_RELOC_26 = 3,
    BFD_RELOC_24 = 4,
    BFD_RELOC_16 = 5,
    BFD_RELOC_14 = 6,
    BFD_RELOC_8 = 7,
    BFD_RELOC_64_PCREL = 8,
    BFD_RELOC_32_PCREL = 9,
    BFD_RELOC_24_PCREL = 10,
    BFD_RELOC_16_PCREL = 11,
    BFD_RELOC_12_PCREL = 12,
    BFD_RELOC_8_PCREL = 13,
    BFD_RELOC_32_SECREL = 14,
    BFD_RELOC_32_GOT_PCREL = 15,
    BFD_RELOC_16_GOT_PCREL = 16,
    BFD_RELOC_8_GOT_PCREL = 17,
    BFD_RELOC_32_GOTOFF = 18,
    BFD_RELOC_16_GOTOFF = 19,
    BFD_RELOC_LO16_GOTOFF = 20,
    BFD_RELOC_HI16_GOTOFF = 21,
    BFD_RELOC_HI16_S_GOTOFF = 22,
    BFD_RELOC_8_GOTOFF = 23,
    BFD_RELOC_64_PLT_PCREL = 24,
    BFD_RELOC_32_PLT_PCREL = 25,
    BFD_RELOC_24_PLT_PCREL = 26,
    BFD_RELOC_16_PLT_PCREL = 27,
    BFD_RELOC_8_PLT_PCREL = 28,
    BFD_RELOC_64_PLTOFF = 29,
    BFD_RELOC_32_PLTOFF = 30,
    BFD_RELOC_16_PLTOFF = 31,
    BFD_RELOC_LO16_PLTOFF = 32,
    BFD_RELOC_HI16_PLTOFF = 33,
    BFD_RELOC_HI16_S_PLTOFF = 34,
    BFD_RELOC_8_PLTOFF = 35,
    BFD_RELOC_SIZE32 = 36,
    BFD_RELOC_SIZE64 = 37,
    BFD_RELOC_68K_GLOB_DAT = 38,
    BFD_RELOC_68K_JMP_SLOT = 39,
    BFD_RELOC_68K_RELATIVE = 40,
    BFD_RELOC_68K_TLS_GD32 = 41,
    BFD_RELOC_68K_TLS_GD16 = 42,
    BFD_RELOC_68K_TLS_GD8 = 43,
    BFD_RELOC_68K_TLS_LDM32 = 44,
    BFD_RELOC_68K_TLS_LDM16 = 45,
    BFD_RELOC_68K_TLS_LDM8 = 46,
    BFD_RELOC_68K_TLS_LDO32 = 47,
    BFD_RELOC_68K_TLS_LDO16 = 48,
    BFD_RELOC_68K_TLS_LDO8 = 49,
    BFD_RELOC_68K_TLS_IE32 = 50,
    BFD_RELOC_68K_TLS_IE16 = 51,
    BFD_RELOC_68K_TLS_IE8 = 52,
    BFD_RELOC_68K_TLS_LE32 = 53,
    BFD_RELOC_68K_TLS_LE16 = 54,
    BFD_RELOC_68K_TLS_LE8 = 55,
    BFD_RELOC_32_BASEREL = 56,
    BFD_RELOC_16_BASEREL = 57,
    BFD_RELOC_LO16_BASEREL = 58,
    BFD_RELOC_HI16_BASEREL = 59,
    BFD_RELOC_HI16_S_BASEREL = 60,
    BFD_RELOC_8_BASEREL = 61,
    BFD_RELOC_RVA = 62,
    BFD_RELOC_8_FFnn = 63,
    BFD_RELOC_32_PCREL_S2 = 64,
    BFD_RELOC_16_PCREL_S2 = 65,
    BFD_RELOC_23_PCREL_S2 = 66,
    BFD_RELOC_HI22 = 67,
    BFD_RELOC_LO10 = 68,
    BFD_RELOC_GPREL16 = 69,
    BFD_RELOC_GPREL32 = 70,
    BFD_RELOC_I960_CALLJ = 71,
    BFD_RELOC_NONE = 72,
    BFD_RELOC_SPARC_WDISP22 = 73,
    BFD_RELOC_SPARC22 = 74,
    BFD_RELOC_SPARC13 = 75,
    BFD_RELOC_SPARC_GOT10 = 76,
    BFD_RELOC_SPARC_GOT13 = 77,
    BFD_RELOC_SPARC_GOT22 = 78,
    BFD_RELOC_SPARC_PC10 = 79,
    BFD_RELOC_SPARC_PC22 = 80,
    BFD_RELOC_SPARC_WPLT30 = 81,
    BFD_RELOC_SPARC_COPY = 82,
    BFD_RELOC_SPARC_GLOB_DAT = 83,
    BFD_RELOC_SPARC_JMP_SLOT = 84,
    BFD_RELOC_SPARC_RELATIVE = 85,
    BFD_RELOC_SPARC_UA16 = 86,
    BFD_RELOC_SPARC_UA32 = 87,
    BFD_RELOC_SPARC_UA64 = 88,
    BFD_RELOC_SPARC_GOTDATA_HIX22 = 89,
    BFD_RELOC_SPARC_GOTDATA_LOX10 = 90,
    BFD_RELOC_SPARC_GOTDATA_OP_HIX22 = 91,
    BFD_RELOC_SPARC_GOTDATA_OP_LOX10 = 92,
    BFD_RELOC_SPARC_GOTDATA_OP = 93,
    BFD_RELOC_SPARC_JMP_IREL = 94,
    BFD_RELOC_SPARC_IRELATIVE = 95,
    BFD_RELOC_SPARC_BASE13 = 96,
    BFD_RELOC_SPARC_BASE22 = 97,
    BFD_RELOC_SPARC_10 = 98,
    BFD_RELOC_SPARC_11 = 99,
    BFD_RELOC_SPARC_OLO10 = 100,
    BFD_RELOC_SPARC_HH22 = 101,
    BFD_RELOC_SPARC_HM10 = 102,
    BFD_RELOC_SPARC_LM22 = 103,
    BFD_RELOC_SPARC_PC_HH22 = 104,
    BFD_RELOC_SPARC_PC_HM10 = 105,
    BFD_RELOC_SPARC_PC_LM22 = 106,
    BFD_RELOC_SPARC_WDISP16 = 107,
    BFD_RELOC_SPARC_WDISP19 = 108,
    BFD_RELOC_SPARC_7 = 109,
    BFD_RELOC_SPARC_6 = 110,
    BFD_RELOC_SPARC_5 = 111,
    BFD_RELOC_SPARC_PLT32 = 112,
    BFD_RELOC_SPARC_PLT64 = 113,
    BFD_RELOC_SPARC_HIX22 = 114,
    BFD_RELOC_SPARC_LOX10 = 115,
    BFD_RELOC_SPARC_H44 = 116,
    BFD_RELOC_SPARC_M44 = 117,
    BFD_RELOC_SPARC_L44 = 118,
    BFD_RELOC_SPARC_REGISTER = 119,
    BFD_RELOC_SPARC_H34 = 120,
    BFD_RELOC_SPARC_SIZE32 = 121,
    BFD_RELOC_SPARC_SIZE64 = 122,
    BFD_RELOC_SPARC_WDISP10 = 123,
    BFD_RELOC_SPARC_REV32 = 124,
    BFD_RELOC_SPARC_TLS_GD_HI22 = 125,
    BFD_RELOC_SPARC_TLS_GD_LO10 = 126,
    BFD_RELOC_SPARC_TLS_GD_ADD = 127,
    BFD_RELOC_SPARC_TLS_GD_CALL = 128,
    BFD_RELOC_SPARC_TLS_LDM_HI22 = 129,
    BFD_RELOC_SPARC_TLS_LDM_LO10 = 130,
    BFD_RELOC_SPARC_TLS_LDM_ADD = 131,
    BFD_RELOC_SPARC_TLS_LDM_CALL = 132,
    BFD_RELOC_SPARC_TLS_LDO_HIX22 = 133,
    BFD_RELOC_SPARC_TLS_LDO_LOX10 = 134,
    BFD_RELOC_SPARC_TLS_LDO_ADD = 135,
    BFD_RELOC_SPARC_TLS_IE_HI22 = 136,
    BFD_RELOC_SPARC_TLS_IE_LO10 = 137,
    BFD_RELOC_SPARC_TLS_IE_LD = 138,
    BFD_RELOC_SPARC_TLS_IE_LDX = 139,
    BFD_RELOC_SPARC_TLS_IE_ADD = 140,
    BFD_RELOC_SPARC_TLS_LE_HIX22 = 141,
    BFD_RELOC_SPARC_TLS_LE_LOX10 = 142,
    BFD_RELOC_SPARC_TLS_DTPMOD32 = 143,
    BFD_RELOC_SPARC_TLS_DTPMOD64 = 144,
    BFD_RELOC_SPARC_TLS_DTPOFF32 = 145,
    BFD_RELOC_SPARC_TLS_DTPOFF64 = 146,
    BFD_RELOC_SPARC_TLS_TPOFF32 = 147,
    BFD_RELOC_SPARC_TLS_TPOFF64 = 148,
    BFD_RELOC_SPU_IMM7 = 149,
    BFD_RELOC_SPU_IMM8 = 150,
    BFD_RELOC_SPU_IMM10 = 151,
    BFD_RELOC_SPU_IMM10W = 152,
    BFD_RELOC_SPU_IMM16 = 153,
    BFD_RELOC_SPU_IMM16W = 154,
    BFD_RELOC_SPU_IMM18 = 155,
    BFD_RELOC_SPU_PCREL9a = 156,
    BFD_RELOC_SPU_PCREL9b = 157,
    BFD_RELOC_SPU_PCREL16 = 158,
    BFD_RELOC_SPU_LO16 = 159,
    BFD_RELOC_SPU_HI16 = 160,
    BFD_RELOC_SPU_PPU32 = 161,
    BFD_RELOC_SPU_PPU64 = 162,
    BFD_RELOC_SPU_ADD_PIC = 163,
    BFD_RELOC_ALPHA_GPDISP_HI16 = 164,
    BFD_RELOC_ALPHA_GPDISP_LO16 = 165,
    BFD_RELOC_ALPHA_GPDISP = 166,
    BFD_RELOC_ALPHA_LITERAL = 167,
    BFD_RELOC_ALPHA_ELF_LITERAL = 168,
    BFD_RELOC_ALPHA_LITUSE = 169,
    BFD_RELOC_ALPHA_HINT = 170,
    BFD_RELOC_ALPHA_LINKAGE = 171,
    BFD_RELOC_ALPHA_CODEADDR = 172,
    BFD_RELOC_ALPHA_GPREL_HI16 = 173,
    BFD_RELOC_ALPHA_GPREL_LO16 = 174,
    BFD_RELOC_ALPHA_BRSGP = 175,
    BFD_RELOC_ALPHA_NOP = 176,
    BFD_RELOC_ALPHA_BSR = 177,
    BFD_RELOC_ALPHA_LDA = 178,
    BFD_RELOC_ALPHA_BOH = 179,
    BFD_RELOC_ALPHA_TLSGD = 180,
    BFD_RELOC_ALPHA_TLSLDM = 181,
    BFD_RELOC_ALPHA_DTPMOD64 = 182,
    BFD_RELOC_ALPHA_GOTDTPREL16 = 183,
    BFD_RELOC_ALPHA_DTPREL64 = 184,
    BFD_RELOC_ALPHA_DTPREL_HI16 = 185,
    BFD_RELOC_ALPHA_DTPREL_LO16 = 186,
    BFD_RELOC_ALPHA_DTPREL16 = 187,
    BFD_RELOC_ALPHA_GOTTPREL16 = 188,
    BFD_RELOC_ALPHA_TPREL64 = 189,
    BFD_RELOC_ALPHA_TPREL_HI16 = 190,
    BFD_RELOC_ALPHA_TPREL_LO16 = 191,
    BFD_RELOC_ALPHA_TPREL16 = 192,
    BFD_RELOC_MIPS_JMP = 193,
    BFD_RELOC_MICROMIPS_JMP = 194,
    BFD_RELOC_MIPS16_JMP = 195,
    BFD_RELOC_MIPS16_GPREL = 196,
    BFD_RELOC_HI16 = 197,
    BFD_RELOC_HI16_S = 198,
    BFD_RELOC_LO16 = 199,
    BFD_RELOC_HI16_PCREL = 200,
    BFD_RELOC_HI16_S_PCREL = 201,
    BFD_RELOC_LO16_PCREL = 202,
    BFD_RELOC_MIPS16_GOT16 = 203,
    BFD_RELOC_MIPS16_CALL16 = 204,
    BFD_RELOC_MIPS16_HI16 = 205,
    BFD_RELOC_MIPS16_HI16_S = 206,
    BFD_RELOC_MIPS16_LO16 = 207,
    BFD_RELOC_MIPS16_TLS_GD = 208,
    BFD_RELOC_MIPS16_TLS_LDM = 209,
    BFD_RELOC_MIPS16_TLS_DTPREL_HI16 = 210,
    BFD_RELOC_MIPS16_TLS_DTPREL_LO16 = 211,
    BFD_RELOC_MIPS16_TLS_GOTTPREL = 212,
    BFD_RELOC_MIPS16_TLS_TPREL_HI16 = 213,
    BFD_RELOC_MIPS16_TLS_TPREL_LO16 = 214,
    BFD_RELOC_MIPS_LITERAL = 215,
    BFD_RELOC_MICROMIPS_LITERAL = 216,
    BFD_RELOC_MICROMIPS_7_PCREL_S1 = 217,
    BFD_RELOC_MICROMIPS_10_PCREL_S1 = 218,
    BFD_RELOC_MICROMIPS_16_PCREL_S1 = 219,
    BFD_RELOC_MIPS_21_PCREL_S2 = 220,
    BFD_RELOC_MIPS_26_PCREL_S2 = 221,
    BFD_RELOC_MIPS_18_PCREL_S3 = 222,
    BFD_RELOC_MIPS_19_PCREL_S2 = 223,
    BFD_RELOC_MICROMIPS_GPREL16 = 224,
    BFD_RELOC_MICROMIPS_HI16 = 225,
    BFD_RELOC_MICROMIPS_HI16_S = 226,
    BFD_RELOC_MICROMIPS_LO16 = 227,
    BFD_RELOC_MIPS_GOT16 = 228,
    BFD_RELOC_MICROMIPS_GOT16 = 229,
    BFD_RELOC_MIPS_CALL16 = 230,
    BFD_RELOC_MICROMIPS_CALL16 = 231,
    BFD_RELOC_MIPS_GOT_HI16 = 232,
    BFD_RELOC_MICROMIPS_GOT_HI16 = 233,
    BFD_RELOC_MIPS_GOT_LO16 = 234,
    BFD_RELOC_MICROMIPS_GOT_LO16 = 235,
    BFD_RELOC_MIPS_CALL_HI16 = 236,
    BFD_RELOC_MICROMIPS_CALL_HI16 = 237,
    BFD_RELOC_MIPS_CALL_LO16 = 238,
    BFD_RELOC_MICROMIPS_CALL_LO16 = 239,
    BFD_RELOC_MIPS_SUB = 240,
    BFD_RELOC_MICROMIPS_SUB = 241,
    BFD_RELOC_MIPS_GOT_PAGE = 242,
    BFD_RELOC_MICROMIPS_GOT_PAGE = 243,
    BFD_RELOC_MIPS_GOT_OFST = 244,
    BFD_RELOC_MICROMIPS_GOT_OFST = 245,
    BFD_RELOC_MIPS_GOT_DISP = 246,
    BFD_RELOC_MICROMIPS_GOT_DISP = 247,
    BFD_RELOC_MIPS_SHIFT5 = 248,
    BFD_RELOC_MIPS_SHIFT6 = 249,
    BFD_RELOC_MIPS_INSERT_A = 250,
    BFD_RELOC_MIPS_INSERT_B = 251,
    BFD_RELOC_MIPS_DELETE = 252,
    BFD_RELOC_MIPS_HIGHEST = 253,
    BFD_RELOC_MICROMIPS_HIGHEST = 254,
    BFD_RELOC_MIPS_HIGHER = 255,
    BFD_RELOC_MICROMIPS_HIGHER = 256,
    BFD_RELOC_MIPS_SCN_DISP = 257,
    BFD_RELOC_MICROMIPS_SCN_DISP = 258,
    BFD_RELOC_MIPS_REL16 = 259,
    BFD_RELOC_MIPS_RELGOT = 260,
    BFD_RELOC_MIPS_JALR = 261,
    BFD_RELOC_MICROMIPS_JALR = 262,
    BFD_RELOC_MIPS_TLS_DTPMOD32 = 263,
    BFD_RELOC_MIPS_TLS_DTPREL32 = 264,
    BFD_RELOC_MIPS_TLS_DTPMOD64 = 265,
    BFD_RELOC_MIPS_TLS_DTPREL64 = 266,
    BFD_RELOC_MIPS_TLS_GD = 267,
    BFD_RELOC_MICROMIPS_TLS_GD = 268,
    BFD_RELOC_MIPS_TLS_LDM = 269,
    BFD_RELOC_MICROMIPS_TLS_LDM = 270,
    BFD_RELOC_MIPS_TLS_DTPREL_HI16 = 271,
    BFD_RELOC_MICROMIPS_TLS_DTPREL_HI16 = 272,
    BFD_RELOC_MIPS_TLS_DTPREL_LO16 = 273,
    BFD_RELOC_MICROMIPS_TLS_DTPREL_LO16 = 274,
    BFD_RELOC_MIPS_TLS_GOTTPREL = 275,
    BFD_RELOC_MICROMIPS_TLS_GOTTPREL = 276,
    BFD_RELOC_MIPS_TLS_TPREL32 = 277,
    BFD_RELOC_MIPS_TLS_TPREL64 = 278,
    BFD_RELOC_MIPS_TLS_TPREL_HI16 = 279,
    BFD_RELOC_MICROMIPS_TLS_TPREL_HI16 = 280,
    BFD_RELOC_MIPS_TLS_TPREL_LO16 = 281,
    BFD_RELOC_MICROMIPS_TLS_TPREL_LO16 = 282,
    BFD_RELOC_MIPS_EH = 283,
    BFD_RELOC_MIPS_COPY = 284,
    BFD_RELOC_MIPS_JUMP_SLOT = 285,
    BFD_RELOC_MOXIE_10_PCREL = 286,
    BFD_RELOC_FT32_10 = 287,
    BFD_RELOC_FT32_20 = 288,
    BFD_RELOC_FT32_17 = 289,
    BFD_RELOC_FT32_18 = 290,
    BFD_RELOC_FRV_LABEL16 = 291,
    BFD_RELOC_FRV_LABEL24 = 292,
    BFD_RELOC_FRV_LO16 = 293,
    BFD_RELOC_FRV_HI16 = 294,
    BFD_RELOC_FRV_GPREL12 = 295,
    BFD_RELOC_FRV_GPRELU12 = 296,
    BFD_RELOC_FRV_GPREL32 = 297,
    BFD_RELOC_FRV_GPRELHI = 298,
    BFD_RELOC_FRV_GPRELLO = 299,
    BFD_RELOC_FRV_GOT12 = 300,
    BFD_RELOC_FRV_GOTHI = 301,
    BFD_RELOC_FRV_GOTLO = 302,
    BFD_RELOC_FRV_FUNCDESC = 303,
    BFD_RELOC_FRV_FUNCDESC_GOT12 = 304,
    BFD_RELOC_FRV_FUNCDESC_GOTHI = 305,
    BFD_RELOC_FRV_FUNCDESC_GOTLO = 306,
    BFD_RELOC_FRV_FUNCDESC_VALUE = 307,
    BFD_RELOC_FRV_FUNCDESC_GOTOFF12 = 308,
    BFD_RELOC_FRV_FUNCDESC_GOTOFFHI = 309,
    BFD_RELOC_FRV_FUNCDESC_GOTOFFLO = 310,
    BFD_RELOC_FRV_GOTOFF12 = 311,
    BFD_RELOC_FRV_GOTOFFHI = 312,
    BFD_RELOC_FRV_GOTOFFLO = 313,
    BFD_RELOC_FRV_GETTLSOFF = 314,
    BFD_RELOC_FRV_TLSDESC_VALUE = 315,
    BFD_RELOC_FRV_GOTTLSDESC12 = 316,
    BFD_RELOC_FRV_GOTTLSDESCHI = 317,
    BFD_RELOC_FRV_GOTTLSDESCLO = 318,
    BFD_RELOC_FRV_TLSMOFF12 = 319,
    BFD_RELOC_FRV_TLSMOFFHI = 320,
    BFD_RELOC_FRV_TLSMOFFLO = 321,
    BFD_RELOC_FRV_GOTTLSOFF12 = 322,
    BFD_RELOC_FRV_GOTTLSOFFHI = 323,
    BFD_RELOC_FRV_GOTTLSOFFLO = 324,
    BFD_RELOC_FRV_TLSOFF = 325,
    BFD_RELOC_FRV_TLSDESC_RELAX = 326,
    BFD_RELOC_FRV_GETTLSOFF_RELAX = 327,
    BFD_RELOC_FRV_TLSOFF_RELAX = 328,
    BFD_RELOC_FRV_TLSMOFF = 329,
    BFD_RELOC_MN10300_GOTOFF24 = 330,
    BFD_RELOC_MN10300_GOT32 = 331,
    BFD_RELOC_MN10300_GOT24 = 332,
    BFD_RELOC_MN10300_GOT16 = 333,
    BFD_RELOC_MN10300_COPY = 334,
    BFD_RELOC_MN10300_GLOB_DAT = 335,
    BFD_RELOC_MN10300_JMP_SLOT = 336,
    BFD_RELOC_MN10300_RELATIVE = 337,
    BFD_RELOC_MN10300_SYM_DIFF = 338,
    BFD_RELOC_MN10300_ALIGN = 339,
    BFD_RELOC_MN10300_TLS_GD = 340,
    BFD_RELOC_MN10300_TLS_LD = 341,
    BFD_RELOC_MN10300_TLS_LDO = 342,
    BFD_RELOC_MN10300_TLS_GOTIE = 343,
    BFD_RELOC_MN10300_TLS_IE = 344,
    BFD_RELOC_MN10300_TLS_LE = 345,
    BFD_RELOC_MN10300_TLS_DTPMOD = 346,
    BFD_RELOC_MN10300_TLS_DTPOFF = 347,
    BFD_RELOC_MN10300_TLS_TPOFF = 348,
    BFD_RELOC_MN10300_32_PCREL = 349,
    BFD_RELOC_MN10300_16_PCREL = 350,
    BFD_RELOC_386_GOT32 = 351,
    BFD_RELOC_386_PLT32 = 352,
    BFD_RELOC_386_COPY = 353,
    BFD_RELOC_386_GLOB_DAT = 354,
    BFD_RELOC_386_JUMP_SLOT = 355,
    BFD_RELOC_386_RELATIVE = 356,
    BFD_RELOC_386_GOTOFF = 357,
    BFD_RELOC_386_GOTPC = 358,
    BFD_RELOC_386_TLS_TPOFF = 359,
    BFD_RELOC_386_TLS_IE = 360,
    BFD_RELOC_386_TLS_GOTIE = 361,
    BFD_RELOC_386_TLS_LE = 362,
    BFD_RELOC_386_TLS_GD = 363,
    BFD_RELOC_386_TLS_LDM = 364,
    BFD_RELOC_386_TLS_LDO_32 = 365,
    BFD_RELOC_386_TLS_IE_32 = 366,
    BFD_RELOC_386_TLS_LE_32 = 367,
    BFD_RELOC_386_TLS_DTPMOD32 = 368,
    BFD_RELOC_386_TLS_DTPOFF32 = 369,
    BFD_RELOC_386_TLS_TPOFF32 = 370,
    BFD_RELOC_386_TLS_GOTDESC = 371,
    BFD_RELOC_386_TLS_DESC_CALL = 372,
    BFD_RELOC_386_TLS_DESC = 373,
    BFD_RELOC_386_IRELATIVE = 374,
    BFD_RELOC_386_GOT32X = 375,
    BFD_RELOC_X86_64_GOT32 = 376,
    BFD_RELOC_X86_64_PLT32 = 377,
    BFD_RELOC_X86_64_COPY = 378,
    BFD_RELOC_X86_64_GLOB_DAT = 379,
    BFD_RELOC_X86_64_JUMP_SLOT = 380,
    BFD_RELOC_X86_64_RELATIVE = 381,
    BFD_RELOC_X86_64_GOTPCREL = 382,
    BFD_RELOC_X86_64_32S = 383,
    BFD_RELOC_X86_64_DTPMOD64 = 384,
    BFD_RELOC_X86_64_DTPOFF64 = 385,
    BFD_RELOC_X86_64_TPOFF64 = 386,
    BFD_RELOC_X86_64_TLSGD = 387,
    BFD_RELOC_X86_64_TLSLD = 388,
    BFD_RELOC_X86_64_DTPOFF32 = 389,
    BFD_RELOC_X86_64_GOTTPOFF = 390,
    BFD_RELOC_X86_64_TPOFF32 = 391,
    BFD_RELOC_X86_64_GOTOFF64 = 392,
    BFD_RELOC_X86_64_GOTPC32 = 393,
    BFD_RELOC_X86_64_GOT64 = 394,
    BFD_RELOC_X86_64_GOTPCREL64 = 395,
    BFD_RELOC_X86_64_GOTPC64 = 396,
    BFD_RELOC_X86_64_GOTPLT64 = 397,
    BFD_RELOC_X86_64_PLTOFF64 = 398,
    BFD_RELOC_X86_64_GOTPC32_TLSDESC = 399,
    BFD_RELOC_X86_64_TLSDESC_CALL = 400,
    BFD_RELOC_X86_64_TLSDESC = 401,
    BFD_RELOC_X86_64_IRELATIVE = 402,
    BFD_RELOC_X86_64_PC32_BND = 403,
    BFD_RELOC_X86_64_PLT32_BND = 404,
    BFD_RELOC_X86_64_GOTPCRELX = 405,
    BFD_RELOC_X86_64_REX_GOTPCRELX = 406,
    BFD_RELOC_NS32K_IMM_8 = 407,
    BFD_RELOC_NS32K_IMM_16 = 408,
    BFD_RELOC_NS32K_IMM_32 = 409,
    BFD_RELOC_NS32K_IMM_8_PCREL = 410,
    BFD_RELOC_NS32K_IMM_16_PCREL = 411,
    BFD_RELOC_NS32K_IMM_32_PCREL = 412,
    BFD_RELOC_NS32K_DISP_8 = 413,
    BFD_RELOC_NS32K_DISP_16 = 414,
    BFD_RELOC_NS32K_DISP_32 = 415,
    BFD_RELOC_NS32K_DISP_8_PCREL = 416,
    BFD_RELOC_NS32K_DISP_16_PCREL = 417,
    BFD_RELOC_NS32K_DISP_32_PCREL = 418,
    BFD_RELOC_PDP11_DISP_8_PCREL = 419,
    BFD_RELOC_PDP11_DISP_6_PCREL = 420,
    BFD_RELOC_PJ_CODE_HI16 = 421,
    BFD_RELOC_PJ_CODE_LO16 = 422,
    BFD_RELOC_PJ_CODE_DIR16 = 423,
    BFD_RELOC_PJ_CODE_DIR32 = 424,
    BFD_RELOC_PJ_CODE_REL16 = 425,
    BFD_RELOC_PJ_CODE_REL32 = 426,
    BFD_RELOC_PPC_B26 = 427,
    BFD_RELOC_PPC_BA26 = 428,
    BFD_RELOC_PPC_TOC16 = 429,
    BFD_RELOC_PPC_B16 = 430,
    BFD_RELOC_PPC_B16_BRTAKEN = 431,
    BFD_RELOC_PPC_B16_BRNTAKEN = 432,
    BFD_RELOC_PPC_BA16 = 433,
    BFD_RELOC_PPC_BA16_BRTAKEN = 434,
    BFD_RELOC_PPC_BA16_BRNTAKEN = 435,
    BFD_RELOC_PPC_COPY = 436,
    BFD_RELOC_PPC_GLOB_DAT = 437,
    BFD_RELOC_PPC_JMP_SLOT = 438,
    BFD_RELOC_PPC_RELATIVE = 439,
    BFD_RELOC_PPC_LOCAL24PC = 440,
    BFD_RELOC_PPC_EMB_NADDR32 = 441,
    BFD_RELOC_PPC_EMB_NADDR16 = 442,
    BFD_RELOC_PPC_EMB_NADDR16_LO = 443,
    BFD_RELOC_PPC_EMB_NADDR16_HI = 444,
    BFD_RELOC_PPC_EMB_NADDR16_HA = 445,
    BFD_RELOC_PPC_EMB_SDAI16 = 446,
    BFD_RELOC_PPC_EMB_SDA2I16 = 447,
    BFD_RELOC_PPC_EMB_SDA2REL = 448,
    BFD_RELOC_PPC_EMB_SDA21 = 449,
    BFD_RELOC_PPC_EMB_MRKREF = 450,
    BFD_RELOC_PPC_EMB_RELSEC16 = 451,
    BFD_RELOC_PPC_EMB_RELST_LO = 452,
    BFD_RELOC_PPC_EMB_RELST_HI = 453,
    BFD_RELOC_PPC_EMB_RELST_HA = 454,
    BFD_RELOC_PPC_EMB_BIT_FLD = 455,
    BFD_RELOC_PPC_EMB_RELSDA = 456,
    BFD_RELOC_PPC_VLE_REL8 = 457,
    BFD_RELOC_PPC_VLE_REL15 = 458,
    BFD_RELOC_PPC_VLE_REL24 = 459,
    BFD_RELOC_PPC_VLE_LO16A = 460,
    BFD_RELOC_PPC_VLE_LO16D = 461,
    BFD_RELOC_PPC_VLE_HI16A = 462,
    BFD_RELOC_PPC_VLE_HI16D = 463,
    BFD_RELOC_PPC_VLE_HA16A = 464,
    BFD_RELOC_PPC_VLE_HA16D = 465,
    BFD_RELOC_PPC_VLE_SDA21 = 466,
    BFD_RELOC_PPC_VLE_SDA21_LO = 467,
    BFD_RELOC_PPC_VLE_SDAREL_LO16A = 468,
    BFD_RELOC_PPC_VLE_SDAREL_LO16D = 469,
    BFD_RELOC_PPC_VLE_SDAREL_HI16A = 470,
    BFD_RELOC_PPC_VLE_SDAREL_HI16D = 471,
    BFD_RELOC_PPC_VLE_SDAREL_HA16A = 472,
    BFD_RELOC_PPC_VLE_SDAREL_HA16D = 473,
    BFD_RELOC_PPC_REL16DX_HA = 474,
    BFD_RELOC_PPC64_HIGHER = 475,
    BFD_RELOC_PPC64_HIGHER_S = 476,
    BFD_RELOC_PPC64_HIGHEST = 477,
    BFD_RELOC_PPC64_HIGHEST_S = 478,
    BFD_RELOC_PPC64_TOC16_LO = 479,
    BFD_RELOC_PPC64_TOC16_HI = 480,
    BFD_RELOC_PPC64_TOC16_HA = 481,
    BFD_RELOC_PPC64_TOC = 482,
    BFD_RELOC_PPC64_PLTGOT16 = 483,
    BFD_RELOC_PPC64_PLTGOT16_LO = 484,
    BFD_RELOC_PPC64_PLTGOT16_HI = 485,
    BFD_RELOC_PPC64_PLTGOT16_HA = 486,
    BFD_RELOC_PPC64_ADDR16_DS = 487,
    BFD_RELOC_PPC64_ADDR16_LO_DS = 488,
    BFD_RELOC_PPC64_GOT16_DS = 489,
    BFD_RELOC_PPC64_GOT16_LO_DS = 490,
    BFD_RELOC_PPC64_PLT16_LO_DS = 491,
    BFD_RELOC_PPC64_SECTOFF_DS = 492,
    BFD_RELOC_PPC64_SECTOFF_LO_DS = 493,
    BFD_RELOC_PPC64_TOC16_DS = 494,
    BFD_RELOC_PPC64_TOC16_LO_DS = 495,
    BFD_RELOC_PPC64_PLTGOT16_DS = 496,
    BFD_RELOC_PPC64_PLTGOT16_LO_DS = 497,
    BFD_RELOC_PPC64_ADDR16_HIGH = 498,
    BFD_RELOC_PPC64_ADDR16_HIGHA = 499,
    BFD_RELOC_PPC64_ADDR64_LOCAL = 500,
    BFD_RELOC_PPC64_ENTRY = 501,
    BFD_RELOC_PPC_TLS = 502,
    BFD_RELOC_PPC_TLSGD = 503,
    BFD_RELOC_PPC_TLSLD = 504,
    BFD_RELOC_PPC_DTPMOD = 505,
    BFD_RELOC_PPC_TPREL16 = 506,
    BFD_RELOC_PPC_TPREL16_LO = 507,
    BFD_RELOC_PPC_TPREL16_HI = 508,
    BFD_RELOC_PPC_TPREL16_HA = 509,
    BFD_RELOC_PPC_TPREL = 510,
    BFD_RELOC_PPC_DTPREL16 = 511,
    BFD_RELOC_PPC_DTPREL16_LO = 512,
    BFD_RELOC_PPC_DTPREL16_HI = 513,
    BFD_RELOC_PPC_DTPREL16_HA = 514,
    BFD_RELOC_PPC_DTPREL = 515,
    BFD_RELOC_PPC_GOT_TLSGD16 = 516,
    BFD_RELOC_PPC_GOT_TLSGD16_LO = 517,
    BFD_RELOC_PPC_GOT_TLSGD16_HI = 518,
    BFD_RELOC_PPC_GOT_TLSGD16_HA = 519,
    BFD_RELOC_PPC_GOT_TLSLD16 = 520,
    BFD_RELOC_PPC_GOT_TLSLD16_LO = 521,
    BFD_RELOC_PPC_GOT_TLSLD16_HI = 522,
    BFD_RELOC_PPC_GOT_TLSLD16_HA = 523,
    BFD_RELOC_PPC_GOT_TPREL16 = 524,
    BFD_RELOC_PPC_GOT_TPREL16_LO = 525,
    BFD_RELOC_PPC_GOT_TPREL16_HI = 526,
    BFD_RELOC_PPC_GOT_TPREL16_HA = 527,
    BFD_RELOC_PPC_GOT_DTPREL16 = 528,
    BFD_RELOC_PPC_GOT_DTPREL16_LO = 529,
    BFD_RELOC_PPC_GOT_DTPREL16_HI = 530,
    BFD_RELOC_PPC_GOT_DTPREL16_HA = 531,
    BFD_RELOC_PPC64_TPREL16_DS = 532,
    BFD_RELOC_PPC64_TPREL16_LO_DS = 533,
    BFD_RELOC_PPC64_TPREL16_HIGHER = 534,
    BFD_RELOC_PPC64_TPREL16_HIGHERA = 535,
    BFD_RELOC_PPC64_TPREL16_HIGHEST = 536,
    BFD_RELOC_PPC64_TPREL16_HIGHESTA = 537,
    BFD_RELOC_PPC64_DTPREL16_DS = 538,
    BFD_RELOC_PPC64_DTPREL16_LO_DS = 539,
    BFD_RELOC_PPC64_DTPREL16_HIGHER = 540,
    BFD_RELOC_PPC64_DTPREL16_HIGHERA = 541,
    BFD_RELOC_PPC64_DTPREL16_HIGHEST = 542,
    BFD_RELOC_PPC64_DTPREL16_HIGHESTA = 543,
    BFD_RELOC_PPC64_TPREL16_HIGH = 544,
    BFD_RELOC_PPC64_TPREL16_HIGHA = 545,
    BFD_RELOC_PPC64_DTPREL16_HIGH = 546,
    BFD_RELOC_PPC64_DTPREL16_HIGHA = 547,
    BFD_RELOC_I370_D12 = 548,
    BFD_RELOC_CTOR = 549,
    BFD_RELOC_ARM_PCREL_BRANCH = 550,
    BFD_RELOC_ARM_PCREL_BLX = 551,
    BFD_RELOC_THUMB_PCREL_BLX = 552,
    BFD_RELOC_ARM_PCREL_CALL = 553,
    BFD_RELOC_ARM_PCREL_JUMP = 554,
    BFD_RELOC_THUMB_PCREL_BRANCH7 = 555,
    BFD_RELOC_THUMB_PCREL_BRANCH9 = 556,
    BFD_RELOC_THUMB_PCREL_BRANCH12 = 557,
    BFD_RELOC_THUMB_PCREL_BRANCH20 = 558,
    BFD_RELOC_THUMB_PCREL_BRANCH23 = 559,
    BFD_RELOC_THUMB_PCREL_BRANCH25 = 560,
    BFD_RELOC_ARM_OFFSET_IMM = 561,
    BFD_RELOC_ARM_THUMB_OFFSET = 562,
    BFD_RELOC_ARM_TARGET1 = 563,
    BFD_RELOC_ARM_ROSEGREL32 = 564,
    BFD_RELOC_ARM_SBREL32 = 565,
    BFD_RELOC_ARM_TARGET2 = 566,
    BFD_RELOC_ARM_PREL31 = 567,
    BFD_RELOC_ARM_MOVW = 568,
    BFD_RELOC_ARM_MOVT = 569,
    BFD_RELOC_ARM_MOVW_PCREL = 570,
    BFD_RELOC_ARM_MOVT_PCREL = 571,
    BFD_RELOC_ARM_THUMB_MOVW = 572,
    BFD_RELOC_ARM_THUMB_MOVT = 573,
    BFD_RELOC_ARM_THUMB_MOVW_PCREL = 574,
    BFD_RELOC_ARM_THUMB_MOVT_PCREL = 575,
    BFD_RELOC_ARM_JUMP_SLOT = 576,
    BFD_RELOC_ARM_GLOB_DAT = 577,
    BFD_RELOC_ARM_GOT32 = 578,
    BFD_RELOC_ARM_PLT32 = 579,
    BFD_RELOC_ARM_RELATIVE = 580,
    BFD_RELOC_ARM_GOTOFF = 581,
    BFD_RELOC_ARM_GOTPC = 582,
    BFD_RELOC_ARM_GOT_PREL = 583,
    BFD_RELOC_ARM_TLS_GD32 = 584,
    BFD_RELOC_ARM_TLS_LDO32 = 585,
    BFD_RELOC_ARM_TLS_LDM32 = 586,
    BFD_RELOC_ARM_TLS_DTPOFF32 = 587,
    BFD_RELOC_ARM_TLS_DTPMOD32 = 588,
    BFD_RELOC_ARM_TLS_TPOFF32 = 589,
    BFD_RELOC_ARM_TLS_IE32 = 590,
    BFD_RELOC_ARM_TLS_LE32 = 591,
    BFD_RELOC_ARM_TLS_GOTDESC = 592,
    BFD_RELOC_ARM_TLS_CALL = 593,
    BFD_RELOC_ARM_THM_TLS_CALL = 594,
    BFD_RELOC_ARM_TLS_DESCSEQ = 595,
    BFD_RELOC_ARM_THM_TLS_DESCSEQ = 596,
    BFD_RELOC_ARM_TLS_DESC = 597,
    BFD_RELOC_ARM_ALU_PC_G0_NC = 598,
    BFD_RELOC_ARM_ALU_PC_G0 = 599,
    BFD_RELOC_ARM_ALU_PC_G1_NC = 600,
    BFD_RELOC_ARM_ALU_PC_G1 = 601,
    BFD_RELOC_ARM_ALU_PC_G2 = 602,
    BFD_RELOC_ARM_LDR_PC_G0 = 603,
    BFD_RELOC_ARM_LDR_PC_G1 = 604,
    BFD_RELOC_ARM_LDR_PC_G2 = 605,
    BFD_RELOC_ARM_LDRS_PC_G0 = 606,
    BFD_RELOC_ARM_LDRS_PC_G1 = 607,
    BFD_RELOC_ARM_LDRS_PC_G2 = 608,
    BFD_RELOC_ARM_LDC_PC_G0 = 609,
    BFD_RELOC_ARM_LDC_PC_G1 = 610,
    BFD_RELOC_ARM_LDC_PC_G2 = 611,
    BFD_RELOC_ARM_ALU_SB_G0_NC = 612,
    BFD_RELOC_ARM_ALU_SB_G0 = 613,
    BFD_RELOC_ARM_ALU_SB_G1_NC = 614,
    BFD_RELOC_ARM_ALU_SB_G1 = 615,
    BFD_RELOC_ARM_ALU_SB_G2 = 616,
    BFD_RELOC_ARM_LDR_SB_G0 = 617,
    BFD_RELOC_ARM_LDR_SB_G1 = 618,
    BFD_RELOC_ARM_LDR_SB_G2 = 619,
    BFD_RELOC_ARM_LDRS_SB_G0 = 620,
    BFD_RELOC_ARM_LDRS_SB_G1 = 621,
    BFD_RELOC_ARM_LDRS_SB_G2 = 622,
    BFD_RELOC_ARM_LDC_SB_G0 = 623,
    BFD_RELOC_ARM_LDC_SB_G1 = 624,
    BFD_RELOC_ARM_LDC_SB_G2 = 625,
    BFD_RELOC_ARM_V4BX = 626,
    BFD_RELOC_ARM_IRELATIVE = 627,
    BFD_RELOC_ARM_IMMEDIATE = 628,
    BFD_RELOC_ARM_ADRL_IMMEDIATE = 629,
    BFD_RELOC_ARM_T32_IMMEDIATE = 630,
    BFD_RELOC_ARM_T32_ADD_IMM = 631,
    BFD_RELOC_ARM_T32_IMM12 = 632,
    BFD_RELOC_ARM_T32_ADD_PC12 = 633,
    BFD_RELOC_ARM_SHIFT_IMM = 634,
    BFD_RELOC_ARM_SMC = 635,
    BFD_RELOC_ARM_HVC = 636,
    BFD_RELOC_ARM_SWI = 637,
    BFD_RELOC_ARM_MULTI = 638,
    BFD_RELOC_ARM_CP_OFF_IMM = 639,
    BFD_RELOC_ARM_CP_OFF_IMM_S2 = 640,
    BFD_RELOC_ARM_T32_CP_OFF_IMM = 641,
    BFD_RELOC_ARM_T32_CP_OFF_IMM_S2 = 642,
    BFD_RELOC_ARM_ADR_IMM = 643,
    BFD_RELOC_ARM_LDR_IMM = 644,
    BFD_RELOC_ARM_LITERAL = 645,
    BFD_RELOC_ARM_IN_POOL = 646,
    BFD_RELOC_ARM_OFFSET_IMM8 = 647,
    BFD_RELOC_ARM_T32_OFFSET_U8 = 648,
    BFD_RELOC_ARM_T32_OFFSET_IMM = 649,
    BFD_RELOC_ARM_HWLITERAL = 650,
    BFD_RELOC_ARM_THUMB_ADD = 651,
    BFD_RELOC_ARM_THUMB_IMM = 652,
    BFD_RELOC_ARM_THUMB_SHIFT = 653,
    BFD_RELOC_SH_PCDISP8BY2 = 654,
    BFD_RELOC_SH_PCDISP12BY2 = 655,
    BFD_RELOC_SH_IMM3 = 656,
    BFD_RELOC_SH_IMM3U = 657,
    BFD_RELOC_SH_DISP12 = 658,
    BFD_RELOC_SH_DISP12BY2 = 659,
    BFD_RELOC_SH_DISP12BY4 = 660,
    BFD_RELOC_SH_DISP12BY8 = 661,
    BFD_RELOC_SH_DISP20 = 662,
    BFD_RELOC_SH_DISP20BY8 = 663,
    BFD_RELOC_SH_IMM4 = 664,
    BFD_RELOC_SH_IMM4BY2 = 665,
    BFD_RELOC_SH_IMM4BY4 = 666,
    BFD_RELOC_SH_IMM8 = 667,
    BFD_RELOC_SH_IMM8BY2 = 668,
    BFD_RELOC_SH_IMM8BY4 = 669,
    BFD_RELOC_SH_PCRELIMM8BY2 = 670,
    BFD_RELOC_SH_PCRELIMM8BY4 = 671,
    BFD_RELOC_SH_SWITCH16 = 672,
    BFD_RELOC_SH_SWITCH32 = 673,
    BFD_RELOC_SH_USES = 674,
    BFD_RELOC_SH_COUNT = 675,
    BFD_RELOC_SH_ALIGN = 676,
    BFD_RELOC_SH_CODE = 677,
    BFD_RELOC_SH_DATA = 678,
    BFD_RELOC_SH_LABEL = 679,
    BFD_RELOC_SH_LOOP_START = 680,
    BFD_RELOC_SH_LOOP_END = 681,
    BFD_RELOC_SH_COPY = 682,
    BFD_RELOC_SH_GLOB_DAT = 683,
    BFD_RELOC_SH_JMP_SLOT = 684,
    BFD_RELOC_SH_RELATIVE = 685,
    BFD_RELOC_SH_GOTPC = 686,
    BFD_RELOC_SH_GOT_LOW16 = 687,
    BFD_RELOC_SH_GOT_MEDLOW16 = 688,
    BFD_RELOC_SH_GOT_MEDHI16 = 689,
    BFD_RELOC_SH_GOT_HI16 = 690,
    BFD_RELOC_SH_GOTPLT_LOW16 = 691,
    BFD_RELOC_SH_GOTPLT_MEDLOW16 = 692,
    BFD_RELOC_SH_GOTPLT_MEDHI16 = 693,
    BFD_RELOC_SH_GOTPLT_HI16 = 694,
    BFD_RELOC_SH_PLT_LOW16 = 695,
    BFD_RELOC_SH_PLT_MEDLOW16 = 696,
    BFD_RELOC_SH_PLT_MEDHI16 = 697,
    BFD_RELOC_SH_PLT_HI16 = 698,
    BFD_RELOC_SH_GOTOFF_LOW16 = 699,
    BFD_RELOC_SH_GOTOFF_MEDLOW16 = 700,
    BFD_RELOC_SH_GOTOFF_MEDHI16 = 701,
    BFD_RELOC_SH_GOTOFF_HI16 = 702,
    BFD_RELOC_SH_GOTPC_LOW16 = 703,
    BFD_RELOC_SH_GOTPC_MEDLOW16 = 704,
    BFD_RELOC_SH_GOTPC_MEDHI16 = 705,
    BFD_RELOC_SH_GOTPC_HI16 = 706,
    BFD_RELOC_SH_COPY64 = 707,
    BFD_RELOC_SH_GLOB_DAT64 = 708,
    BFD_RELOC_SH_JMP_SLOT64 = 709,
    BFD_RELOC_SH_RELATIVE64 = 710,
    BFD_RELOC_SH_GOT10BY4 = 711,
    BFD_RELOC_SH_GOT10BY8 = 712,
    BFD_RELOC_SH_GOTPLT10BY4 = 713,
    BFD_RELOC_SH_GOTPLT10BY8 = 714,
    BFD_RELOC_SH_GOTPLT32 = 715,
    BFD_RELOC_SH_SHMEDIA_CODE = 716,
    BFD_RELOC_SH_IMMU5 = 717,
    BFD_RELOC_SH_IMMS6 = 718,
    BFD_RELOC_SH_IMMS6BY32 = 719,
    BFD_RELOC_SH_IMMU6 = 720,
    BFD_RELOC_SH_IMMS10 = 721,
    BFD_RELOC_SH_IMMS10BY2 = 722,
    BFD_RELOC_SH_IMMS10BY4 = 723,
    BFD_RELOC_SH_IMMS10BY8 = 724,
    BFD_RELOC_SH_IMMS16 = 725,
    BFD_RELOC_SH_IMMU16 = 726,
    BFD_RELOC_SH_IMM_LOW16 = 727,
    BFD_RELOC_SH_IMM_LOW16_PCREL = 728,
    BFD_RELOC_SH_IMM_MEDLOW16 = 729,
    BFD_RELOC_SH_IMM_MEDLOW16_PCREL = 730,
    BFD_RELOC_SH_IMM_MEDHI16 = 731,
    BFD_RELOC_SH_IMM_MEDHI16_PCREL = 732,
    BFD_RELOC_SH_IMM_HI16 = 733,
    BFD_RELOC_SH_IMM_HI16_PCREL = 734,
    BFD_RELOC_SH_PT_16 = 735,
    BFD_RELOC_SH_TLS_GD_32 = 736,
    BFD_RELOC_SH_TLS_LD_32 = 737,
    BFD_RELOC_SH_TLS_LDO_32 = 738,
    BFD_RELOC_SH_TLS_IE_32 = 739,
    BFD_RELOC_SH_TLS_LE_32 = 740,
    BFD_RELOC_SH_TLS_DTPMOD32 = 741,
    BFD_RELOC_SH_TLS_DTPOFF32 = 742,
    BFD_RELOC_SH_TLS_TPOFF32 = 743,
    BFD_RELOC_SH_GOT20 = 744,
    BFD_RELOC_SH_GOTOFF20 = 745,
    BFD_RELOC_SH_GOTFUNCDESC = 746,
    BFD_RELOC_SH_GOTFUNCDESC20 = 747,
    BFD_RELOC_SH_GOTOFFFUNCDESC = 748,
    BFD_RELOC_SH_GOTOFFFUNCDESC20 = 749,
    BFD_RELOC_SH_FUNCDESC = 750,
    BFD_RELOC_ARC_NONE = 751,
    BFD_RELOC_ARC_8 = 752,
    BFD_RELOC_ARC_16 = 753,
    BFD_RELOC_ARC_24 = 754,
    BFD_RELOC_ARC_32 = 755,
    BFD_RELOC_ARC_N8 = 756,
    BFD_RELOC_ARC_N16 = 757,
    BFD_RELOC_ARC_N24 = 758,
    BFD_RELOC_ARC_N32 = 759,
    BFD_RELOC_ARC_SDA = 760,
    BFD_RELOC_ARC_SECTOFF = 761,
    BFD_RELOC_ARC_S21H_PCREL = 762,
    BFD_RELOC_ARC_S21W_PCREL = 763,
    BFD_RELOC_ARC_S25H_PCREL = 764,
    BFD_RELOC_ARC_S25W_PCREL = 765,
    BFD_RELOC_ARC_SDA32 = 766,
    BFD_RELOC_ARC_SDA_LDST = 767,
    BFD_RELOC_ARC_SDA_LDST1 = 768,
    BFD_RELOC_ARC_SDA_LDST2 = 769,
    BFD_RELOC_ARC_SDA16_LD = 770,
    BFD_RELOC_ARC_SDA16_LD1 = 771,
    BFD_RELOC_ARC_SDA16_LD2 = 772,
    BFD_RELOC_ARC_S13_PCREL = 773,
    BFD_RELOC_ARC_W = 774,
    BFD_RELOC_ARC_32_ME = 775,
    BFD_RELOC_ARC_32_ME_S = 776,
    BFD_RELOC_ARC_N32_ME = 777,
    BFD_RELOC_ARC_SECTOFF_ME = 778,
    BFD_RELOC_ARC_SDA32_ME = 779,
    BFD_RELOC_ARC_W_ME = 780,
    BFD_RELOC_AC_SECTOFF_U8 = 781,
    BFD_RELOC_AC_SECTOFF_U8_1 = 782,
    BFD_RELOC_AC_SECTOFF_U8_2 = 783,
    BFD_RELOC_AC_SECTFOFF_S9 = 784,
    BFD_RELOC_AC_SECTFOFF_S9_1 = 785,
    BFD_RELOC_AC_SECTFOFF_S9_2 = 786,
    BFD_RELOC_ARC_SECTOFF_ME_1 = 787,
    BFD_RELOC_ARC_SECTOFF_ME_2 = 788,
    BFD_RELOC_ARC_SECTOFF_1 = 789,
    BFD_RELOC_ARC_SECTOFF_2 = 790,
    BFD_RELOC_ARC_SDA16_ST2 = 791,
    BFD_RELOC_ARC_32_PCREL = 792,
    BFD_RELOC_ARC_PC32 = 793,
    BFD_RELOC_ARC_GOT32 = 794,
    BFD_RELOC_ARC_GOTPC32 = 795,
    BFD_RELOC_ARC_PLT32 = 796,
    BFD_RELOC_ARC_COPY = 797,
    BFD_RELOC_ARC_GLOB_DAT = 798,
    BFD_RELOC_ARC_JMP_SLOT = 799,
    BFD_RELOC_ARC_RELATIVE = 800,
    BFD_RELOC_ARC_GOTOFF = 801,
    BFD_RELOC_ARC_GOTPC = 802,
    BFD_RELOC_ARC_S21W_PCREL_PLT = 803,
    BFD_RELOC_ARC_S25H_PCREL_PLT = 804,
    BFD_RELOC_ARC_TLS_DTPMOD = 805,
    BFD_RELOC_ARC_TLS_TPOFF = 806,
    BFD_RELOC_ARC_TLS_GD_GOT = 807,
    BFD_RELOC_ARC_TLS_GD_LD = 808,
    BFD_RELOC_ARC_TLS_GD_CALL = 809,
    BFD_RELOC_ARC_TLS_IE_GOT = 810,
    BFD_RELOC_ARC_TLS_DTPOFF = 811,
    BFD_RELOC_ARC_TLS_DTPOFF_S9 = 812,
    BFD_RELOC_ARC_TLS_LE_S9 = 813,
    BFD_RELOC_ARC_TLS_LE_32 = 814,
    BFD_RELOC_ARC_S25W_PCREL_PLT = 815,
    BFD_RELOC_ARC_S21H_PCREL_PLT = 816,
    BFD_RELOC_BFIN_16_IMM = 817,
    BFD_RELOC_BFIN_16_HIGH = 818,
    BFD_RELOC_BFIN_4_PCREL = 819,
    BFD_RELOC_BFIN_5_PCREL = 820,
    BFD_RELOC_BFIN_16_LOW = 821,
    BFD_RELOC_BFIN_10_PCREL = 822,
    BFD_RELOC_BFIN_11_PCREL = 823,
    BFD_RELOC_BFIN_12_PCREL_JUMP = 824,
    BFD_RELOC_BFIN_12_PCREL_JUMP_S = 825,
    BFD_RELOC_BFIN_24_PCREL_CALL_X = 826,
    BFD_RELOC_BFIN_24_PCREL_JUMP_L = 827,
    BFD_RELOC_BFIN_GOT17M4 = 828,
    BFD_RELOC_BFIN_GOTHI = 829,
    BFD_RELOC_BFIN_GOTLO = 830,
    BFD_RELOC_BFIN_FUNCDESC = 831,
    BFD_RELOC_BFIN_FUNCDESC_GOT17M4 = 832,
    BFD_RELOC_BFIN_FUNCDESC_GOTHI = 833,
    BFD_RELOC_BFIN_FUNCDESC_GOTLO = 834,
    BFD_RELOC_BFIN_FUNCDESC_VALUE = 835,
    BFD_RELOC_BFIN_FUNCDESC_GOTOFF17M4 = 836,
    BFD_RELOC_BFIN_FUNCDESC_GOTOFFHI = 837,
    BFD_RELOC_BFIN_FUNCDESC_GOTOFFLO = 838,
    BFD_RELOC_BFIN_GOTOFF17M4 = 839,
    BFD_RELOC_BFIN_GOTOFFHI = 840,
    BFD_RELOC_BFIN_GOTOFFLO = 841,
    BFD_RELOC_BFIN_GOT = 842,
    BFD_RELOC_BFIN_PLTPC = 843,
    BFD_ARELOC_BFIN_PUSH = 844,
    BFD_ARELOC_BFIN_CONST = 845,
    BFD_ARELOC_BFIN_ADD = 846,
    BFD_ARELOC_BFIN_SUB = 847,
    BFD_ARELOC_BFIN_MULT = 848,
    BFD_ARELOC_BFIN_DIV = 849,
    BFD_ARELOC_BFIN_MOD = 850,
    BFD_ARELOC_BFIN_LSHIFT = 851,
    BFD_ARELOC_BFIN_RSHIFT = 852,
    BFD_ARELOC_BFIN_AND = 853,
    BFD_ARELOC_BFIN_OR = 854,
    BFD_ARELOC_BFIN_XOR = 855,
    BFD_ARELOC_BFIN_LAND = 856,
    BFD_ARELOC_BFIN_LOR = 857,
    BFD_ARELOC_BFIN_LEN = 858,
    BFD_ARELOC_BFIN_NEG = 859,
    BFD_ARELOC_BFIN_COMP = 860,
    BFD_ARELOC_BFIN_PAGE = 861,
    BFD_ARELOC_BFIN_HWPAGE = 862,
    BFD_ARELOC_BFIN_ADDR = 863,
    BFD_RELOC_D10V_10_PCREL_R = 864,
    BFD_RELOC_D10V_10_PCREL_L = 865,
    BFD_RELOC_D10V_18 = 866,
    BFD_RELOC_D10V_18_PCREL = 867,
    BFD_RELOC_D30V_6 = 868,
    BFD_RELOC_D30V_9_PCREL = 869,
    BFD_RELOC_D30V_9_PCREL_R = 870,
    BFD_RELOC_D30V_15 = 871,
    BFD_RELOC_D30V_15_PCREL = 872,
    BFD_RELOC_D30V_15_PCREL_R = 873,
    BFD_RELOC_D30V_21 = 874,
    BFD_RELOC_D30V_21_PCREL = 875,
    BFD_RELOC_D30V_21_PCREL_R = 876,
    BFD_RELOC_D30V_32 = 877,
    BFD_RELOC_D30V_32_PCREL = 878,
    BFD_RELOC_DLX_HI16_S = 879,
    BFD_RELOC_DLX_LO16 = 880,
    BFD_RELOC_DLX_JMP26 = 881,
    BFD_RELOC_M32C_HI8 = 882,
    BFD_RELOC_M32C_RL_JUMP = 883,
    BFD_RELOC_M32C_RL_1ADDR = 884,
    BFD_RELOC_M32C_RL_2ADDR = 885,
    BFD_RELOC_M32R_24 = 886,
    BFD_RELOC_M32R_10_PCREL = 887,
    BFD_RELOC_M32R_18_PCREL = 888,
    BFD_RELOC_M32R_26_PCREL = 889,
    BFD_RELOC_M32R_HI16_ULO = 890,
    BFD_RELOC_M32R_HI16_SLO = 891,
    BFD_RELOC_M32R_LO16 = 892,
    BFD_RELOC_M32R_SDA16 = 893,
    BFD_RELOC_M32R_GOT24 = 894,
    BFD_RELOC_M32R_26_PLTREL = 895,
    BFD_RELOC_M32R_COPY = 896,
    BFD_RELOC_M32R_GLOB_DAT = 897,
    BFD_RELOC_M32R_JMP_SLOT = 898,
    BFD_RELOC_M32R_RELATIVE = 899,
    BFD_RELOC_M32R_GOTOFF = 900,
    BFD_RELOC_M32R_GOTOFF_HI_ULO = 901,
    BFD_RELOC_M32R_GOTOFF_HI_SLO = 902,
    BFD_RELOC_M32R_GOTOFF_LO = 903,
    BFD_RELOC_M32R_GOTPC24 = 904,
    BFD_RELOC_M32R_GOT16_HI_ULO = 905,
    BFD_RELOC_M32R_GOT16_HI_SLO = 906,
    BFD_RELOC_M32R_GOT16_LO = 907,
    BFD_RELOC_M32R_GOTPC_HI_ULO = 908,
    BFD_RELOC_M32R_GOTPC_HI_SLO = 909,
    BFD_RELOC_M32R_GOTPC_LO = 910,
    BFD_RELOC_NDS32_20 = 911,
    BFD_RELOC_NDS32_9_PCREL = 912,
    BFD_RELOC_NDS32_WORD_9_PCREL = 913,
    BFD_RELOC_NDS32_15_PCREL = 914,
    BFD_RELOC_NDS32_17_PCREL = 915,
    BFD_RELOC_NDS32_25_PCREL = 916,
    BFD_RELOC_NDS32_HI20 = 917,
    BFD_RELOC_NDS32_LO12S3 = 918,
    BFD_RELOC_NDS32_LO12S2 = 919,
    BFD_RELOC_NDS32_LO12S1 = 920,
    BFD_RELOC_NDS32_LO12S0 = 921,
    BFD_RELOC_NDS32_LO12S0_ORI = 922,
    BFD_RELOC_NDS32_SDA15S3 = 923,
    BFD_RELOC_NDS32_SDA15S2 = 924,
    BFD_RELOC_NDS32_SDA15S1 = 925,
    BFD_RELOC_NDS32_SDA15S0 = 926,
    BFD_RELOC_NDS32_SDA16S3 = 927,
    BFD_RELOC_NDS32_SDA17S2 = 928,
    BFD_RELOC_NDS32_SDA18S1 = 929,
    BFD_RELOC_NDS32_SDA19S0 = 930,
    BFD_RELOC_NDS32_GOT20 = 931,
    BFD_RELOC_NDS32_9_PLTREL = 932,
    BFD_RELOC_NDS32_25_PLTREL = 933,
    BFD_RELOC_NDS32_COPY = 934,
    BFD_RELOC_NDS32_GLOB_DAT = 935,
    BFD_RELOC_NDS32_JMP_SLOT = 936,
    BFD_RELOC_NDS32_RELATIVE = 937,
    BFD_RELOC_NDS32_GOTOFF = 938,
    BFD_RELOC_NDS32_GOTOFF_HI20 = 939,
    BFD_RELOC_NDS32_GOTOFF_LO12 = 940,
    BFD_RELOC_NDS32_GOTPC20 = 941,
    BFD_RELOC_NDS32_GOT_HI20 = 942,
    BFD_RELOC_NDS32_GOT_LO12 = 943,
    BFD_RELOC_NDS32_GOTPC_HI20 = 944,
    BFD_RELOC_NDS32_GOTPC_LO12 = 945,
    BFD_RELOC_NDS32_INSN16 = 946,
    BFD_RELOC_NDS32_LABEL = 947,
    BFD_RELOC_NDS32_LONGCALL1 = 948,
    BFD_RELOC_NDS32_LONGCALL2 = 949,
    BFD_RELOC_NDS32_LONGCALL3 = 950,
    BFD_RELOC_NDS32_LONGJUMP1 = 951,
    BFD_RELOC_NDS32_LONGJUMP2 = 952,
    BFD_RELOC_NDS32_LONGJUMP3 = 953,
    BFD_RELOC_NDS32_LOADSTORE = 954,
    BFD_RELOC_NDS32_9_FIXED = 955,
    BFD_RELOC_NDS32_15_FIXED = 956,
    BFD_RELOC_NDS32_17_FIXED = 957,
    BFD_RELOC_NDS32_25_FIXED = 958,
    BFD_RELOC_NDS32_LONGCALL4 = 959,
    BFD_RELOC_NDS32_LONGCALL5 = 960,
    BFD_RELOC_NDS32_LONGCALL6 = 961,
    BFD_RELOC_NDS32_LONGJUMP4 = 962,
    BFD_RELOC_NDS32_LONGJUMP5 = 963,
    BFD_RELOC_NDS32_LONGJUMP6 = 964,
    BFD_RELOC_NDS32_LONGJUMP7 = 965,
    BFD_RELOC_NDS32_PLTREL_HI20 = 966,
    BFD_RELOC_NDS32_PLTREL_LO12 = 967,
    BFD_RELOC_NDS32_PLT_GOTREL_HI20 = 968,
    BFD_RELOC_NDS32_PLT_GOTREL_LO12 = 969,
    BFD_RELOC_NDS32_SDA12S2_DP = 970,
    BFD_RELOC_NDS32_SDA12S2_SP = 971,
    BFD_RELOC_NDS32_LO12S2_DP = 972,
    BFD_RELOC_NDS32_LO12S2_SP = 973,
    BFD_RELOC_NDS32_DWARF2_OP1 = 974,
    BFD_RELOC_NDS32_DWARF2_OP2 = 975,
    BFD_RELOC_NDS32_DWARF2_LEB = 976,
    BFD_RELOC_NDS32_UPDATE_TA = 977,
    BFD_RELOC_NDS32_PLT_GOTREL_LO20 = 978,
    BFD_RELOC_NDS32_PLT_GOTREL_LO15 = 979,
    BFD_RELOC_NDS32_PLT_GOTREL_LO19 = 980,
    BFD_RELOC_NDS32_GOT_LO15 = 981,
    BFD_RELOC_NDS32_GOT_LO19 = 982,
    BFD_RELOC_NDS32_GOTOFF_LO15 = 983,
    BFD_RELOC_NDS32_GOTOFF_LO19 = 984,
    BFD_RELOC_NDS32_GOT15S2 = 985,
    BFD_RELOC_NDS32_GOT17S2 = 986,
    BFD_RELOC_NDS32_5 = 987,
    BFD_RELOC_NDS32_10_UPCREL = 988,
    BFD_RELOC_NDS32_SDA_FP7U2_RELA = 989,
    BFD_RELOC_NDS32_RELAX_ENTRY = 990,
    BFD_RELOC_NDS32_GOT_SUFF = 991,
    BFD_RELOC_NDS32_GOTOFF_SUFF = 992,
    BFD_RELOC_NDS32_PLT_GOT_SUFF = 993,
    BFD_RELOC_NDS32_MULCALL_SUFF = 994,
    BFD_RELOC_NDS32_PTR = 995,
    BFD_RELOC_NDS32_PTR_COUNT = 996,
    BFD_RELOC_NDS32_PTR_RESOLVED = 997,
    BFD_RELOC_NDS32_PLTBLOCK = 998,
    BFD_RELOC_NDS32_RELAX_REGION_BEGIN = 999,
    BFD_RELOC_NDS32_RELAX_REGION_END = 1000,
    BFD_RELOC_NDS32_MINUEND = 1001,
    BFD_RELOC_NDS32_SUBTRAHEND = 1002,
    BFD_RELOC_NDS32_DIFF8 = 1003,
    BFD_RELOC_NDS32_DIFF16 = 1004,
    BFD_RELOC_NDS32_DIFF32 = 1005,
    BFD_RELOC_NDS32_DIFF_ULEB128 = 1006,
    BFD_RELOC_NDS32_EMPTY = 1007,
    BFD_RELOC_NDS32_25_ABS = 1008,
    BFD_RELOC_NDS32_DATA = 1009,
    BFD_RELOC_NDS32_TRAN = 1010,
    BFD_RELOC_NDS32_17IFC_PCREL = 1011,
    BFD_RELOC_NDS32_10IFCU_PCREL = 1012,
    BFD_RELOC_NDS32_TPOFF = 1013,
    BFD_RELOC_NDS32_TLS_LE_HI20 = 1014,
    BFD_RELOC_NDS32_TLS_LE_LO12 = 1015,
    BFD_RELOC_NDS32_TLS_LE_ADD = 1016,
    BFD_RELOC_NDS32_TLS_LE_LS = 1017,
    BFD_RELOC_NDS32_GOTTPOFF = 1018,
    BFD_RELOC_NDS32_TLS_IE_HI20 = 1019,
    BFD_RELOC_NDS32_TLS_IE_LO12S2 = 1020,
    BFD_RELOC_NDS32_TLS_TPOFF = 1021,
    BFD_RELOC_NDS32_TLS_LE_20 = 1022,
    BFD_RELOC_NDS32_TLS_LE_15S0 = 1023,
    BFD_RELOC_NDS32_TLS_LE_15S1 = 1024,
    BFD_RELOC_NDS32_TLS_LE_15S2 = 1025,
    BFD_RELOC_V850_9_PCREL = 1026,
    BFD_RELOC_V850_22_PCREL = 1027,
    BFD_RELOC_V850_SDA_16_16_OFFSET = 1028,
    BFD_RELOC_V850_SDA_15_16_OFFSET = 1029,
    BFD_RELOC_V850_ZDA_16_16_OFFSET = 1030,
    BFD_RELOC_V850_ZDA_15_16_OFFSET = 1031,
    BFD_RELOC_V850_TDA_6_8_OFFSET = 1032,
    BFD_RELOC_V850_TDA_7_8_OFFSET = 1033,
    BFD_RELOC_V850_TDA_7_7_OFFSET = 1034,
    BFD_RELOC_V850_TDA_16_16_OFFSET = 1035,
    BFD_RELOC_V850_TDA_4_5_OFFSET = 1036,
    BFD_RELOC_V850_TDA_4_4_OFFSET = 1037,
    BFD_RELOC_V850_SDA_16_16_SPLIT_OFFSET = 1038,
    BFD_RELOC_V850_ZDA_16_16_SPLIT_OFFSET = 1039,
    BFD_RELOC_V850_CALLT_6_7_OFFSET = 1040,
    BFD_RELOC_V850_CALLT_16_16_OFFSET = 1041,
    BFD_RELOC_V850_LONGCALL = 1042,
    BFD_RELOC_V850_LONGJUMP = 1043,
    BFD_RELOC_V850_ALIGN = 1044,
    BFD_RELOC_V850_LO16_SPLIT_OFFSET = 1045,
    BFD_RELOC_V850_16_PCREL = 1046,
    BFD_RELOC_V850_17_PCREL = 1047,
    BFD_RELOC_V850_23 = 1048,
    BFD_RELOC_V850_32_PCREL = 1049,
    BFD_RELOC_V850_32_ABS = 1050,
    BFD_RELOC_V850_16_SPLIT_OFFSET = 1051,
    BFD_RELOC_V850_16_S1 = 1052,
    BFD_RELOC_V850_LO16_S1 = 1053,
    BFD_RELOC_V850_CALLT_15_16_OFFSET = 1054,
    BFD_RELOC_V850_32_GOTPCREL = 1055,
    BFD_RELOC_V850_16_GOT = 1056,
    BFD_RELOC_V850_32_GOT = 1057,
    BFD_RELOC_V850_22_PLT_PCREL = 1058,
    BFD_RELOC_V850_32_PLT_PCREL = 1059,
    BFD_RELOC_V850_COPY = 1060,
    BFD_RELOC_V850_GLOB_DAT = 1061,
    BFD_RELOC_V850_JMP_SLOT = 1062,
    BFD_RELOC_V850_RELATIVE = 1063,
    BFD_RELOC_V850_16_GOTOFF = 1064,
    BFD_RELOC_V850_32_GOTOFF = 1065,
    BFD_RELOC_V850_CODE = 1066,
    BFD_RELOC_V850_DATA = 1067,
    BFD_RELOC_TIC30_LDP = 1068,
    BFD_RELOC_TIC54X_PARTLS7 = 1069,
    BFD_RELOC_TIC54X_PARTMS9 = 1070,
    BFD_RELOC_TIC54X_23 = 1071,
    BFD_RELOC_TIC54X_16_OF_23 = 1072,
    BFD_RELOC_TIC54X_MS7_OF_23 = 1073,
    BFD_RELOC_C6000_PCR_S21 = 1074,
    BFD_RELOC_C6000_PCR_S12 = 1075,
    BFD_RELOC_C6000_PCR_S10 = 1076,
    BFD_RELOC_C6000_PCR_S7 = 1077,
    BFD_RELOC_C6000_ABS_S16 = 1078,
    BFD_RELOC_C6000_ABS_L16 = 1079,
    BFD_RELOC_C6000_ABS_H16 = 1080,
    BFD_RELOC_C6000_SBR_U15_B = 1081,
    BFD_RELOC_C6000_SBR_U15_H = 1082,
    BFD_RELOC_C6000_SBR_U15_W = 1083,
    BFD_RELOC_C6000_SBR_S16 = 1084,
    BFD_RELOC_C6000_SBR_L16_B = 1085,
    BFD_RELOC_C6000_SBR_L16_H = 1086,
    BFD_RELOC_C6000_SBR_L16_W = 1087,
    BFD_RELOC_C6000_SBR_H16_B = 1088,
    BFD_RELOC_C6000_SBR_H16_H = 1089,
    BFD_RELOC_C6000_SBR_H16_W = 1090,
    BFD_RELOC_C6000_SBR_GOT_U15_W = 1091,
    BFD_RELOC_C6000_SBR_GOT_L16_W = 1092,
    BFD_RELOC_C6000_SBR_GOT_H16_W = 1093,
    BFD_RELOC_C6000_DSBT_INDEX = 1094,
    BFD_RELOC_C6000_PREL31 = 1095,
    BFD_RELOC_C6000_COPY = 1096,
    BFD_RELOC_C6000_JUMP_SLOT = 1097,
    BFD_RELOC_C6000_EHTYPE = 1098,
    BFD_RELOC_C6000_PCR_H16 = 1099,
    BFD_RELOC_C6000_PCR_L16 = 1100,
    BFD_RELOC_C6000_ALIGN = 1101,
    BFD_RELOC_C6000_FPHEAD = 1102,
    BFD_RELOC_C6000_NOCMP = 1103,
    BFD_RELOC_FR30_48 = 1104,
    BFD_RELOC_FR30_20 = 1105,
    BFD_RELOC_FR30_6_IN_4 = 1106,
    BFD_RELOC_FR30_8_IN_8 = 1107,
    BFD_RELOC_FR30_9_IN_8 = 1108,
    BFD_RELOC_FR30_10_IN_8 = 1109,
    BFD_RELOC_FR30_9_PCREL = 1110,
    BFD_RELOC_FR30_12_PCREL = 1111,
    BFD_RELOC_MCORE_PCREL_IMM8BY4 = 1112,
    BFD_RELOC_MCORE_PCREL_IMM11BY2 = 1113,
    BFD_RELOC_MCORE_PCREL_IMM4BY2 = 1114,
    BFD_RELOC_MCORE_PCREL_32 = 1115,
    BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2 = 1116,
    BFD_RELOC_MCORE_RVA = 1117,
    BFD_RELOC_MEP_8 = 1118,
    BFD_RELOC_MEP_16 = 1119,
    BFD_RELOC_MEP_32 = 1120,
    BFD_RELOC_MEP_PCREL8A2 = 1121,
    BFD_RELOC_MEP_PCREL12A2 = 1122,
    BFD_RELOC_MEP_PCREL17A2 = 1123,
    BFD_RELOC_MEP_PCREL24A2 = 1124,
    BFD_RELOC_MEP_PCABS24A2 = 1125,
    BFD_RELOC_MEP_LOW16 = 1126,
    BFD_RELOC_MEP_HI16U = 1127,
    BFD_RELOC_MEP_HI16S = 1128,
    BFD_RELOC_MEP_GPREL = 1129,
    BFD_RELOC_MEP_TPREL = 1130,
    BFD_RELOC_MEP_TPREL7 = 1131,
    BFD_RELOC_MEP_TPREL7A2 = 1132,
    BFD_RELOC_MEP_TPREL7A4 = 1133,
    BFD_RELOC_MEP_UIMM24 = 1134,
    BFD_RELOC_MEP_ADDR24A4 = 1135,
    BFD_RELOC_MEP_GNU_VTINHERIT = 1136,
    BFD_RELOC_MEP_GNU_VTENTRY = 1137,
    BFD_RELOC_METAG_HIADDR16 = 1138,
    BFD_RELOC_METAG_LOADDR16 = 1139,
    BFD_RELOC_METAG_RELBRANCH = 1140,
    BFD_RELOC_METAG_GETSETOFF = 1141,
    BFD_RELOC_METAG_HIOG = 1142,
    BFD_RELOC_METAG_LOOG = 1143,
    BFD_RELOC_METAG_REL8 = 1144,
    BFD_RELOC_METAG_REL16 = 1145,
    BFD_RELOC_METAG_HI16_GOTOFF = 1146,
    BFD_RELOC_METAG_LO16_GOTOFF = 1147,
    BFD_RELOC_METAG_GETSET_GOTOFF = 1148,
    BFD_RELOC_METAG_GETSET_GOT = 1149,
    BFD_RELOC_METAG_HI16_GOTPC = 1150,
    BFD_RELOC_METAG_LO16_GOTPC = 1151,
    BFD_RELOC_METAG_HI16_PLT = 1152,
    BFD_RELOC_METAG_LO16_PLT = 1153,
    BFD_RELOC_METAG_RELBRANCH_PLT = 1154,
    BFD_RELOC_METAG_GOTOFF = 1155,
    BFD_RELOC_METAG_PLT = 1156,
    BFD_RELOC_METAG_COPY = 1157,
    BFD_RELOC_METAG_JMP_SLOT = 1158,
    BFD_RELOC_METAG_RELATIVE = 1159,
    BFD_RELOC_METAG_GLOB_DAT = 1160,
    BFD_RELOC_METAG_TLS_GD = 1161,
    BFD_RELOC_METAG_TLS_LDM = 1162,
    BFD_RELOC_METAG_TLS_LDO_HI16 = 1163,
    BFD_RELOC_METAG_TLS_LDO_LO16 = 1164,
    BFD_RELOC_METAG_TLS_LDO = 1165,
    BFD_RELOC_METAG_TLS_IE = 1166,
    BFD_RELOC_METAG_TLS_IENONPIC = 1167,
    BFD_RELOC_METAG_TLS_IENONPIC_HI16 = 1168,
    BFD_RELOC_METAG_TLS_IENONPIC_LO16 = 1169,
    BFD_RELOC_METAG_TLS_TPOFF = 1170,
    BFD_RELOC_METAG_TLS_DTPMOD = 1171,
    BFD_RELOC_METAG_TLS_DTPOFF = 1172,
    BFD_RELOC_METAG_TLS_LE = 1173,
    BFD_RELOC_METAG_TLS_LE_HI16 = 1174,
    BFD_RELOC_METAG_TLS_LE_LO16 = 1175,
    BFD_RELOC_MMIX_GETA = 1176,
    BFD_RELOC_MMIX_GETA_1 = 1177,
    BFD_RELOC_MMIX_GETA_2 = 1178,
    BFD_RELOC_MMIX_GETA_3 = 1179,
    BFD_RELOC_MMIX_CBRANCH = 1180,
    BFD_RELOC_MMIX_CBRANCH_J = 1181,
    BFD_RELOC_MMIX_CBRANCH_1 = 1182,
    BFD_RELOC_MMIX_CBRANCH_2 = 1183,
    BFD_RELOC_MMIX_CBRANCH_3 = 1184,
    BFD_RELOC_MMIX_PUSHJ = 1185,
    BFD_RELOC_MMIX_PUSHJ_1 = 1186,
    BFD_RELOC_MMIX_PUSHJ_2 = 1187,
    BFD_RELOC_MMIX_PUSHJ_3 = 1188,
    BFD_RELOC_MMIX_PUSHJ_STUBBABLE = 1189,
    BFD_RELOC_MMIX_JMP = 1190,
    BFD_RELOC_MMIX_JMP_1 = 1191,
    BFD_RELOC_MMIX_JMP_2 = 1192,
    BFD_RELOC_MMIX_JMP_3 = 1193,
    BFD_RELOC_MMIX_ADDR19 = 1194,
    BFD_RELOC_MMIX_ADDR27 = 1195,
    BFD_RELOC_MMIX_REG_OR_BYTE = 1196,
    BFD_RELOC_MMIX_REG = 1197,
    BFD_RELOC_MMIX_BASE_PLUS_OFFSET = 1198,
    BFD_RELOC_MMIX_LOCAL = 1199,
    BFD_RELOC_AVR_7_PCREL = 1200,
    BFD_RELOC_AVR_13_PCREL = 1201,
    BFD_RELOC_AVR_16_PM = 1202,
    BFD_RELOC_AVR_LO8_LDI = 1203,
    BFD_RELOC_AVR_HI8_LDI = 1204,
    BFD_RELOC_AVR_HH8_LDI = 1205,
    BFD_RELOC_AVR_MS8_LDI = 1206,
    BFD_RELOC_AVR_LO8_LDI_NEG = 1207,
    BFD_RELOC_AVR_HI8_LDI_NEG = 1208,
    BFD_RELOC_AVR_HH8_LDI_NEG = 1209,
    BFD_RELOC_AVR_MS8_LDI_NEG = 1210,
    BFD_RELOC_AVR_LO8_LDI_PM = 1211,
    BFD_RELOC_AVR_LO8_LDI_GS = 1212,
    BFD_RELOC_AVR_HI8_LDI_PM = 1213,
    BFD_RELOC_AVR_HI8_LDI_GS = 1214,
    BFD_RELOC_AVR_HH8_LDI_PM = 1215,
    BFD_RELOC_AVR_LO8_LDI_PM_NEG = 1216,
    BFD_RELOC_AVR_HI8_LDI_PM_NEG = 1217,
    BFD_RELOC_AVR_HH8_LDI_PM_NEG = 1218,
    BFD_RELOC_AVR_CALL = 1219,
    BFD_RELOC_AVR_LDI = 1220,
    BFD_RELOC_AVR_6 = 1221,
    BFD_RELOC_AVR_6_ADIW = 1222,
    BFD_RELOC_AVR_8_LO = 1223,
    BFD_RELOC_AVR_8_HI = 1224,
    BFD_RELOC_AVR_8_HLO = 1225,
    BFD_RELOC_AVR_DIFF8 = 1226,
    BFD_RELOC_AVR_DIFF16 = 1227,
    BFD_RELOC_AVR_DIFF32 = 1228,
    BFD_RELOC_AVR_LDS_STS_16 = 1229,
    BFD_RELOC_AVR_PORT6 = 1230,
    BFD_RELOC_AVR_PORT5 = 1231,
    BFD_RELOC_RL78_NEG8 = 1232,
    BFD_RELOC_RL78_NEG16 = 1233,
    BFD_RELOC_RL78_NEG24 = 1234,
    BFD_RELOC_RL78_NEG32 = 1235,
    BFD_RELOC_RL78_16_OP = 1236,
    BFD_RELOC_RL78_24_OP = 1237,
    BFD_RELOC_RL78_32_OP = 1238,
    BFD_RELOC_RL78_8U = 1239,
    BFD_RELOC_RL78_16U = 1240,
    BFD_RELOC_RL78_24U = 1241,
    BFD_RELOC_RL78_DIR3U_PCREL = 1242,
    BFD_RELOC_RL78_DIFF = 1243,
    BFD_RELOC_RL78_GPRELB = 1244,
    BFD_RELOC_RL78_GPRELW = 1245,
    BFD_RELOC_RL78_GPRELL = 1246,
    BFD_RELOC_RL78_SYM = 1247,
    BFD_RELOC_RL78_OP_SUBTRACT = 1248,
    BFD_RELOC_RL78_OP_NEG = 1249,
    BFD_RELOC_RL78_OP_AND = 1250,
    BFD_RELOC_RL78_OP_SHRA = 1251,
    BFD_RELOC_RL78_ABS8 = 1252,
    BFD_RELOC_RL78_ABS16 = 1253,
    BFD_RELOC_RL78_ABS16_REV = 1254,
    BFD_RELOC_RL78_ABS32 = 1255,
    BFD_RELOC_RL78_ABS32_REV = 1256,
    BFD_RELOC_RL78_ABS16U = 1257,
    BFD_RELOC_RL78_ABS16UW = 1258,
    BFD_RELOC_RL78_ABS16UL = 1259,
    BFD_RELOC_RL78_RELAX = 1260,
    BFD_RELOC_RL78_HI16 = 1261,
    BFD_RELOC_RL78_HI8 = 1262,
    BFD_RELOC_RL78_LO16 = 1263,
    BFD_RELOC_RL78_CODE = 1264,
    BFD_RELOC_RL78_SADDR = 1265,
    BFD_RELOC_RX_NEG8 = 1266,
    BFD_RELOC_RX_NEG16 = 1267,
    BFD_RELOC_RX_NEG24 = 1268,
    BFD_RELOC_RX_NEG32 = 1269,
    BFD_RELOC_RX_16_OP = 1270,
    BFD_RELOC_RX_24_OP = 1271,
    BFD_RELOC_RX_32_OP = 1272,
    BFD_RELOC_RX_8U = 1273,
    BFD_RELOC_RX_16U = 1274,
    BFD_RELOC_RX_24U = 1275,
    BFD_RELOC_RX_DIR3U_PCREL = 1276,
    BFD_RELOC_RX_DIFF = 1277,
    BFD_RELOC_RX_GPRELB = 1278,
    BFD_RELOC_RX_GPRELW = 1279,
    BFD_RELOC_RX_GPRELL = 1280,
    BFD_RELOC_RX_SYM = 1281,
    BFD_RELOC_RX_OP_SUBTRACT = 1282,
    BFD_RELOC_RX_OP_NEG = 1283,
    BFD_RELOC_RX_ABS8 = 1284,
    BFD_RELOC_RX_ABS16 = 1285,
    BFD_RELOC_RX_ABS16_REV = 1286,
    BFD_RELOC_RX_ABS32 = 1287,
    BFD_RELOC_RX_ABS32_REV = 1288,
    BFD_RELOC_RX_ABS16U = 1289,
    BFD_RELOC_RX_ABS16UW = 1290,
    BFD_RELOC_RX_ABS16UL = 1291,
    BFD_RELOC_RX_RELAX = 1292,
    BFD_RELOC_390_12 = 1293,
    BFD_RELOC_390_GOT12 = 1294,
    BFD_RELOC_390_PLT32 = 1295,
    BFD_RELOC_390_COPY = 1296,
    BFD_RELOC_390_GLOB_DAT = 1297,
    BFD_RELOC_390_JMP_SLOT = 1298,
    BFD_RELOC_390_RELATIVE = 1299,
    BFD_RELOC_390_GOTPC = 1300,
    BFD_RELOC_390_GOT16 = 1301,
    BFD_RELOC_390_PC12DBL = 1302,
    BFD_RELOC_390_PLT12DBL = 1303,
    BFD_RELOC_390_PC16DBL = 1304,
    BFD_RELOC_390_PLT16DBL = 1305,
    BFD_RELOC_390_PC24DBL = 1306,
    BFD_RELOC_390_PLT24DBL = 1307,
    BFD_RELOC_390_PC32DBL = 1308,
    BFD_RELOC_390_PLT32DBL = 1309,
    BFD_RELOC_390_GOTPCDBL = 1310,
    BFD_RELOC_390_GOT64 = 1311,
    BFD_RELOC_390_PLT64 = 1312,
    BFD_RELOC_390_GOTENT = 1313,
    BFD_RELOC_390_GOTOFF64 = 1314,
    BFD_RELOC_390_GOTPLT12 = 1315,
    BFD_RELOC_390_GOTPLT16 = 1316,
    BFD_RELOC_390_GOTPLT32 = 1317,
    BFD_RELOC_390_GOTPLT64 = 1318,
    BFD_RELOC_390_GOTPLTENT = 1319,
    BFD_RELOC_390_PLTOFF16 = 1320,
    BFD_RELOC_390_PLTOFF32 = 1321,
    BFD_RELOC_390_PLTOFF64 = 1322,
    BFD_RELOC_390_TLS_LOAD = 1323,
    BFD_RELOC_390_TLS_GDCALL = 1324,
    BFD_RELOC_390_TLS_LDCALL = 1325,
    BFD_RELOC_390_TLS_GD32 = 1326,
    BFD_RELOC_390_TLS_GD64 = 1327,
    BFD_RELOC_390_TLS_GOTIE12 = 1328,
    BFD_RELOC_390_TLS_GOTIE32 = 1329,
    BFD_RELOC_390_TLS_GOTIE64 = 1330,
    BFD_RELOC_390_TLS_LDM32 = 1331,
    BFD_RELOC_390_TLS_LDM64 = 1332,
    BFD_RELOC_390_TLS_IE32 = 1333,
    BFD_RELOC_390_TLS_IE64 = 1334,
    BFD_RELOC_390_TLS_IEENT = 1335,
    BFD_RELOC_390_TLS_LE32 = 1336,
    BFD_RELOC_390_TLS_LE64 = 1337,
    BFD_RELOC_390_TLS_LDO32 = 1338,
    BFD_RELOC_390_TLS_LDO64 = 1339,
    BFD_RELOC_390_TLS_DTPMOD = 1340,
    BFD_RELOC_390_TLS_DTPOFF = 1341,
    BFD_RELOC_390_TLS_TPOFF = 1342,
    BFD_RELOC_390_20 = 1343,
    BFD_RELOC_390_GOT20 = 1344,
    BFD_RELOC_390_GOTPLT20 = 1345,
    BFD_RELOC_390_TLS_GOTIE20 = 1346,
    BFD_RELOC_390_IRELATIVE = 1347,
    BFD_RELOC_SCORE_GPREL15 = 1348,
    BFD_RELOC_SCORE_DUMMY2 = 1349,
    BFD_RELOC_SCORE_JMP = 1350,
    BFD_RELOC_SCORE_BRANCH = 1351,
    BFD_RELOC_SCORE_IMM30 = 1352,
    BFD_RELOC_SCORE_IMM32 = 1353,
    BFD_RELOC_SCORE16_JMP = 1354,
    BFD_RELOC_SCORE16_BRANCH = 1355,
    BFD_RELOC_SCORE_BCMP = 1356,
    BFD_RELOC_SCORE_GOT15 = 1357,
    BFD_RELOC_SCORE_GOT_LO16 = 1358,
    BFD_RELOC_SCORE_CALL15 = 1359,
    BFD_RELOC_SCORE_DUMMY_HI16 = 1360,
    BFD_RELOC_IP2K_FR9 = 1361,
    BFD_RELOC_IP2K_BANK = 1362,
    BFD_RELOC_IP2K_ADDR16CJP = 1363,
    BFD_RELOC_IP2K_PAGE3 = 1364,
    BFD_RELOC_IP2K_LO8DATA = 1365,
    BFD_RELOC_IP2K_HI8DATA = 1366,
    BFD_RELOC_IP2K_EX8DATA = 1367,
    BFD_RELOC_IP2K_LO8INSN = 1368,
    BFD_RELOC_IP2K_HI8INSN = 1369,
    BFD_RELOC_IP2K_PC_SKIP = 1370,
    BFD_RELOC_IP2K_TEXT = 1371,
    BFD_RELOC_IP2K_FR_OFFSET = 1372,
    BFD_RELOC_VPE4KMATH_DATA = 1373,
    BFD_RELOC_VPE4KMATH_INSN = 1374,
    BFD_RELOC_VTABLE_INHERIT = 1375,
    BFD_RELOC_VTABLE_ENTRY = 1376,
    BFD_RELOC_IA64_IMM14 = 1377,
    BFD_RELOC_IA64_IMM22 = 1378,
    BFD_RELOC_IA64_IMM64 = 1379,
    BFD_RELOC_IA64_DIR32MSB = 1380,
    BFD_RELOC_IA64_DIR32LSB = 1381,
    BFD_RELOC_IA64_DIR64MSB = 1382,
    BFD_RELOC_IA64_DIR64LSB = 1383,
    BFD_RELOC_IA64_GPREL22 = 1384,
    BFD_RELOC_IA64_GPREL64I = 1385,
    BFD_RELOC_IA64_GPREL32MSB = 1386,
    BFD_RELOC_IA64_GPREL32LSB = 1387,
    BFD_RELOC_IA64_GPREL64MSB = 1388,
    BFD_RELOC_IA64_GPREL64LSB = 1389,
    BFD_RELOC_IA64_LTOFF22 = 1390,
    BFD_RELOC_IA64_LTOFF64I = 1391,
    BFD_RELOC_IA64_PLTOFF22 = 1392,
    BFD_RELOC_IA64_PLTOFF64I = 1393,
    BFD_RELOC_IA64_PLTOFF64MSB = 1394,
    BFD_RELOC_IA64_PLTOFF64LSB = 1395,
    BFD_RELOC_IA64_FPTR64I = 1396,
    BFD_RELOC_IA64_FPTR32MSB = 1397,
    BFD_RELOC_IA64_FPTR32LSB = 1398,
    BFD_RELOC_IA64_FPTR64MSB = 1399,
    BFD_RELOC_IA64_FPTR64LSB = 1400,
    BFD_RELOC_IA64_PCREL21B = 1401,
    BFD_RELOC_IA64_PCREL21BI = 1402,
    BFD_RELOC_IA64_PCREL21M = 1403,
    BFD_RELOC_IA64_PCREL21F = 1404,
    BFD_RELOC_IA64_PCREL22 = 1405,
    BFD_RELOC_IA64_PCREL60B = 1406,
    BFD_RELOC_IA64_PCREL64I = 1407,
    BFD_RELOC_IA64_PCREL32MSB = 1408,
    BFD_RELOC_IA64_PCREL32LSB = 1409,
    BFD_RELOC_IA64_PCREL64MSB = 1410,
    BFD_RELOC_IA64_PCREL64LSB = 1411,
    BFD_RELOC_IA64_LTOFF_FPTR22 = 1412,
    BFD_RELOC_IA64_LTOFF_FPTR64I = 1413,
    BFD_RELOC_IA64_LTOFF_FPTR32MSB = 1414,
    BFD_RELOC_IA64_LTOFF_FPTR32LSB = 1415,
    BFD_RELOC_IA64_LTOFF_FPTR64MSB = 1416,
    BFD_RELOC_IA64_LTOFF_FPTR64LSB = 1417,
    BFD_RELOC_IA64_SEGREL32MSB = 1418,
    BFD_RELOC_IA64_SEGREL32LSB = 1419,
    BFD_RELOC_IA64_SEGREL64MSB = 1420,
    BFD_RELOC_IA64_SEGREL64LSB = 1421,
    BFD_RELOC_IA64_SECREL32MSB = 1422,
    BFD_RELOC_IA64_SECREL32LSB = 1423,
    BFD_RELOC_IA64_SECREL64MSB = 1424,
    BFD_RELOC_IA64_SECREL64LSB = 1425,
    BFD_RELOC_IA64_REL32MSB = 1426,
    BFD_RELOC_IA64_REL32LSB = 1427,
    BFD_RELOC_IA64_REL64MSB = 1428,
    BFD_RELOC_IA64_REL64LSB = 1429,
    BFD_RELOC_IA64_LTV32MSB = 1430,
    BFD_RELOC_IA64_LTV32LSB = 1431,
    BFD_RELOC_IA64_LTV64MSB = 1432,
    BFD_RELOC_IA64_LTV64LSB = 1433,
    BFD_RELOC_IA64_IPLTMSB = 1434,
    BFD_RELOC_IA64_IPLTLSB = 1435,
    BFD_RELOC_IA64_COPY = 1436,
    BFD_RELOC_IA64_LTOFF22X = 1437,
    BFD_RELOC_IA64_LDXMOV = 1438,
    BFD_RELOC_IA64_TPREL14 = 1439,
    BFD_RELOC_IA64_TPREL22 = 1440,
    BFD_RELOC_IA64_TPREL64I = 1441,
    BFD_RELOC_IA64_TPREL64MSB = 1442,
    BFD_RELOC_IA64_TPREL64LSB = 1443,
    BFD_RELOC_IA64_LTOFF_TPREL22 = 1444,
    BFD_RELOC_IA64_DTPMOD64MSB = 1445,
    BFD_RELOC_IA64_DTPMOD64LSB = 1446,
    BFD_RELOC_IA64_LTOFF_DTPMOD22 = 1447,
    BFD_RELOC_IA64_DTPREL14 = 1448,
    BFD_RELOC_IA64_DTPREL22 = 1449,
    BFD_RELOC_IA64_DTPREL64I = 1450,
    BFD_RELOC_IA64_DTPREL32MSB = 1451,
    BFD_RELOC_IA64_DTPREL32LSB = 1452,
    BFD_RELOC_IA64_DTPREL64MSB = 1453,
    BFD_RELOC_IA64_DTPREL64LSB = 1454,
    BFD_RELOC_IA64_LTOFF_DTPREL22 = 1455,
    BFD_RELOC_M68HC11_HI8 = 1456,
    BFD_RELOC_M68HC11_LO8 = 1457,
    BFD_RELOC_M68HC11_3B = 1458,
    BFD_RELOC_M68HC11_RL_JUMP = 1459,
    BFD_RELOC_M68HC11_RL_GROUP = 1460,
    BFD_RELOC_M68HC11_LO16 = 1461,
    BFD_RELOC_M68HC11_PAGE = 1462,
    BFD_RELOC_M68HC11_24 = 1463,
    BFD_RELOC_M68HC12_5B = 1464,
    BFD_RELOC_XGATE_RL_JUMP = 1465,
    BFD_RELOC_XGATE_RL_GROUP = 1466,
    BFD_RELOC_XGATE_LO16 = 1467,
    BFD_RELOC_XGATE_GPAGE = 1468,
    BFD_RELOC_XGATE_24 = 1469,
    BFD_RELOC_XGATE_PCREL_9 = 1470,
    BFD_RELOC_XGATE_PCREL_10 = 1471,
    BFD_RELOC_XGATE_IMM8_LO = 1472,
    BFD_RELOC_XGATE_IMM8_HI = 1473,
    BFD_RELOC_XGATE_IMM3 = 1474,
    BFD_RELOC_XGATE_IMM4 = 1475,
    BFD_RELOC_XGATE_IMM5 = 1476,
    BFD_RELOC_M68HC12_9B = 1477,
    BFD_RELOC_M68HC12_16B = 1478,
    BFD_RELOC_M68HC12_9_PCREL = 1479,
    BFD_RELOC_M68HC12_10_PCREL = 1480,
    BFD_RELOC_M68HC12_LO8XG = 1481,
    BFD_RELOC_M68HC12_HI8XG = 1482,
    BFD_RELOC_16C_NUM08 = 1483,
    BFD_RELOC_16C_NUM08_C = 1484,
    BFD_RELOC_16C_NUM16 = 1485,
    BFD_RELOC_16C_NUM16_C = 1486,
    BFD_RELOC_16C_NUM32 = 1487,
    BFD_RELOC_16C_NUM32_C = 1488,
    BFD_RELOC_16C_DISP04 = 1489,
    BFD_RELOC_16C_DISP04_C = 1490,
    BFD_RELOC_16C_DISP08 = 1491,
    BFD_RELOC_16C_DISP08_C = 1492,
    BFD_RELOC_16C_DISP16 = 1493,
    BFD_RELOC_16C_DISP16_C = 1494,
    BFD_RELOC_16C_DISP24 = 1495,
    BFD_RELOC_16C_DISP24_C = 1496,
    BFD_RELOC_16C_DISP24a = 1497,
    BFD_RELOC_16C_DISP24a_C = 1498,
    BFD_RELOC_16C_REG04 = 1499,
    BFD_RELOC_16C_REG04_C = 1500,
    BFD_RELOC_16C_REG04a = 1501,
    BFD_RELOC_16C_REG04a_C = 1502,
    BFD_RELOC_16C_REG14 = 1503,
    BFD_RELOC_16C_REG14_C = 1504,
    BFD_RELOC_16C_REG16 = 1505,
    BFD_RELOC_16C_REG16_C = 1506,
    BFD_RELOC_16C_REG20 = 1507,
    BFD_RELOC_16C_REG20_C = 1508,
    BFD_RELOC_16C_ABS20 = 1509,
    BFD_RELOC_16C_ABS20_C = 1510,
    BFD_RELOC_16C_ABS24 = 1511,
    BFD_RELOC_16C_ABS24_C = 1512,
    BFD_RELOC_16C_IMM04 = 1513,
    BFD_RELOC_16C_IMM04_C = 1514,
    BFD_RELOC_16C_IMM16 = 1515,
    BFD_RELOC_16C_IMM16_C = 1516,
    BFD_RELOC_16C_IMM20 = 1517,
    BFD_RELOC_16C_IMM20_C = 1518,
    BFD_RELOC_16C_IMM24 = 1519,
    BFD_RELOC_16C_IMM24_C = 1520,
    BFD_RELOC_16C_IMM32 = 1521,
    BFD_RELOC_16C_IMM32_C = 1522,
    BFD_RELOC_CR16_NUM8 = 1523,
    BFD_RELOC_CR16_NUM16 = 1524,
    BFD_RELOC_CR16_NUM32 = 1525,
    BFD_RELOC_CR16_NUM32a = 1526,
    BFD_RELOC_CR16_REGREL0 = 1527,
    BFD_RELOC_CR16_REGREL4 = 1528,
    BFD_RELOC_CR16_REGREL4a = 1529,
    BFD_RELOC_CR16_REGREL14 = 1530,
    BFD_RELOC_CR16_REGREL14a = 1531,
    BFD_RELOC_CR16_REGREL16 = 1532,
    BFD_RELOC_CR16_REGREL20 = 1533,
    BFD_RELOC_CR16_REGREL20a = 1534,
    BFD_RELOC_CR16_ABS20 = 1535,
    BFD_RELOC_CR16_ABS24 = 1536,
    BFD_RELOC_CR16_IMM4 = 1537,
    BFD_RELOC_CR16_IMM8 = 1538,
    BFD_RELOC_CR16_IMM16 = 1539,
    BFD_RELOC_CR16_IMM20 = 1540,
    BFD_RELOC_CR16_IMM24 = 1541,
    BFD_RELOC_CR16_IMM32 = 1542,
    BFD_RELOC_CR16_IMM32a = 1543,
    BFD_RELOC_CR16_DISP4 = 1544,
    BFD_RELOC_CR16_DISP8 = 1545,
    BFD_RELOC_CR16_DISP16 = 1546,
    BFD_RELOC_CR16_DISP20 = 1547,
    BFD_RELOC_CR16_DISP24 = 1548,
    BFD_RELOC_CR16_DISP24a = 1549,
    BFD_RELOC_CR16_SWITCH8 = 1550,
    BFD_RELOC_CR16_SWITCH16 = 1551,
    BFD_RELOC_CR16_SWITCH32 = 1552,
    BFD_RELOC_CR16_GOT_REGREL20 = 1553,
    BFD_RELOC_CR16_GOTC_REGREL20 = 1554,
    BFD_RELOC_CR16_GLOB_DAT = 1555,
    BFD_RELOC_CRX_REL4 = 1556,
    BFD_RELOC_CRX_REL8 = 1557,
    BFD_RELOC_CRX_REL8_CMP = 1558,
    BFD_RELOC_CRX_REL16 = 1559,
    BFD_RELOC_CRX_REL24 = 1560,
    BFD_RELOC_CRX_REL32 = 1561,
    BFD_RELOC_CRX_REGREL12 = 1562,
    BFD_RELOC_CRX_REGREL22 = 1563,
    BFD_RELOC_CRX_REGREL28 = 1564,
    BFD_RELOC_CRX_REGREL32 = 1565,
    BFD_RELOC_CRX_ABS16 = 1566,
    BFD_RELOC_CRX_ABS32 = 1567,
    BFD_RELOC_CRX_NUM8 = 1568,
    BFD_RELOC_CRX_NUM16 = 1569,
    BFD_RELOC_CRX_NUM32 = 1570,
    BFD_RELOC_CRX_IMM16 = 1571,
    BFD_RELOC_CRX_IMM32 = 1572,
    BFD_RELOC_CRX_SWITCH8 = 1573,
    BFD_RELOC_CRX_SWITCH16 = 1574,
    BFD_RELOC_CRX_SWITCH32 = 1575,
    BFD_RELOC_CRIS_BDISP8 = 1576,
    BFD_RELOC_CRIS_UNSIGNED_5 = 1577,
    BFD_RELOC_CRIS_SIGNED_6 = 1578,
    BFD_RELOC_CRIS_UNSIGNED_6 = 1579,
    BFD_RELOC_CRIS_SIGNED_8 = 1580,
    BFD_RELOC_CRIS_UNSIGNED_8 = 1581,
    BFD_RELOC_CRIS_SIGNED_16 = 1582,
    BFD_RELOC_CRIS_UNSIGNED_16 = 1583,
    BFD_RELOC_CRIS_LAPCQ_OFFSET = 1584,
    BFD_RELOC_CRIS_UNSIGNED_4 = 1585,
    BFD_RELOC_CRIS_COPY = 1586,
    BFD_RELOC_CRIS_GLOB_DAT = 1587,
    BFD_RELOC_CRIS_JUMP_SLOT = 1588,
    BFD_RELOC_CRIS_RELATIVE = 1589,
    BFD_RELOC_CRIS_32_GOT = 1590,
    BFD_RELOC_CRIS_16_GOT = 1591,
    BFD_RELOC_CRIS_32_GOTPLT = 1592,
    BFD_RELOC_CRIS_16_GOTPLT = 1593,
    BFD_RELOC_CRIS_32_GOTREL = 1594,
    BFD_RELOC_CRIS_32_PLT_GOTREL = 1595,
    BFD_RELOC_CRIS_32_PLT_PCREL = 1596,
    BFD_RELOC_CRIS_32_GOT_GD = 1597,
    BFD_RELOC_CRIS_16_GOT_GD = 1598,
    BFD_RELOC_CRIS_32_GD = 1599,
    BFD_RELOC_CRIS_DTP = 1600,
    BFD_RELOC_CRIS_32_DTPREL = 1601,
    BFD_RELOC_CRIS_16_DTPREL = 1602,
    BFD_RELOC_CRIS_32_GOT_TPREL = 1603,
    BFD_RELOC_CRIS_16_GOT_TPREL = 1604,
    BFD_RELOC_CRIS_32_TPREL = 1605,
    BFD_RELOC_CRIS_16_TPREL = 1606,
    BFD_RELOC_CRIS_DTPMOD = 1607,
    BFD_RELOC_CRIS_32_IE = 1608,
    BFD_RELOC_860_COPY = 1609,
    BFD_RELOC_860_GLOB_DAT = 1610,
    BFD_RELOC_860_JUMP_SLOT = 1611,
    BFD_RELOC_860_RELATIVE = 1612,
    BFD_RELOC_860_PC26 = 1613,
    BFD_RELOC_860_PLT26 = 1614,
    BFD_RELOC_860_PC16 = 1615,
    BFD_RELOC_860_LOW0 = 1616,
    BFD_RELOC_860_SPLIT0 = 1617,
    BFD_RELOC_860_LOW1 = 1618,
    BFD_RELOC_860_SPLIT1 = 1619,
    BFD_RELOC_860_LOW2 = 1620,
    BFD_RELOC_860_SPLIT2 = 1621,
    BFD_RELOC_860_LOW3 = 1622,
    BFD_RELOC_860_LOGOT0 = 1623,
    BFD_RELOC_860_SPGOT0 = 1624,
    BFD_RELOC_860_LOGOT1 = 1625,
    BFD_RELOC_860_SPGOT1 = 1626,
    BFD_RELOC_860_LOGOTOFF0 = 1627,
    BFD_RELOC_860_SPGOTOFF0 = 1628,
    BFD_RELOC_860_LOGOTOFF1 = 1629,
    BFD_RELOC_860_SPGOTOFF1 = 1630,
    BFD_RELOC_860_LOGOTOFF2 = 1631,
    BFD_RELOC_860_LOGOTOFF3 = 1632,
    BFD_RELOC_860_LOPC = 1633,
    BFD_RELOC_860_HIGHADJ = 1634,
    BFD_RELOC_860_HAGOT = 1635,
    BFD_RELOC_860_HAGOTOFF = 1636,
    BFD_RELOC_860_HAPC = 1637,
    BFD_RELOC_860_HIGH = 1638,
    BFD_RELOC_860_HIGOT = 1639,
    BFD_RELOC_860_HIGOTOFF = 1640,
    BFD_RELOC_OR1K_REL_26 = 1641,
    BFD_RELOC_OR1K_GOTPC_HI16 = 1642,
    BFD_RELOC_OR1K_GOTPC_LO16 = 1643,
    BFD_RELOC_OR1K_GOT16 = 1644,
    BFD_RELOC_OR1K_PLT26 = 1645,
    BFD_RELOC_OR1K_GOTOFF_HI16 = 1646,
    BFD_RELOC_OR1K_GOTOFF_LO16 = 1647,
    BFD_RELOC_OR1K_COPY = 1648,
    BFD_RELOC_OR1K_GLOB_DAT = 1649,
    BFD_RELOC_OR1K_JMP_SLOT = 1650,
    BFD_RELOC_OR1K_RELATIVE = 1651,
    BFD_RELOC_OR1K_TLS_GD_HI16 = 1652,
    BFD_RELOC_OR1K_TLS_GD_LO16 = 1653,
    BFD_RELOC_OR1K_TLS_LDM_HI16 = 1654,
    BFD_RELOC_OR1K_TLS_LDM_LO16 = 1655,
    BFD_RELOC_OR1K_TLS_LDO_HI16 = 1656,
    BFD_RELOC_OR1K_TLS_LDO_LO16 = 1657,
    BFD_RELOC_OR1K_TLS_IE_HI16 = 1658,
    BFD_RELOC_OR1K_TLS_IE_LO16 = 1659,
    BFD_RELOC_OR1K_TLS_LE_HI16 = 1660,
    BFD_RELOC_OR1K_TLS_LE_LO16 = 1661,
    BFD_RELOC_OR1K_TLS_TPOFF = 1662,
    BFD_RELOC_OR1K_TLS_DTPOFF = 1663,
    BFD_RELOC_OR1K_TLS_DTPMOD = 1664,
    BFD_RELOC_H8_DIR16A8 = 1665,
    BFD_RELOC_H8_DIR16R8 = 1666,
    BFD_RELOC_H8_DIR24A8 = 1667,
    BFD_RELOC_H8_DIR24R8 = 1668,
    BFD_RELOC_H8_DIR32A16 = 1669,
    BFD_RELOC_H8_DISP32A16 = 1670,
    BFD_RELOC_XSTORMY16_REL_12 = 1671,
    BFD_RELOC_XSTORMY16_12 = 1672,
    BFD_RELOC_XSTORMY16_24 = 1673,
    BFD_RELOC_XSTORMY16_FPTR16 = 1674,
    BFD_RELOC_RELC = 1675,
    BFD_RELOC_XC16X_PAG = 1676,
    BFD_RELOC_XC16X_POF = 1677,
    BFD_RELOC_XC16X_SEG = 1678,
    BFD_RELOC_XC16X_SOF = 1679,
    BFD_RELOC_VAX_GLOB_DAT = 1680,
    BFD_RELOC_VAX_JMP_SLOT = 1681,
    BFD_RELOC_VAX_RELATIVE = 1682,
    BFD_RELOC_MT_PC16 = 1683,
    BFD_RELOC_MT_HI16 = 1684,
    BFD_RELOC_MT_LO16 = 1685,
    BFD_RELOC_MT_GNU_VTINHERIT = 1686,
    BFD_RELOC_MT_GNU_VTENTRY = 1687,
    BFD_RELOC_MT_PCINSN8 = 1688,
    BFD_RELOC_MSP430_10_PCREL = 1689,
    BFD_RELOC_MSP430_16_PCREL = 1690,
    BFD_RELOC_MSP430_16 = 1691,
    BFD_RELOC_MSP430_16_PCREL_BYTE = 1692,
    BFD_RELOC_MSP430_16_BYTE = 1693,
    BFD_RELOC_MSP430_2X_PCREL = 1694,
    BFD_RELOC_MSP430_RL_PCREL = 1695,
    BFD_RELOC_MSP430_ABS8 = 1696,
    BFD_RELOC_MSP430X_PCR20_EXT_SRC = 1697,
    BFD_RELOC_MSP430X_PCR20_EXT_DST = 1698,
    BFD_RELOC_MSP430X_PCR20_EXT_ODST = 1699,
    BFD_RELOC_MSP430X_ABS20_EXT_SRC = 1700,
    BFD_RELOC_MSP430X_ABS20_EXT_DST = 1701,
    BFD_RELOC_MSP430X_ABS20_EXT_ODST = 1702,
    BFD_RELOC_MSP430X_ABS20_ADR_SRC = 1703,
    BFD_RELOC_MSP430X_ABS20_ADR_DST = 1704,
    BFD_RELOC_MSP430X_PCR16 = 1705,
    BFD_RELOC_MSP430X_PCR20_CALL = 1706,
    BFD_RELOC_MSP430X_ABS16 = 1707,
    BFD_RELOC_MSP430_ABS_HI16 = 1708,
    BFD_RELOC_MSP430_PREL31 = 1709,
    BFD_RELOC_MSP430_SYM_DIFF = 1710,
    BFD_RELOC_NIOS2_S16 = 1711,
    BFD_RELOC_NIOS2_U16 = 1712,
    BFD_RELOC_NIOS2_CALL26 = 1713,
    BFD_RELOC_NIOS2_IMM5 = 1714,
    BFD_RELOC_NIOS2_CACHE_OPX = 1715,
    BFD_RELOC_NIOS2_IMM6 = 1716,
    BFD_RELOC_NIOS2_IMM8 = 1717,
    BFD_RELOC_NIOS2_HI16 = 1718,
    BFD_RELOC_NIOS2_LO16 = 1719,
    BFD_RELOC_NIOS2_HIADJ16 = 1720,
    BFD_RELOC_NIOS2_GPREL = 1721,
    BFD_RELOC_NIOS2_UJMP = 1722,
    BFD_RELOC_NIOS2_CJMP = 1723,
    BFD_RELOC_NIOS2_CALLR = 1724,
    BFD_RELOC_NIOS2_ALIGN = 1725,
    BFD_RELOC_NIOS2_GOT16 = 1726,
    BFD_RELOC_NIOS2_CALL16 = 1727,
    BFD_RELOC_NIOS2_GOTOFF_LO = 1728,
    BFD_RELOC_NIOS2_GOTOFF_HA = 1729,
    BFD_RELOC_NIOS2_PCREL_LO = 1730,
    BFD_RELOC_NIOS2_PCREL_HA = 1731,
    BFD_RELOC_NIOS2_TLS_GD16 = 1732,
    BFD_RELOC_NIOS2_TLS_LDM16 = 1733,
    BFD_RELOC_NIOS2_TLS_LDO16 = 1734,
    BFD_RELOC_NIOS2_TLS_IE16 = 1735,
    BFD_RELOC_NIOS2_TLS_LE16 = 1736,
    BFD_RELOC_NIOS2_TLS_DTPMOD = 1737,
    BFD_RELOC_NIOS2_TLS_DTPREL = 1738,
    BFD_RELOC_NIOS2_TLS_TPREL = 1739,
    BFD_RELOC_NIOS2_COPY = 1740,
    BFD_RELOC_NIOS2_GLOB_DAT = 1741,
    BFD_RELOC_NIOS2_JUMP_SLOT = 1742,
    BFD_RELOC_NIOS2_RELATIVE = 1743,
    BFD_RELOC_NIOS2_GOTOFF = 1744,
    BFD_RELOC_NIOS2_CALL26_NOAT = 1745,
    BFD_RELOC_NIOS2_GOT_LO = 1746,
    BFD_RELOC_NIOS2_GOT_HA = 1747,
    BFD_RELOC_NIOS2_CALL_LO = 1748,
    BFD_RELOC_NIOS2_CALL_HA = 1749,
    BFD_RELOC_NIOS2_R2_S12 = 1750,
    BFD_RELOC_NIOS2_R2_I10_1_PCREL = 1751,
    BFD_RELOC_NIOS2_R2_T1I7_1_PCREL = 1752,
    BFD_RELOC_NIOS2_R2_T1I7_2 = 1753,
    BFD_RELOC_NIOS2_R2_T2I4 = 1754,
    BFD_RELOC_NIOS2_R2_T2I4_1 = 1755,
    BFD_RELOC_NIOS2_R2_T2I4_2 = 1756,
    BFD_RELOC_NIOS2_R2_X1I7_2 = 1757,
    BFD_RELOC_NIOS2_R2_X2L5 = 1758,
    BFD_RELOC_NIOS2_R2_F1I5_2 = 1759,
    BFD_RELOC_NIOS2_R2_L5I4X1 = 1760,
    BFD_RELOC_NIOS2_R2_T1X1I6 = 1761,
    BFD_RELOC_NIOS2_R2_T1X1I6_2 = 1762,
    BFD_RELOC_IQ2000_OFFSET_16 = 1763,
    BFD_RELOC_IQ2000_OFFSET_21 = 1764,
    BFD_RELOC_IQ2000_UHI16 = 1765,
    BFD_RELOC_XTENSA_RTLD = 1766,
    BFD_RELOC_XTENSA_GLOB_DAT = 1767,
    BFD_RELOC_XTENSA_JMP_SLOT = 1768,
    BFD_RELOC_XTENSA_RELATIVE = 1769,
    BFD_RELOC_XTENSA_PLT = 1770,
    BFD_RELOC_XTENSA_DIFF8 = 1771,
    BFD_RELOC_XTENSA_DIFF16 = 1772,
    BFD_RELOC_XTENSA_DIFF32 = 1773,
    BFD_RELOC_XTENSA_SLOT0_OP = 1774,
    BFD_RELOC_XTENSA_SLOT1_OP = 1775,
    BFD_RELOC_XTENSA_SLOT2_OP = 1776,
    BFD_RELOC_XTENSA_SLOT3_OP = 1777,
    BFD_RELOC_XTENSA_SLOT4_OP = 1778,
    BFD_RELOC_XTENSA_SLOT5_OP = 1779,
    BFD_RELOC_XTENSA_SLOT6_OP = 1780,
    BFD_RELOC_XTENSA_SLOT7_OP = 1781,
    BFD_RELOC_XTENSA_SLOT8_OP = 1782,
    BFD_RELOC_XTENSA_SLOT9_OP = 1783,
    BFD_RELOC_XTENSA_SLOT10_OP = 1784,
    BFD_RELOC_XTENSA_SLOT11_OP = 1785,
    BFD_RELOC_XTENSA_SLOT12_OP = 1786,
    BFD_RELOC_XTENSA_SLOT13_OP = 1787,
    BFD_RELOC_XTENSA_SLOT14_OP = 1788,
    BFD_RELOC_XTENSA_SLOT0_ALT = 1789,
    BFD_RELOC_XTENSA_SLOT1_ALT = 1790,
    BFD_RELOC_XTENSA_SLOT2_ALT = 1791,
    BFD_RELOC_XTENSA_SLOT3_ALT = 1792,
    BFD_RELOC_XTENSA_SLOT4_ALT = 1793,
    BFD_RELOC_XTENSA_SLOT5_ALT = 1794,
    BFD_RELOC_XTENSA_SLOT6_ALT = 1795,
    BFD_RELOC_XTENSA_SLOT7_ALT = 1796,
    BFD_RELOC_XTENSA_SLOT8_ALT = 1797,
    BFD_RELOC_XTENSA_SLOT9_ALT = 1798,
    BFD_RELOC_XTENSA_SLOT10_ALT = 1799,
    BFD_RELOC_XTENSA_SLOT11_ALT = 1800,
    BFD_RELOC_XTENSA_SLOT12_ALT = 1801,
    BFD_RELOC_XTENSA_SLOT13_ALT = 1802,
    BFD_RELOC_XTENSA_SLOT14_ALT = 1803,
    BFD_RELOC_XTENSA_OP0 = 1804,
    BFD_RELOC_XTENSA_OP1 = 1805,
    BFD_RELOC_XTENSA_OP2 = 1806,
    BFD_RELOC_XTENSA_ASM_EXPAND = 1807,
    BFD_RELOC_XTENSA_ASM_SIMPLIFY = 1808,
    BFD_RELOC_XTENSA_TLSDESC_FN = 1809,
    BFD_RELOC_XTENSA_TLSDESC_ARG = 1810,
    BFD_RELOC_XTENSA_TLS_DTPOFF = 1811,
    BFD_RELOC_XTENSA_TLS_TPOFF = 1812,
    BFD_RELOC_XTENSA_TLS_FUNC = 1813,
    BFD_RELOC_XTENSA_TLS_ARG = 1814,
    BFD_RELOC_XTENSA_TLS_CALL = 1815,
    BFD_RELOC_Z80_DISP8 = 1816,
    BFD_RELOC_Z8K_DISP7 = 1817,
    BFD_RELOC_Z8K_CALLR = 1818,
    BFD_RELOC_Z8K_IMM4L = 1819,
    BFD_RELOC_LM32_CALL = 1820,
    BFD_RELOC_LM32_BRANCH = 1821,
    BFD_RELOC_LM32_16_GOT = 1822,
    BFD_RELOC_LM32_GOTOFF_HI16 = 1823,
    BFD_RELOC_LM32_GOTOFF_LO16 = 1824,
    BFD_RELOC_LM32_COPY = 1825,
    BFD_RELOC_LM32_GLOB_DAT = 1826,
    BFD_RELOC_LM32_JMP_SLOT = 1827,
    BFD_RELOC_LM32_RELATIVE = 1828,
    BFD_RELOC_MACH_O_SECTDIFF = 1829,
    BFD_RELOC_MACH_O_LOCAL_SECTDIFF = 1830,
    BFD_RELOC_MACH_O_PAIR = 1831,
    BFD_RELOC_MACH_O_X86_64_BRANCH32 = 1832,
    BFD_RELOC_MACH_O_X86_64_BRANCH8 = 1833,
    BFD_RELOC_MACH_O_X86_64_GOT = 1834,
    BFD_RELOC_MACH_O_X86_64_GOT_LOAD = 1835,
    BFD_RELOC_MACH_O_X86_64_SUBTRACTOR32 = 1836,
    BFD_RELOC_MACH_O_X86_64_SUBTRACTOR64 = 1837,
    BFD_RELOC_MACH_O_X86_64_PCREL32_1 = 1838,
    BFD_RELOC_MACH_O_X86_64_PCREL32_2 = 1839,
    BFD_RELOC_MACH_O_X86_64_PCREL32_4 = 1840,
    BFD_RELOC_MICROBLAZE_32_LO = 1841,
    BFD_RELOC_MICROBLAZE_32_LO_PCREL = 1842,
    BFD_RELOC_MICROBLAZE_32_ROSDA = 1843,
    BFD_RELOC_MICROBLAZE_32_RWSDA = 1844,
    BFD_RELOC_MICROBLAZE_32_SYM_OP_SYM = 1845,
    BFD_RELOC_MICROBLAZE_64_NONE = 1846,
    BFD_RELOC_MICROBLAZE_64_GOTPC = 1847,
    BFD_RELOC_MICROBLAZE_64_GOT = 1848,
    BFD_RELOC_MICROBLAZE_64_PLT = 1849,
    BFD_RELOC_MICROBLAZE_64_GOTOFF = 1850,
    BFD_RELOC_MICROBLAZE_32_GOTOFF = 1851,
    BFD_RELOC_MICROBLAZE_COPY = 1852,
    BFD_RELOC_MICROBLAZE_64_TLS = 1853,
    BFD_RELOC_MICROBLAZE_64_TLSGD = 1854,
    BFD_RELOC_MICROBLAZE_64_TLSLD = 1855,
    BFD_RELOC_MICROBLAZE_32_TLSDTPMOD = 1856,
    BFD_RELOC_MICROBLAZE_32_TLSDTPREL = 1857,
    BFD_RELOC_MICROBLAZE_64_TLSDTPREL = 1858,
    BFD_RELOC_MICROBLAZE_64_TLSGOTTPREL = 1859,
    BFD_RELOC_MICROBLAZE_64_TLSTPREL = 1860,
    BFD_RELOC_AARCH64_RELOC_START = 1861,
    BFD_RELOC_AARCH64_NONE = 1862,
    BFD_RELOC_AARCH64_64 = 1863,
    BFD_RELOC_AARCH64_32 = 1864,
    BFD_RELOC_AARCH64_16 = 1865,
    BFD_RELOC_AARCH64_64_PCREL = 1866,
    BFD_RELOC_AARCH64_32_PCREL = 1867,
    BFD_RELOC_AARCH64_16_PCREL = 1868,
    BFD_RELOC_AARCH64_MOVW_G0 = 1869,
    BFD_RELOC_AARCH64_MOVW_G0_NC = 1870,
    BFD_RELOC_AARCH64_MOVW_G1 = 1871,
    BFD_RELOC_AARCH64_MOVW_G1_NC = 1872,
    BFD_RELOC_AARCH64_MOVW_G2 = 1873,
    BFD_RELOC_AARCH64_MOVW_G2_NC = 1874,
    BFD_RELOC_AARCH64_MOVW_G3 = 1875,
    BFD_RELOC_AARCH64_MOVW_G0_S = 1876,
    BFD_RELOC_AARCH64_MOVW_G1_S = 1877,
    BFD_RELOC_AARCH64_MOVW_G2_S = 1878,
    BFD_RELOC_AARCH64_LD_LO19_PCREL = 1879,
    BFD_RELOC_AARCH64_ADR_LO21_PCREL = 1880,
    BFD_RELOC_AARCH64_ADR_HI21_PCREL = 1881,
    BFD_RELOC_AARCH64_ADR_HI21_NC_PCREL = 1882,
    BFD_RELOC_AARCH64_ADD_LO12 = 1883,
    BFD_RELOC_AARCH64_LDST8_LO12 = 1884,
    BFD_RELOC_AARCH64_TSTBR14 = 1885,
    BFD_RELOC_AARCH64_BRANCH19 = 1886,
    BFD_RELOC_AARCH64_JUMP26 = 1887,
    BFD_RELOC_AARCH64_CALL26 = 1888,
    BFD_RELOC_AARCH64_LDST16_LO12 = 1889,
    BFD_RELOC_AARCH64_LDST32_LO12 = 1890,
    BFD_RELOC_AARCH64_LDST64_LO12 = 1891,
    BFD_RELOC_AARCH64_LDST128_LO12 = 1892,
    BFD_RELOC_AARCH64_GOT_LD_PREL19 = 1893,
    BFD_RELOC_AARCH64_ADR_GOT_PAGE = 1894,
    BFD_RELOC_AARCH64_LD64_GOT_LO12_NC = 1895,
    BFD_RELOC_AARCH64_LD32_GOT_LO12_NC = 1896,
    BFD_RELOC_AARCH64_MOVW_GOTOFF_G0_NC = 1897,
    BFD_RELOC_AARCH64_MOVW_GOTOFF_G1 = 1898,
    BFD_RELOC_AARCH64_LD64_GOTOFF_LO15 = 1899,
    BFD_RELOC_AARCH64_LD32_GOTPAGE_LO14 = 1900,
    BFD_RELOC_AARCH64_LD64_GOTPAGE_LO15 = 1901,
    BFD_RELOC_AARCH64_TLSGD_ADR_PAGE21 = 1902,
    BFD_RELOC_AARCH64_TLSGD_ADR_PREL21 = 1903,
    BFD_RELOC_AARCH64_TLSGD_ADD_LO12_NC = 1904,
    BFD_RELOC_AARCH64_TLSGD_MOVW_G0_NC = 1905,
    BFD_RELOC_AARCH64_TLSGD_MOVW_G1 = 1906,
    BFD_RELOC_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 = 1907,
    BFD_RELOC_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC = 1908,
    BFD_RELOC_AARCH64_TLSIE_LD32_GOTTPREL_LO12_NC = 1909,
    BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_PREL19 = 1910,
    BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC = 1911,
    BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G1 = 1912,
    BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_HI12 = 1913,
    BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12 = 1914,
    BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12_NC = 1915,
    BFD_RELOC_AARCH64_TLSLD_ADD_LO12_NC = 1916,
    BFD_RELOC_AARCH64_TLSLD_ADR_PAGE21 = 1917,
    BFD_RELOC_AARCH64_TLSLD_ADR_PREL21 = 1918,
    BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12 = 1919,
    BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC = 1920,
    BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12 = 1921,
    BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC = 1922,
    BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12 = 1923,
    BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC = 1924,
    BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12 = 1925,
    BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC = 1926,
    BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0 = 1927,
    BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0_NC = 1928,
    BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1 = 1929,
    BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1_NC = 1930,
    BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G2 = 1931,
    BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G2 = 1932,
    BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1 = 1933,
    BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1_NC = 1934,
    BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0 = 1935,
    BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0_NC = 1936,
    BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_HI12 = 1937,
    BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12 = 1938,
    BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12_NC = 1939,
    BFD_RELOC_AARCH64_TLSDESC_LD_PREL19 = 1940,
    BFD_RELOC_AARCH64_TLSDESC_ADR_PREL21 = 1941,
    BFD_RELOC_AARCH64_TLSDESC_ADR_PAGE21 = 1942,
    BFD_RELOC_AARCH64_TLSDESC_LD64_LO12_NC = 1943,
    BFD_RELOC_AARCH64_TLSDESC_LD32_LO12_NC = 1944,
    BFD_RELOC_AARCH64_TLSDESC_ADD_LO12_NC = 1945,
    BFD_RELOC_AARCH64_TLSDESC_OFF_G1 = 1946,
    BFD_RELOC_AARCH64_TLSDESC_OFF_G0_NC = 1947,
    BFD_RELOC_AARCH64_TLSDESC_LDR = 1948,
    BFD_RELOC_AARCH64_TLSDESC_ADD = 1949,
    BFD_RELOC_AARCH64_TLSDESC_CALL = 1950,
    BFD_RELOC_AARCH64_COPY = 1951,
    BFD_RELOC_AARCH64_GLOB_DAT = 1952,
    BFD_RELOC_AARCH64_JUMP_SLOT = 1953,
    BFD_RELOC_AARCH64_RELATIVE = 1954,
    BFD_RELOC_AARCH64_TLS_DTPMOD = 1955,
    BFD_RELOC_AARCH64_TLS_DTPREL = 1956,
    BFD_RELOC_AARCH64_TLS_TPREL = 1957,
    BFD_RELOC_AARCH64_TLSDESC = 1958,
    BFD_RELOC_AARCH64_IRELATIVE = 1959,
    BFD_RELOC_AARCH64_RELOC_END = 1960,
    BFD_RELOC_AARCH64_GAS_INTERNAL_FIXUP = 1961,
    BFD_RELOC_AARCH64_LDST_LO12 = 1962,
    BFD_RELOC_AARCH64_TLSLD_LDST_DTPREL_LO12 = 1963,
    BFD_RELOC_AARCH64_TLSLD_LDST_DTPREL_LO12_NC = 1964,
    BFD_RELOC_AARCH64_LD_GOT_LO12_NC = 1965,
    BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_LO12_NC = 1966,
    BFD_RELOC_AARCH64_TLSDESC_LD_LO12_NC = 1967,
    BFD_RELOC_TILEPRO_COPY = 1968,
    BFD_RELOC_TILEPRO_GLOB_DAT = 1969,
    BFD_RELOC_TILEPRO_JMP_SLOT = 1970,
    BFD_RELOC_TILEPRO_RELATIVE = 1971,
    BFD_RELOC_TILEPRO_BROFF_X1 = 1972,
    BFD_RELOC_TILEPRO_JOFFLONG_X1 = 1973,
    BFD_RELOC_TILEPRO_JOFFLONG_X1_PLT = 1974,
    BFD_RELOC_TILEPRO_IMM8_X0 = 1975,
    BFD_RELOC_TILEPRO_IMM8_Y0 = 1976,
    BFD_RELOC_TILEPRO_IMM8_X1 = 1977,
    BFD_RELOC_TILEPRO_IMM8_Y1 = 1978,
    BFD_RELOC_TILEPRO_DEST_IMM8_X1 = 1979,
    BFD_RELOC_TILEPRO_MT_IMM15_X1 = 1980,
    BFD_RELOC_TILEPRO_MF_IMM15_X1 = 1981,
    BFD_RELOC_TILEPRO_IMM16_X0 = 1982,
    BFD_RELOC_TILEPRO_IMM16_X1 = 1983,
    BFD_RELOC_TILEPRO_IMM16_X0_LO = 1984,
    BFD_RELOC_TILEPRO_IMM16_X1_LO = 1985,
    BFD_RELOC_TILEPRO_IMM16_X0_HI = 1986,
    BFD_RELOC_TILEPRO_IMM16_X1_HI = 1987,
    BFD_RELOC_TILEPRO_IMM16_X0_HA = 1988,
    BFD_RELOC_TILEPRO_IMM16_X1_HA = 1989,
    BFD_RELOC_TILEPRO_IMM16_X0_PCREL = 1990,
    BFD_RELOC_TILEPRO_IMM16_X1_PCREL = 1991,
    BFD_RELOC_TILEPRO_IMM16_X0_LO_PCREL = 1992,
    BFD_RELOC_TILEPRO_IMM16_X1_LO_PCREL = 1993,
    BFD_RELOC_TILEPRO_IMM16_X0_HI_PCREL = 1994,
    BFD_RELOC_TILEPRO_IMM16_X1_HI_PCREL = 1995,
    BFD_RELOC_TILEPRO_IMM16_X0_HA_PCREL = 1996,
    BFD_RELOC_TILEPRO_IMM16_X1_HA_PCREL = 1997,
    BFD_RELOC_TILEPRO_IMM16_X0_GOT = 1998,
    BFD_RELOC_TILEPRO_IMM16_X1_GOT = 1999,
    BFD_RELOC_TILEPRO_IMM16_X0_GOT_LO = 2000,
    BFD_RELOC_TILEPRO_IMM16_X1_GOT_LO = 2001,
    BFD_RELOC_TILEPRO_IMM16_X0_GOT_HI = 2002,
    BFD_RELOC_TILEPRO_IMM16_X1_GOT_HI = 2003,
    BFD_RELOC_TILEPRO_IMM16_X0_GOT_HA = 2004,
    BFD_RELOC_TILEPRO_IMM16_X1_GOT_HA = 2005,
    BFD_RELOC_TILEPRO_MMSTART_X0 = 2006,
    BFD_RELOC_TILEPRO_MMEND_X0 = 2007,
    BFD_RELOC_TILEPRO_MMSTART_X1 = 2008,
    BFD_RELOC_TILEPRO_MMEND_X1 = 2009,
    BFD_RELOC_TILEPRO_SHAMT_X0 = 2010,
    BFD_RELOC_TILEPRO_SHAMT_X1 = 2011,
    BFD_RELOC_TILEPRO_SHAMT_Y0 = 2012,
    BFD_RELOC_TILEPRO_SHAMT_Y1 = 2013,
    BFD_RELOC_TILEPRO_TLS_GD_CALL = 2014,
    BFD_RELOC_TILEPRO_IMM8_X0_TLS_GD_ADD = 2015,
    BFD_RELOC_TILEPRO_IMM8_X1_TLS_GD_ADD = 2016,
    BFD_RELOC_TILEPRO_IMM8_Y0_TLS_GD_ADD = 2017,
    BFD_RELOC_TILEPRO_IMM8_Y1_TLS_GD_ADD = 2018,
    BFD_RELOC_TILEPRO_TLS_IE_LOAD = 2019,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD = 2020,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD = 2021,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_LO = 2022,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_LO = 2023,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_HI = 2024,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_HI = 2025,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_HA = 2026,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_HA = 2027,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE = 2028,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE = 2029,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_LO = 2030,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_LO = 2031,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_HI = 2032,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_HI = 2033,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_HA = 2034,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_HA = 2035,
    BFD_RELOC_TILEPRO_TLS_DTPMOD32 = 2036,
    BFD_RELOC_TILEPRO_TLS_DTPOFF32 = 2037,
    BFD_RELOC_TILEPRO_TLS_TPOFF32 = 2038,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE = 2039,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE = 2040,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_LO = 2041,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_LO = 2042,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_HI = 2043,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_HI = 2044,
    BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_HA = 2045,
    BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_HA = 2046,
    BFD_RELOC_TILEGX_HW0 = 2047,
    BFD_RELOC_TILEGX_HW1 = 2048,
    BFD_RELOC_TILEGX_HW2 = 2049,
    BFD_RELOC_TILEGX_HW3 = 2050,
    BFD_RELOC_TILEGX_HW0_LAST = 2051,
    BFD_RELOC_TILEGX_HW1_LAST = 2052,
    BFD_RELOC_TILEGX_HW2_LAST = 2053,
    BFD_RELOC_TILEGX_COPY = 2054,
    BFD_RELOC_TILEGX_GLOB_DAT = 2055,
    BFD_RELOC_TILEGX_JMP_SLOT = 2056,
    BFD_RELOC_TILEGX_RELATIVE = 2057,
    BFD_RELOC_TILEGX_BROFF_X1 = 2058,
    BFD_RELOC_TILEGX_JUMPOFF_X1 = 2059,
    BFD_RELOC_TILEGX_JUMPOFF_X1_PLT = 2060,
    BFD_RELOC_TILEGX_IMM8_X0 = 2061,
    BFD_RELOC_TILEGX_IMM8_Y0 = 2062,
    BFD_RELOC_TILEGX_IMM8_X1 = 2063,
    BFD_RELOC_TILEGX_IMM8_Y1 = 2064,
    BFD_RELOC_TILEGX_DEST_IMM8_X1 = 2065,
    BFD_RELOC_TILEGX_MT_IMM14_X1 = 2066,
    BFD_RELOC_TILEGX_MF_IMM14_X1 = 2067,
    BFD_RELOC_TILEGX_MMSTART_X0 = 2068,
    BFD_RELOC_TILEGX_MMEND_X0 = 2069,
    BFD_RELOC_TILEGX_SHAMT_X0 = 2070,
    BFD_RELOC_TILEGX_SHAMT_X1 = 2071,
    BFD_RELOC_TILEGX_SHAMT_Y0 = 2072,
    BFD_RELOC_TILEGX_SHAMT_Y1 = 2073,
    BFD_RELOC_TILEGX_IMM16_X0_HW0 = 2074,
    BFD_RELOC_TILEGX_IMM16_X1_HW0 = 2075,
    BFD_RELOC_TILEGX_IMM16_X0_HW1 = 2076,
    BFD_RELOC_TILEGX_IMM16_X1_HW1 = 2077,
    BFD_RELOC_TILEGX_IMM16_X0_HW2 = 2078,
    BFD_RELOC_TILEGX_IMM16_X1_HW2 = 2079,
    BFD_RELOC_TILEGX_IMM16_X0_HW3 = 2080,
    BFD_RELOC_TILEGX_IMM16_X1_HW3 = 2081,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST = 2082,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST = 2083,
    BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST = 2084,
    BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST = 2085,
    BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST = 2086,
    BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST = 2087,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_PCREL = 2088,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_PCREL = 2089,
    BFD_RELOC_TILEGX_IMM16_X0_HW1_PCREL = 2090,
    BFD_RELOC_TILEGX_IMM16_X1_HW1_PCREL = 2091,
    BFD_RELOC_TILEGX_IMM16_X0_HW2_PCREL = 2092,
    BFD_RELOC_TILEGX_IMM16_X1_HW2_PCREL = 2093,
    BFD_RELOC_TILEGX_IMM16_X0_HW3_PCREL = 2094,
    BFD_RELOC_TILEGX_IMM16_X1_HW3_PCREL = 2095,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_PCREL = 2096,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_PCREL = 2097,
    BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_PCREL = 2098,
    BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_PCREL = 2099,
    BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST_PCREL = 2100,
    BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST_PCREL = 2101,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_GOT = 2102,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_GOT = 2103,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_PLT_PCREL = 2104,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_PLT_PCREL = 2105,
    BFD_RELOC_TILEGX_IMM16_X0_HW1_PLT_PCREL = 2106,
    BFD_RELOC_TILEGX_IMM16_X1_HW1_PLT_PCREL = 2107,
    BFD_RELOC_TILEGX_IMM16_X0_HW2_PLT_PCREL = 2108,
    BFD_RELOC_TILEGX_IMM16_X1_HW2_PLT_PCREL = 2109,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_GOT = 2110,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_GOT = 2111,
    BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_GOT = 2112,
    BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_GOT = 2113,
    BFD_RELOC_TILEGX_IMM16_X0_HW3_PLT_PCREL = 2114,
    BFD_RELOC_TILEGX_IMM16_X1_HW3_PLT_PCREL = 2115,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_GD = 2116,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_GD = 2117,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_LE = 2118,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_LE = 2119,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_LE = 2120,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_LE = 2121,
    BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_LE = 2122,
    BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_LE = 2123,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_GD = 2124,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_GD = 2125,
    BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_GD = 2126,
    BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_GD = 2127,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_IE = 2128,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_IE = 2129,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL = 2130,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL = 2131,
    BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL = 2132,
    BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL = 2133,
    BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL = 2134,
    BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL = 2135,
    BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_IE = 2136,
    BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_IE = 2137,
    BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_IE = 2138,
    BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_IE = 2139,
    BFD_RELOC_TILEGX_TLS_DTPMOD64 = 2140,
    BFD_RELOC_TILEGX_TLS_DTPOFF64 = 2141,
    BFD_RELOC_TILEGX_TLS_TPOFF64 = 2142,
    BFD_RELOC_TILEGX_TLS_DTPMOD32 = 2143,
    BFD_RELOC_TILEGX_TLS_DTPOFF32 = 2144,
    BFD_RELOC_TILEGX_TLS_TPOFF32 = 2145,
    BFD_RELOC_TILEGX_TLS_GD_CALL = 2146,
    BFD_RELOC_TILEGX_IMM8_X0_TLS_GD_ADD = 2147,
    BFD_RELOC_TILEGX_IMM8_X1_TLS_GD_ADD = 2148,
    BFD_RELOC_TILEGX_IMM8_Y0_TLS_GD_ADD = 2149,
    BFD_RELOC_TILEGX_IMM8_Y1_TLS_GD_ADD = 2150,
    BFD_RELOC_TILEGX_TLS_IE_LOAD = 2151,
    BFD_RELOC_TILEGX_IMM8_X0_TLS_ADD = 2152,
    BFD_RELOC_TILEGX_IMM8_X1_TLS_ADD = 2153,
    BFD_RELOC_TILEGX_IMM8_Y0_TLS_ADD = 2154,
    BFD_RELOC_TILEGX_IMM8_Y1_TLS_ADD = 2155,
    BFD_RELOC_EPIPHANY_SIMM8 = 2156,
    BFD_RELOC_EPIPHANY_SIMM24 = 2157,
    BFD_RELOC_EPIPHANY_HIGH = 2158,
    BFD_RELOC_EPIPHANY_LOW = 2159,
    BFD_RELOC_EPIPHANY_SIMM11 = 2160,
    BFD_RELOC_EPIPHANY_IMM11 = 2161,
    BFD_RELOC_EPIPHANY_IMM8 = 2162,
    BFD_RELOC_VISIUM_HI16 = 2163,
    BFD_RELOC_VISIUM_LO16 = 2164,
    BFD_RELOC_VISIUM_IM16 = 2165,
    BFD_RELOC_VISIUM_REL16 = 2166,
    BFD_RELOC_VISIUM_HI16_PCREL = 2167,
    BFD_RELOC_VISIUM_LO16_PCREL = 2168,
    BFD_RELOC_VISIUM_IM16_PCREL = 2169,
    BFD_RELOC_UNUSED = 2170,
}
pub type bfd_reloc_code_real_type = Enum_bfd_reloc_code_real;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bfd_symbol {
    pub the_bfd: *mut Struct_bfd,
    pub name: *const ::std::os::raw::c_char,
    pub value: symvalue,
    pub flags: flagword,
    pub section: *mut Struct_bfd_section,
    pub udata: Union_Unnamed7,
}
impl ::std::clone::Clone for Struct_bfd_symbol {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bfd_symbol {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed7 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed7 {
    pub unsafe fn p(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut bfd_vma {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type asymbol = Struct_bfd_symbol;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_direction {
    no_direction = 0,
    read_direction = 1,
    write_direction = 2,
    both_direction = 3,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_plugin_format {
    bfd_plugin_uknown = 0,
    bfd_plugin_yes = 1,
    bfd_plugin_no = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bfd_build_id {
    pub size: bfd_size_type,
    pub data: [bfd_byte; 1usize],
}
impl ::std::clone::Clone for Struct_bfd_build_id {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bfd_build_id {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_bfd_iovec { }
pub enum Struct_bfd_link_hash_table { }
pub enum Struct_aout_data_struct { }
pub enum Struct_artdata { }
pub enum Struct__oasys_data { }
pub enum Struct__oasys_ar_data { }
pub enum Struct_coff_tdata { }
pub enum Struct_pe_tdata { }
pub enum Struct_xcoff_tdata { }
pub enum Struct_ecoff_tdata { }
pub enum Struct_ieee_data_struct { }
pub enum Struct_ieee_ar_data_struct { }
pub enum Struct_srec_data_struct { }
pub enum Struct_verilog_data_struct { }
pub enum Struct_ihex_data_struct { }
pub enum Struct_tekhex_data_struct { }
pub enum Struct_elf_obj_tdata { }
pub enum Struct_nlm_obj_tdata { }
pub enum Struct_bout_data_struct { }
pub enum Struct_mmo_data_struct { }
pub enum Struct_sun_core_struct { }
pub enum Struct_sco5_core_struct { }
pub enum Struct_trad_core_struct { }
pub enum Struct_som_data_struct { }
pub enum Struct_hpux_core_struct { }
pub enum Struct_hppabsd_core_struct { }
pub enum Struct_sgi_core_struct { }
pub enum Struct_lynx_core_struct { }
pub enum Struct_osf_core_struct { }
pub enum Struct_cisco_core_struct { }
pub enum Struct_versados_data_struct { }
pub enum Struct_netbsd_core_struct { }
pub enum Struct_mach_o_data_struct { }
pub enum Struct_mach_o_fat_data_struct { }
pub enum Struct_plugin_data_struct { }
pub enum Struct_bfd_pef_data_struct { }
pub enum Struct_bfd_pef_xlib_data_struct { }
pub enum Struct_bfd_sym_data_struct { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bfd {
    pub filename: *const ::std::os::raw::c_char,
    pub xvec: *const Struct_bfd_target,
    pub iostream: *mut ::std::os::raw::c_void,
    pub iovec: *const Struct_bfd_iovec,
    pub lru_prev: *mut Struct_bfd,
    pub lru_next: *mut Struct_bfd,
    pub _where: ufile_ptr,
    pub mtime: ::std::os::raw::c_long,
    pub id: ::std::os::raw::c_uint,
    // pub _bindgen_bitfield_1_: Enum_bfd_format,
    // pub _bindgen_bitfield_2_: Enum_bfd_direction,
    // pub _bindgen_bitfield_3_: flagword,
    // pub _bindgen_bitfield_4_: ::std::os::raw::c_uint,
    // pub _bindgen_bitfield_5_: Enum_bfd_plugin_format,
    // pub _bindgen_bitfield_6_: ::std::os::raw::c_uint,
    pub __bitfield_flags_1_: ::std::os::raw::c_uint,
    pub __bitfield_flags_2_: ::std::os::raw::c_uint,
    pub plugin_dummy_bfd: *mut bfd,
    pub origin: ufile_ptr,
    pub proxy_origin: ufile_ptr,
    pub section_htab: Struct_bfd_hash_table,
    pub sections: *mut Struct_bfd_section,
    pub section_last: *mut Struct_bfd_section,
    pub section_count: ::std::os::raw::c_uint,
    pub archive_pass: ::std::os::raw::c_int,
    pub start_address: bfd_vma,
    pub outsymbols: *mut *mut Struct_bfd_symbol,
    pub symcount: ::std::os::raw::c_uint,
    pub dynsymcount: ::std::os::raw::c_uint,
    pub arch_info: *const Struct_bfd_arch_info,
    pub arelt_data: *mut ::std::os::raw::c_void,
    pub my_archive: *mut Struct_bfd,
    pub archive_next: *mut Struct_bfd,
    pub archive_head: *mut Struct_bfd,
    pub nested_archives: *mut Struct_bfd,
    pub link: Union_Unnamed8,
    pub tdata: Union_Unnamed9,
    pub usrdata: *mut ::std::os::raw::c_void,
    pub memory: *mut ::std::os::raw::c_void,
    pub build_id: *const Struct_bfd_build_id,
}
impl ::std::clone::Clone for Struct_bfd {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bfd {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed8 {
    pub unsafe fn next(&mut self) -> *mut *mut Struct_bfd {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn hash(&mut self) -> *mut *mut Struct_bfd_link_hash_table {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed9 {
    pub unsafe fn aout_data(&mut self) -> *mut *mut Struct_aout_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn aout_ar_data(&mut self) -> *mut *mut Struct_artdata {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn oasys_obj_data(&mut self) -> *mut *mut Struct__oasys_data {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn oasys_ar_data(&mut self)
     -> *mut *mut Struct__oasys_ar_data {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn coff_obj_data(&mut self) -> *mut *mut Struct_coff_tdata {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pe_obj_data(&mut self) -> *mut *mut Struct_pe_tdata {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn xcoff_obj_data(&mut self) -> *mut *mut Struct_xcoff_tdata {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ecoff_obj_data(&mut self) -> *mut *mut Struct_ecoff_tdata {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ieee_data(&mut self) -> *mut *mut Struct_ieee_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ieee_ar_data(&mut self)
     -> *mut *mut Struct_ieee_ar_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn srec_data(&mut self) -> *mut *mut Struct_srec_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn verilog_data(&mut self)
     -> *mut *mut Struct_verilog_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ihex_data(&mut self) -> *mut *mut Struct_ihex_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn tekhex_data(&mut self)
     -> *mut *mut Struct_tekhex_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn elf_obj_data(&mut self) -> *mut *mut Struct_elf_obj_tdata {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn nlm_obj_data(&mut self) -> *mut *mut Struct_nlm_obj_tdata {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn bout_data(&mut self) -> *mut *mut Struct_bout_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mmo_data(&mut self) -> *mut *mut Struct_mmo_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sun_core_data(&mut self)
     -> *mut *mut Struct_sun_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sco5_core_data(&mut self)
     -> *mut *mut Struct_sco5_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn trad_core_data(&mut self)
     -> *mut *mut Struct_trad_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn som_data(&mut self) -> *mut *mut Struct_som_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn hpux_core_data(&mut self)
     -> *mut *mut Struct_hpux_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn hppabsd_core_data(&mut self)
     -> *mut *mut Struct_hppabsd_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sgi_core_data(&mut self)
     -> *mut *mut Struct_sgi_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn lynx_core_data(&mut self)
     -> *mut *mut Struct_lynx_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn osf_core_data(&mut self)
     -> *mut *mut Struct_osf_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cisco_core_data(&mut self)
     -> *mut *mut Struct_cisco_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn versados_data(&mut self)
     -> *mut *mut Struct_versados_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn netbsd_core_data(&mut self)
     -> *mut *mut Struct_netbsd_core_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mach_o_data(&mut self)
     -> *mut *mut Struct_mach_o_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mach_o_fat_data(&mut self)
     -> *mut *mut Struct_mach_o_fat_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn plugin_data(&mut self)
     -> *mut *mut Struct_plugin_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pef_data(&mut self)
     -> *mut *mut Struct_bfd_pef_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pef_xlib_data(&mut self)
     -> *mut *mut Struct_bfd_pef_xlib_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sym_data(&mut self)
     -> *mut *mut Struct_bfd_sym_data_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn any(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_error {
    bfd_error_no_error = 0,
    bfd_error_system_call = 1,
    bfd_error_invalid_target = 2,
    bfd_error_wrong_format = 3,
    bfd_error_wrong_object_format = 4,
    bfd_error_invalid_operation = 5,
    bfd_error_no_memory = 6,
    bfd_error_no_symbols = 7,
    bfd_error_no_armap = 8,
    bfd_error_no_more_archived_files = 9,
    bfd_error_malformed_archive = 10,
    bfd_error_missing_dso = 11,
    bfd_error_file_not_recognized = 12,
    bfd_error_file_ambiguously_recognized = 13,
    bfd_error_no_contents = 14,
    bfd_error_nonrepresentable_section = 15,
    bfd_error_no_debug_section = 16,
    bfd_error_bad_value = 17,
    bfd_error_file_truncated = 18,
    bfd_error_file_too_big = 19,
    bfd_error_on_input = 20,
    bfd_error_invalid_error_code = 21,
}
pub type bfd_error_type = Enum_bfd_error;
pub type bfd_error_handler_type =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_char, ...)>;
pub type bfd_assert_handler_type =
    ::std::option::Option<unsafe extern "C" fn(bfd_formatmsg:
                                                   *const ::std::os::raw::c_char,
                                               bfd_version:
                                                   *const ::std::os::raw::c_char,
                                               bfd_file:
                                                   *const ::std::os::raw::c_char,
                                               bfd_line:
                                                   ::std::os::raw::c_int)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_flavour {
    bfd_target_unknown_flavour = 0,
    bfd_target_aout_flavour = 1,
    bfd_target_coff_flavour = 2,
    bfd_target_ecoff_flavour = 3,
    bfd_target_xcoff_flavour = 4,
    bfd_target_elf_flavour = 5,
    bfd_target_ieee_flavour = 6,
    bfd_target_nlm_flavour = 7,
    bfd_target_oasys_flavour = 8,
    bfd_target_tekhex_flavour = 9,
    bfd_target_srec_flavour = 10,
    bfd_target_verilog_flavour = 11,
    bfd_target_ihex_flavour = 12,
    bfd_target_som_flavour = 13,
    bfd_target_os9k_flavour = 14,
    bfd_target_versados_flavour = 15,
    bfd_target_msdos_flavour = 16,
    bfd_target_ovax_flavour = 17,
    bfd_target_evax_flavour = 18,
    bfd_target_mmo_flavour = 19,
    bfd_target_mach_o_flavour = 20,
    bfd_target_pef_flavour = 21,
    bfd_target_pef_xlib_flavour = 22,
    bfd_target_sym_flavour = 23,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bfd_endian {
    BFD_ENDIAN_BIG = 0,
    BFD_ENDIAN_LITTLE = 1,
    BFD_ENDIAN_UNKNOWN = 2,
}
pub type _bfd_link_info = Struct_bfd_link_info;
pub enum Struct_flag_info { }
pub type flag_info = Struct_flag_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bfd_target {
    pub name: *mut ::std::os::raw::c_char,
    pub flavour: Enum_bfd_flavour,
    pub byteorder: Enum_bfd_endian,
    pub header_byteorder: Enum_bfd_endian,
    pub object_flags: flagword,
    pub section_flags: flagword,
    pub symbol_leading_char: ::std::os::raw::c_char,
    pub ar_pad_char: ::std::os::raw::c_char,
    pub ar_max_namelen: ::std::os::raw::c_uchar,
    pub match_priority: ::std::os::raw::c_uchar,
    pub bfd_getx64: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *const ::std::os::raw::c_void)
                                              -> bfd_uint64_t>,
    pub bfd_getx_signed_64: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *const ::std::os::raw::c_void)
                                                      -> bfd_int64_t>,
    pub bfd_putx64: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   bfd_uint64_t,
                                                               arg2:
                                                                   *mut ::std::os::raw::c_void)>,
    pub bfd_getx32: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *const ::std::os::raw::c_void)
                                              -> bfd_vma>,
    pub bfd_getx_signed_32: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *const ::std::os::raw::c_void)
                                                      -> bfd_signed_vma>,
    pub bfd_putx32: ::std::option::Option<unsafe extern "C" fn(arg1: bfd_vma,
                                                               arg2:
                                                                   *mut ::std::os::raw::c_void)>,
    pub bfd_getx16: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *const ::std::os::raw::c_void)
                                              -> bfd_vma>,
    pub bfd_getx_signed_16: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *const ::std::os::raw::c_void)
                                                      -> bfd_signed_vma>,
    pub bfd_putx16: ::std::option::Option<unsafe extern "C" fn(arg1: bfd_vma,
                                                               arg2:
                                                                   *mut ::std::os::raw::c_void)>,
    pub bfd_h_getx64: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *const ::std::os::raw::c_void)
                                                -> bfd_uint64_t>,
    pub bfd_h_getx_signed_64: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *const ::std::os::raw::c_void)
                                                        -> bfd_int64_t>,
    pub bfd_h_putx64: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     bfd_uint64_t,
                                                                 arg2:
                                                                     *mut ::std::os::raw::c_void)>,
    pub bfd_h_getx32: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *const ::std::os::raw::c_void)
                                                -> bfd_vma>,
    pub bfd_h_getx_signed_32: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *const ::std::os::raw::c_void)
                                                        -> bfd_signed_vma>,
    pub bfd_h_putx32: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     bfd_vma,
                                                                 arg2:
                                                                     *mut ::std::os::raw::c_void)>,
    pub bfd_h_getx16: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *const ::std::os::raw::c_void)
                                                -> bfd_vma>,
    pub bfd_h_getx_signed_16: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *const ::std::os::raw::c_void)
                                                        -> bfd_signed_vma>,
    pub bfd_h_putx16: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     bfd_vma,
                                                                 arg2:
                                                                     *mut ::std::os::raw::c_void)>,
    pub _bfd_check_format: [::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut bfd)
                                                      ->
                                                          *const Struct_bfd_target>; 4usize],
    pub _bfd_set_format: [::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut bfd)
                                                    -> bfd_boolean>; 4usize],
    pub _bfd_write_contents: [::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut bfd)
                                                        ->
                                                            bfd_boolean>; 4usize],
    pub _close_and_cleanup: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut bfd)
                                                      -> bfd_boolean>,
    pub _bfd_free_cached_info: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut bfd)
                                                         -> bfd_boolean>,
    pub _new_section_hook: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut bfd,
                                                                      arg2:
                                                                          sec_ptr)
                                                     -> bfd_boolean>,
    pub _bfd_get_section_contents: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut bfd,
                                                                              arg2:
                                                                                  sec_ptr,
                                                                              arg3:
                                                                                  *mut ::std::os::raw::c_void,
                                                                              arg4:
                                                                                  file_ptr,
                                                                              arg5:
                                                                                  bfd_size_type)
                                                             -> bfd_boolean>,
    pub _bfd_get_section_contents_in_window: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut bfd,
                                                                                        arg2:
                                                                                            sec_ptr,
                                                                                        arg3:
                                                                                            *mut bfd_window,
                                                                                        arg4:
                                                                                            file_ptr,
                                                                                        arg5:
                                                                                            bfd_size_type)
                                                                       ->
                                                                           bfd_boolean>,
    pub _bfd_copy_private_bfd_data: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut bfd,
                                                                               arg2:
                                                                                   *mut bfd)
                                                              -> bfd_boolean>,
    pub _bfd_merge_private_bfd_data: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut bfd,
                                                                                arg2:
                                                                                    *mut bfd)
                                                               ->
                                                                   bfd_boolean>,
    pub _bfd_init_private_section_data: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut bfd,
                                                                                   arg2:
                                                                                       sec_ptr,
                                                                                   arg3:
                                                                                       *mut bfd,
                                                                                   arg4:
                                                                                       sec_ptr,
                                                                                   arg5:
                                                                                       *mut Struct_bfd_link_info)
                                                                  ->
                                                                      bfd_boolean>,
    pub _bfd_copy_private_section_data: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut bfd,
                                                                                   arg2:
                                                                                       sec_ptr,
                                                                                   arg3:
                                                                                       *mut bfd,
                                                                                   arg4:
                                                                                       sec_ptr)
                                                                  ->
                                                                      bfd_boolean>,
    pub _bfd_copy_private_symbol_data: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut bfd,
                                                                                  arg2:
                                                                                      *mut asymbol,
                                                                                  arg3:
                                                                                      *mut bfd,
                                                                                  arg4:
                                                                                      *mut asymbol)
                                                                 ->
                                                                     bfd_boolean>,
    pub _bfd_copy_private_header_data: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut bfd,
                                                                                  arg2:
                                                                                      *mut bfd)
                                                                 ->
                                                                     bfd_boolean>,
    pub _bfd_set_private_flags: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut bfd,
                                                                           arg2:
                                                                               flagword)
                                                          -> bfd_boolean>,
    pub _bfd_print_private_bfd_data: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut bfd,
                                                                                arg2:
                                                                                    *mut ::std::os::raw::c_void)
                                                               ->
                                                                   bfd_boolean>,
    pub _core_file_failing_command: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut bfd)
                                                              ->
                                                                  *mut ::std::os::raw::c_char>,
    pub _core_file_failing_signal: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut bfd)
                                                             ->
                                                                 ::std::os::raw::c_int>,
    pub _core_file_matches_executable_p: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut bfd,
                                                                                    arg2:
                                                                                        *mut bfd)
                                                                   ->
                                                                       bfd_boolean>,
    pub _core_file_pid: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut bfd)
                                                  -> ::std::os::raw::c_int>,
    pub _bfd_slurp_armap: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut bfd)
                                                    -> bfd_boolean>,
    pub _bfd_slurp_extended_name_table: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut bfd)
                                                                  ->
                                                                      bfd_boolean>,
    pub _bfd_construct_extended_name_table: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           *mut bfd,
                                                                                       arg2:
                                                                                           *mut *mut ::std::os::raw::c_char,
                                                                                       arg3:
                                                                                           *mut bfd_size_type,
                                                                                       arg4:
                                                                                           *mut *const ::std::os::raw::c_char)
                                                                      ->
                                                                          bfd_boolean>,
    pub _bfd_truncate_arname: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut bfd,
                                                                         arg2:
                                                                             *const ::std::os::raw::c_char,
                                                                         arg3:
                                                                             *mut ::std::os::raw::c_char)>,
    pub write_armap: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut bfd,
                                                                arg2:
                                                                    ::std::os::raw::c_uint,
                                                                arg3:
                                                                    *mut Struct_orl,
                                                                arg4:
                                                                    ::std::os::raw::c_uint,
                                                                arg5:
                                                                    ::std::os::raw::c_int)
                                               -> bfd_boolean>,
    pub _bfd_read_ar_hdr_fn: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut bfd)
                                                       ->
                                                           *mut ::std::os::raw::c_void>,
    pub _bfd_write_ar_hdr_fn: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut bfd,
                                                                         arg2:
                                                                             *mut bfd)
                                                        -> bfd_boolean>,
    pub openr_next_archived_file: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut bfd,
                                                                             arg2:
                                                                                 *mut bfd)
                                                            -> *mut bfd>,
    pub _bfd_get_elt_at_index: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut bfd,
                                                                          arg2:
                                                                              symindex)
                                                         -> *mut bfd>,
    pub _bfd_stat_arch_elt: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut bfd,
                                                                       arg2:
                                                                           *mut Struct_stat)
                                                      ->
                                                          ::std::os::raw::c_int>,
    pub _bfd_update_armap_timestamp: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut bfd)
                                                               ->
                                                                   bfd_boolean>,
    pub _bfd_get_symtab_upper_bound: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut bfd)
                                                               ->
                                                                   ::std::os::raw::c_long>,
    pub _bfd_canonicalize_symtab: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut bfd,
                                                                             arg2:
                                                                                 *mut *mut Struct_bfd_symbol)
                                                            ->
                                                                ::std::os::raw::c_long>,
    pub _bfd_make_empty_symbol: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut bfd)
                                                          ->
                                                              *mut Struct_bfd_symbol>,
    pub _bfd_print_symbol: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut bfd,
                                                                      arg2:
                                                                          *mut ::std::os::raw::c_void,
                                                                      arg3:
                                                                          *mut Struct_bfd_symbol,
                                                                      arg4:
                                                                          bfd_print_symbol_type)>,
    pub _bfd_get_symbol_info: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut bfd,
                                                                         arg2:
                                                                             *mut Struct_bfd_symbol,
                                                                         arg3:
                                                                             *mut symbol_info)>,
    pub _bfd_get_symbol_version_string: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut bfd,
                                                                                   arg2:
                                                                                       *mut Struct_bfd_symbol,
                                                                                   arg3:
                                                                                       *mut bfd_boolean)
                                                                  ->
                                                                      *const ::std::os::raw::c_char>,
    pub _bfd_is_local_label_name: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut bfd,
                                                                             arg2:
                                                                                 *const ::std::os::raw::c_char)
                                                            -> bfd_boolean>,
    pub _bfd_is_target_special_symbol: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut bfd,
                                                                                  arg2:
                                                                                      *mut asymbol)
                                                                 ->
                                                                     bfd_boolean>,
    pub _get_lineno: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut bfd,
                                                                arg2:
                                                                    *mut Struct_bfd_symbol)
                                               -> *mut alent>,
    pub _bfd_find_nearest_line: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut bfd,
                                                                           arg2:
                                                                               *mut *mut Struct_bfd_symbol,
                                                                           arg3:
                                                                               *mut Struct_bfd_section,
                                                                           arg4:
                                                                               bfd_vma,
                                                                           arg5:
                                                                               *mut *const ::std::os::raw::c_char,
                                                                           arg6:
                                                                               *mut *const ::std::os::raw::c_char,
                                                                           arg7:
                                                                               *mut ::std::os::raw::c_uint,
                                                                           arg8:
                                                                               *mut ::std::os::raw::c_uint)
                                                          -> bfd_boolean>,
    pub _bfd_find_line: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut bfd,
                                                                   arg2:
                                                                       *mut *mut Struct_bfd_symbol,
                                                                   arg3:
                                                                       *mut Struct_bfd_symbol,
                                                                   arg4:
                                                                       *mut *const ::std::os::raw::c_char,
                                                                   arg5:
                                                                       *mut ::std::os::raw::c_uint)
                                                  -> bfd_boolean>,
    pub _bfd_find_inliner_info: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut bfd,
                                                                           arg2:
                                                                               *mut *const ::std::os::raw::c_char,
                                                                           arg3:
                                                                               *mut *const ::std::os::raw::c_char,
                                                                           arg4:
                                                                               *mut ::std::os::raw::c_uint)
                                                          -> bfd_boolean>,
    pub _bfd_make_debug_symbol: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut bfd,
                                                                           arg2:
                                                                               *mut ::std::os::raw::c_void,
                                                                           size:
                                                                               ::std::os::raw::c_ulong)
                                                          -> *mut asymbol>,
    pub _read_minisymbols: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut bfd,
                                                                      arg2:
                                                                          bfd_boolean,
                                                                      arg3:
                                                                          *mut *mut ::std::os::raw::c_void,
                                                                      arg4:
                                                                          *mut ::std::os::raw::c_uint)
                                                     ->
                                                         ::std::os::raw::c_long>,
    pub _minisymbol_to_symbol: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut bfd,
                                                                          arg2:
                                                                              bfd_boolean,
                                                                          arg3:
                                                                              *const ::std::os::raw::c_void,
                                                                          arg4:
                                                                              *mut asymbol)
                                                         -> *mut asymbol>,
    pub _get_reloc_upper_bound: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut bfd,
                                                                           arg2:
                                                                               sec_ptr)
                                                          ->
                                                              ::std::os::raw::c_long>,
    pub _bfd_canonicalize_reloc: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut bfd,
                                                                            arg2:
                                                                                sec_ptr,
                                                                            arg3:
                                                                                *mut *mut arelent,
                                                                            arg4:
                                                                                *mut *mut Struct_bfd_symbol)
                                                           ->
                                                               ::std::os::raw::c_long>,
    pub reloc_type_lookup: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut bfd,
                                                                      arg2:
                                                                          bfd_reloc_code_real_type)
                                                     ->
                                                         *mut reloc_howto_type>,
    pub reloc_name_lookup: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut bfd,
                                                                      arg2:
                                                                          *const ::std::os::raw::c_char)
                                                     ->
                                                         *mut reloc_howto_type>,
    pub _bfd_set_arch_mach: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut bfd,
                                                                       arg2:
                                                                           Enum_bfd_architecture,
                                                                       arg3:
                                                                           ::std::os::raw::c_ulong)
                                                      -> bfd_boolean>,
    pub _bfd_set_section_contents: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut bfd,
                                                                              arg2:
                                                                                  sec_ptr,
                                                                              arg3:
                                                                                  *const ::std::os::raw::c_void,
                                                                              arg4:
                                                                                  file_ptr,
                                                                              arg5:
                                                                                  bfd_size_type)
                                                             -> bfd_boolean>,
    pub _bfd_sizeof_headers: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut bfd,
                                                                        arg2:
                                                                            *mut Struct_bfd_link_info)
                                                       ->
                                                           ::std::os::raw::c_int>,
    pub _bfd_get_relocated_section_contents: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut bfd,
                                                                                        arg2:
                                                                                            *mut Struct_bfd_link_info,
                                                                                        arg3:
                                                                                            *mut Struct_bfd_link_order,
                                                                                        arg4:
                                                                                            *mut bfd_byte,
                                                                                        arg5:
                                                                                            bfd_boolean,
                                                                                        arg6:
                                                                                            *mut *mut Struct_bfd_symbol)
                                                                       ->
                                                                           *mut bfd_byte>,
    pub _bfd_relax_section: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut bfd,
                                                                       arg2:
                                                                           *mut Struct_bfd_section,
                                                                       arg3:
                                                                           *mut Struct_bfd_link_info,
                                                                       arg4:
                                                                           *mut bfd_boolean)
                                                      -> bfd_boolean>,
    pub _bfd_link_hash_table_create: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut bfd)
                                                               ->
                                                                   *mut Struct_bfd_link_hash_table>,
    pub _bfd_link_add_symbols: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut bfd,
                                                                          arg2:
                                                                              *mut Struct_bfd_link_info)
                                                         -> bfd_boolean>,
    pub _bfd_link_just_syms: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut asection,
                                                                        arg2:
                                                                            *mut Struct_bfd_link_info)>,
    pub _bfd_copy_link_hash_symbol_type: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut bfd,
                                                                                    arg2:
                                                                                        *mut Struct_bfd_link_hash_entry,
                                                                                    arg3:
                                                                                        *mut Struct_bfd_link_hash_entry)>,
    pub _bfd_final_link: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut bfd,
                                                                    arg2:
                                                                        *mut Struct_bfd_link_info)
                                                   -> bfd_boolean>,
    pub _bfd_link_split_section: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut bfd,
                                                                            arg2:
                                                                                *mut Struct_bfd_section)
                                                           -> bfd_boolean>,
    pub _bfd_gc_sections: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut bfd,
                                                                     arg2:
                                                                         *mut Struct_bfd_link_info)
                                                    -> bfd_boolean>,
    pub _bfd_lookup_section_flags: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut Struct_bfd_link_info,
                                                                              arg2:
                                                                                  *mut Struct_flag_info,
                                                                              arg3:
                                                                                  *mut asection)
                                                             -> bfd_boolean>,
    pub _bfd_merge_sections: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut bfd,
                                                                        arg2:
                                                                            *mut Struct_bfd_link_info)
                                                       -> bfd_boolean>,
    pub _bfd_is_group_section: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut bfd,
                                                                          arg2:
                                                                              *const Struct_bfd_section)
                                                         -> bfd_boolean>,
    pub _bfd_discard_group: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut bfd,
                                                                       arg2:
                                                                           *mut Struct_bfd_section)
                                                      -> bfd_boolean>,
    pub _section_already_linked: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut bfd,
                                                                            arg2:
                                                                                *mut asection,
                                                                            arg3:
                                                                                *mut Struct_bfd_link_info)
                                                           -> bfd_boolean>,
    pub _bfd_define_common_symbol: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut bfd,
                                                                              arg2:
                                                                                  *mut Struct_bfd_link_info,
                                                                              arg3:
                                                                                  *mut Struct_bfd_link_hash_entry)
                                                             -> bfd_boolean>,
    pub _bfd_get_dynamic_symtab_upper_bound: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut bfd)
                                                                       ->
                                                                           ::std::os::raw::c_long>,
    pub _bfd_canonicalize_dynamic_symtab: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         *mut bfd,
                                                                                     arg2:
                                                                                         *mut *mut Struct_bfd_symbol)
                                                                    ->
                                                                        ::std::os::raw::c_long>,
    pub _bfd_get_synthetic_symtab: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut bfd,
                                                                              arg2:
                                                                                  ::std::os::raw::c_long,
                                                                              arg3:
                                                                                  *mut *mut Struct_bfd_symbol,
                                                                              arg4:
                                                                                  ::std::os::raw::c_long,
                                                                              arg5:
                                                                                  *mut *mut Struct_bfd_symbol,
                                                                              arg6:
                                                                                  *mut *mut Struct_bfd_symbol)
                                                             ->
                                                                 ::std::os::raw::c_long>,
    pub _bfd_get_dynamic_reloc_upper_bound: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           *mut bfd)
                                                                      ->
                                                                          ::std::os::raw::c_long>,
    pub _bfd_canonicalize_dynamic_reloc: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut bfd,
                                                                                    arg2:
                                                                                        *mut *mut arelent,
                                                                                    arg3:
                                                                                        *mut *mut Struct_bfd_symbol)
                                                                   ->
                                                                       ::std::os::raw::c_long>,
    pub alternative_target: *const Struct_bfd_target,
    pub backend_data: *const ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_bfd_target {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bfd_target {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bfd_target = Struct_bfd_target;
#[link(name = "bfd")]
extern "C" {
    pub static mut bfd_use_reserved_id: ::std::os::raw::c_uint;
    pub static mut _bfd_std_section: [asection; 4usize];
}
#[link(name = "bfd")]
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char,
                __buf: *mut Struct_stat) -> ::std::os::raw::c_int;
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut Struct_stat)
     -> ::std::os::raw::c_int;
    pub fn fstatat(__fd: ::std::os::raw::c_int,
                   __file: *const ::std::os::raw::c_char,
                   __buf: *mut Struct_stat, __flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lstat(__file: *const ::std::os::raw::c_char,
                 __buf: *mut Struct_stat) -> ::std::os::raw::c_int;
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t)
     -> ::std::os::raw::c_int;
    pub fn fchmodat(__fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char, __mode: __mode_t,
                    __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn umask(__mask: __mode_t) -> __mode_t;
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
    pub fn mkdirat(__fd: ::std::os::raw::c_int,
                   __path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
    pub fn mknod(__path: *const ::std::os::raw::c_char, __mode: __mode_t,
                 __dev: __dev_t) -> ::std::os::raw::c_int;
    pub fn mknodat(__fd: ::std::os::raw::c_int,
                   __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                   __dev: __dev_t) -> ::std::os::raw::c_int;
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
    pub fn mkfifoat(__fd: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
    pub fn utimensat(__fd: ::std::os::raw::c_int,
                     __path: *const ::std::os::raw::c_char,
                     __times: *mut Struct_timespec,
                     __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn futimens(__fd: ::std::os::raw::c_int,
                    __times: *mut Struct_timespec) -> ::std::os::raw::c_int;
    pub fn __fxstat(__ver: ::std::os::raw::c_int,
                    __fildes: ::std::os::raw::c_int,
                    __stat_buf: *mut Struct_stat) -> ::std::os::raw::c_int;
    pub fn __xstat(__ver: ::std::os::raw::c_int,
                   __filename: *const ::std::os::raw::c_char,
                   __stat_buf: *mut Struct_stat) -> ::std::os::raw::c_int;
    pub fn __lxstat(__ver: ::std::os::raw::c_int,
                    __filename: *const ::std::os::raw::c_char,
                    __stat_buf: *mut Struct_stat) -> ::std::os::raw::c_int;
    pub fn __fxstatat(__ver: ::std::os::raw::c_int,
                      __fildes: ::std::os::raw::c_int,
                      __filename: *const ::std::os::raw::c_char,
                      __stat_buf: *mut Struct_stat,
                      __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn __xmknod(__ver: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                    __dev: *mut __dev_t) -> ::std::os::raw::c_int;
    pub fn __xmknodat(__ver: ::std::os::raw::c_int,
                      __fd: ::std::os::raw::c_int,
                      __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                      __dev: *mut __dev_t) -> ::std::os::raw::c_int;
    pub fn bfd_sprintf_vma(arg1: *mut bfd, arg2: *mut ::std::os::raw::c_char,
                           arg3: bfd_vma);
    pub fn bfd_fprintf_vma(arg1: *mut bfd, arg2: *mut ::std::os::raw::c_void,
                           arg3: bfd_vma);
    pub fn bfd_get_stab_name(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn bfd_hash_table_init(arg1: *mut Struct_bfd_hash_table,
                               arg2:
                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut Struct_bfd_hash_entry,
                                                                              arg2:
                                                                                  *mut Struct_bfd_hash_table,
                                                                              arg3:
                                                                                  *const ::std::os::raw::c_char)
                                                             ->
                                                                 *mut Struct_bfd_hash_entry>,
                               arg3: ::std::os::raw::c_uint) -> bfd_boolean;
    pub fn bfd_hash_table_init_n(arg1: *mut Struct_bfd_hash_table,
                                 arg2:
                                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut Struct_bfd_hash_entry,
                                                                                arg2:
                                                                                    *mut Struct_bfd_hash_table,
                                                                                arg3:
                                                                                    *const ::std::os::raw::c_char)
                                                               ->
                                                                   *mut Struct_bfd_hash_entry>,
                                 arg3: ::std::os::raw::c_uint,
                                 arg4: ::std::os::raw::c_uint) -> bfd_boolean;
    pub fn bfd_hash_table_free(arg1: *mut Struct_bfd_hash_table);
    pub fn bfd_hash_lookup(arg1: *mut Struct_bfd_hash_table,
                           arg2: *const ::std::os::raw::c_char,
                           create: bfd_boolean, copy: bfd_boolean)
     -> *mut Struct_bfd_hash_entry;
    pub fn bfd_hash_insert(arg1: *mut Struct_bfd_hash_table,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: ::std::os::raw::c_ulong)
     -> *mut Struct_bfd_hash_entry;
    pub fn bfd_hash_rename(arg1: *mut Struct_bfd_hash_table,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: *mut Struct_bfd_hash_entry);
    pub fn bfd_hash_replace(arg1: *mut Struct_bfd_hash_table,
                            old: *mut Struct_bfd_hash_entry,
                            nw: *mut Struct_bfd_hash_entry);
    pub fn bfd_hash_newfunc(arg1: *mut Struct_bfd_hash_entry,
                            arg2: *mut Struct_bfd_hash_table,
                            arg3: *const ::std::os::raw::c_char)
     -> *mut Struct_bfd_hash_entry;
    pub fn bfd_hash_allocate(arg1: *mut Struct_bfd_hash_table,
                             arg2: ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_void;
    pub fn bfd_hash_traverse(arg1: *mut Struct_bfd_hash_table,
                             arg2:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut Struct_bfd_hash_entry,
                                                                            arg2:
                                                                                *mut ::std::os::raw::c_void)
                                                           -> bfd_boolean>,
                             info: *mut ::std::os::raw::c_void);
    pub fn bfd_hash_set_default_size(arg1: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
    pub fn bfd_bread(arg1: *mut ::std::os::raw::c_void, arg2: bfd_size_type,
                     arg3: *mut bfd) -> bfd_size_type;
    pub fn bfd_bwrite(arg1: *const ::std::os::raw::c_void,
                      arg2: bfd_size_type, arg3: *mut bfd) -> bfd_size_type;
    pub fn bfd_seek(arg1: *mut bfd, arg2: file_ptr,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn bfd_tell(arg1: *mut bfd) -> file_ptr;
    pub fn bfd_flush(arg1: *mut bfd) -> ::std::os::raw::c_int;
    pub fn bfd_stat(arg1: *mut bfd, arg2: *mut Struct_stat)
     -> ::std::os::raw::c_int;
    pub fn warn_deprecated(arg1: *const ::std::os::raw::c_char,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: ::std::os::raw::c_int,
                           arg4: *const ::std::os::raw::c_char);
    pub fn bfd_cache_close(abfd: *mut bfd) -> bfd_boolean;
    pub fn bfd_cache_close_all() -> bfd_boolean;
    pub fn bfd_record_phdr(arg1: *mut bfd, arg2: ::std::os::raw::c_ulong,
                           arg3: bfd_boolean, arg4: flagword,
                           arg5: bfd_boolean, arg6: bfd_vma,
                           arg7: bfd_boolean, arg8: bfd_boolean,
                           arg9: ::std::os::raw::c_uint,
                           arg10: *mut *mut Struct_bfd_section)
     -> bfd_boolean;
    pub fn bfd_getb64(arg1: *const ::std::os::raw::c_void) -> bfd_uint64_t;
    pub fn bfd_getl64(arg1: *const ::std::os::raw::c_void) -> bfd_uint64_t;
    pub fn bfd_getb_signed_64(arg1: *const ::std::os::raw::c_void)
     -> bfd_int64_t;
    pub fn bfd_getl_signed_64(arg1: *const ::std::os::raw::c_void)
     -> bfd_int64_t;
    pub fn bfd_getb32(arg1: *const ::std::os::raw::c_void) -> bfd_vma;
    pub fn bfd_getl32(arg1: *const ::std::os::raw::c_void) -> bfd_vma;
    pub fn bfd_getb_signed_32(arg1: *const ::std::os::raw::c_void)
     -> bfd_signed_vma;
    pub fn bfd_getl_signed_32(arg1: *const ::std::os::raw::c_void)
     -> bfd_signed_vma;
    pub fn bfd_getb16(arg1: *const ::std::os::raw::c_void) -> bfd_vma;
    pub fn bfd_getl16(arg1: *const ::std::os::raw::c_void) -> bfd_vma;
    pub fn bfd_getb_signed_16(arg1: *const ::std::os::raw::c_void)
     -> bfd_signed_vma;
    pub fn bfd_getl_signed_16(arg1: *const ::std::os::raw::c_void)
     -> bfd_signed_vma;
    pub fn bfd_putb64(arg1: bfd_uint64_t, arg2: *mut ::std::os::raw::c_void);
    pub fn bfd_putl64(arg1: bfd_uint64_t, arg2: *mut ::std::os::raw::c_void);
    pub fn bfd_putb32(arg1: bfd_vma, arg2: *mut ::std::os::raw::c_void);
    pub fn bfd_putl32(arg1: bfd_vma, arg2: *mut ::std::os::raw::c_void);
    pub fn bfd_putb16(arg1: bfd_vma, arg2: *mut ::std::os::raw::c_void);
    pub fn bfd_putl16(arg1: bfd_vma, arg2: *mut ::std::os::raw::c_void);
    pub fn bfd_get_bits(arg1: *const ::std::os::raw::c_void,
                        arg2: ::std::os::raw::c_int, arg3: bfd_boolean)
     -> bfd_uint64_t;
    pub fn bfd_put_bits(arg1: bfd_uint64_t, arg2: *mut ::std::os::raw::c_void,
                        arg3: ::std::os::raw::c_int, arg4: bfd_boolean);
    pub fn bfd_section_already_linked_table_init() -> bfd_boolean;
    pub fn bfd_section_already_linked_table_free();
    pub fn _bfd_handle_already_linked(arg1: *mut Struct_bfd_section,
                                      arg2:
                                          *mut Struct_bfd_section_already_linked,
                                      arg3: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_ecoff_get_gp_value(abfd: *mut bfd) -> bfd_vma;
    pub fn bfd_ecoff_set_gp_value(abfd: *mut bfd, gp_value: bfd_vma)
     -> bfd_boolean;
    pub fn bfd_ecoff_set_regmasks(abfd: *mut bfd,
                                  gprmask: ::std::os::raw::c_ulong,
                                  fprmask: ::std::os::raw::c_ulong,
                                  cprmask: *mut ::std::os::raw::c_ulong)
     -> bfd_boolean;
    pub fn bfd_ecoff_debug_init(output_bfd: *mut bfd,
                                output_debug: *mut Struct_ecoff_debug_info,
                                output_swap: *const Struct_ecoff_debug_swap,
                                arg1: *mut Struct_bfd_link_info)
     -> *mut ::std::os::raw::c_void;
    pub fn bfd_ecoff_debug_free(handle: *mut ::std::os::raw::c_void,
                                output_bfd: *mut bfd,
                                output_debug: *mut Struct_ecoff_debug_info,
                                output_swap: *const Struct_ecoff_debug_swap,
                                arg1: *mut Struct_bfd_link_info);
    pub fn bfd_ecoff_debug_accumulate(handle: *mut ::std::os::raw::c_void,
                                      output_bfd: *mut bfd,
                                      output_debug:
                                          *mut Struct_ecoff_debug_info,
                                      output_swap:
                                          *const Struct_ecoff_debug_swap,
                                      input_bfd: *mut bfd,
                                      input_debug:
                                          *mut Struct_ecoff_debug_info,
                                      input_swap:
                                          *const Struct_ecoff_debug_swap,
                                      arg1: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_ecoff_debug_accumulate_other(handle:
                                                *mut ::std::os::raw::c_void,
                                            output_bfd: *mut bfd,
                                            output_debug:
                                                *mut Struct_ecoff_debug_info,
                                            output_swap:
                                                *const Struct_ecoff_debug_swap,
                                            input_bfd: *mut bfd,
                                            arg1: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_ecoff_debug_externals(abfd: *mut bfd,
                                     debug: *mut Struct_ecoff_debug_info,
                                     swap: *const Struct_ecoff_debug_swap,
                                     relocatable: bfd_boolean,
                                     get_extr:
                                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut Struct_bfd_symbol,
                                                                                    arg2:
                                                                                        *mut Struct_ecoff_extr)
                                                                   ->
                                                                       bfd_boolean>,
                                     set_index:
                                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut Struct_bfd_symbol,
                                                                                    arg2:
                                                                                        bfd_size_type)>)
     -> bfd_boolean;
    pub fn bfd_ecoff_debug_one_external(abfd: *mut bfd,
                                        debug: *mut Struct_ecoff_debug_info,
                                        swap: *const Struct_ecoff_debug_swap,
                                        name: *const ::std::os::raw::c_char,
                                        esym: *mut Struct_ecoff_extr)
     -> bfd_boolean;
    pub fn bfd_ecoff_debug_size(abfd: *mut bfd,
                                debug: *mut Struct_ecoff_debug_info,
                                swap: *const Struct_ecoff_debug_swap)
     -> bfd_size_type;
    pub fn bfd_ecoff_write_debug(abfd: *mut bfd,
                                 debug: *mut Struct_ecoff_debug_info,
                                 swap: *const Struct_ecoff_debug_swap,
                                 _where: file_ptr) -> bfd_boolean;
    pub fn bfd_ecoff_write_accumulated_debug(handle:
                                                 *mut ::std::os::raw::c_void,
                                             abfd: *mut bfd,
                                             debug:
                                                 *mut Struct_ecoff_debug_info,
                                             swap:
                                                 *const Struct_ecoff_debug_swap,
                                             info: *mut Struct_bfd_link_info,
                                             _where: file_ptr) -> bfd_boolean;
    pub fn bfd_elf_record_link_assignment(arg1: *mut bfd,
                                          arg2: *mut Struct_bfd_link_info,
                                          arg3: *const ::std::os::raw::c_char,
                                          arg4: bfd_boolean,
                                          arg5: bfd_boolean) -> bfd_boolean;
    pub fn bfd_elf_get_needed_list(arg1: *mut bfd,
                                   arg2: *mut Struct_bfd_link_info)
     -> *mut Struct_bfd_link_needed_list;
    pub fn bfd_elf_get_bfd_needed_list(arg1: *mut bfd,
                                       arg2:
                                           *mut *mut Struct_bfd_link_needed_list)
     -> bfd_boolean;
    pub fn bfd_elf_stack_segment_size(arg1: *mut bfd,
                                      arg2: *mut Struct_bfd_link_info,
                                      arg3: *const ::std::os::raw::c_char,
                                      arg4: bfd_vma) -> bfd_boolean;
    pub fn bfd_elf_size_dynamic_sections(arg1: *mut bfd,
                                         arg2: *const ::std::os::raw::c_char,
                                         arg3: *const ::std::os::raw::c_char,
                                         arg4: *const ::std::os::raw::c_char,
                                         arg5: *const ::std::os::raw::c_char,
                                         arg6: *const ::std::os::raw::c_char,
                                         arg7:
                                             *const *const ::std::os::raw::c_char,
                                         arg8: *mut Struct_bfd_link_info,
                                         arg9: *mut *mut Struct_bfd_section)
     -> bfd_boolean;
    pub fn bfd_elf_size_dynsym_hash_dynstr(arg1: *mut bfd,
                                           arg2: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_elf_set_dt_needed_name(arg1: *mut bfd,
                                      arg2: *const ::std::os::raw::c_char);
    pub fn bfd_elf_get_dt_soname(arg1: *mut bfd)
     -> *const ::std::os::raw::c_char;
    pub fn bfd_elf_set_dyn_lib_class(arg1: *mut bfd,
                                     arg2: Enum_dynamic_lib_link_class);
    pub fn bfd_elf_get_dyn_lib_class(arg1: *mut bfd) -> ::std::os::raw::c_int;
    pub fn bfd_elf_get_runpath_list(arg1: *mut bfd,
                                    arg2: *mut Struct_bfd_link_info)
     -> *mut Struct_bfd_link_needed_list;
    pub fn bfd_elf_discard_info(arg1: *mut bfd,
                                arg2: *mut Struct_bfd_link_info)
     -> ::std::os::raw::c_int;
    pub fn _bfd_elf_default_action_discarded(arg1: *mut Struct_bfd_section)
     -> ::std::os::raw::c_uint;
    pub fn bfd_get_elf_phdr_upper_bound(abfd: *mut bfd)
     -> ::std::os::raw::c_long;
    pub fn bfd_get_elf_phdrs(abfd: *mut bfd,
                             phdrs: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn bfd_elf_bfd_from_remote_memory(templ: *mut bfd, ehdr_vma: bfd_vma,
                                          size: bfd_size_type,
                                          loadbasep: *mut bfd_vma,
                                          target_read_memory:
                                              ::std::option::Option<unsafe extern "C" fn(vma:
                                                                                             bfd_vma,
                                                                                         myaddr:
                                                                                             *mut bfd_byte,
                                                                                         len:
                                                                                             bfd_size_type)
                                                                        ->
                                                                            ::std::os::raw::c_int>)
     -> *mut bfd;
    pub fn _bfd_elf_tls_setup(arg1: *mut bfd, arg2: *mut Struct_bfd_link_info)
     -> *mut Struct_bfd_section;
    pub fn _bfd_nearby_section(arg1: *mut bfd, arg2: *mut Struct_bfd_section,
                               arg3: bfd_vma) -> *mut Struct_bfd_section;
    pub fn _bfd_fix_excluded_sec_syms(arg1: *mut bfd,
                                      arg2: *mut Struct_bfd_link_info);
    pub fn bfd_m68k_mach_to_features(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_uint;
    pub fn bfd_m68k_features_to_mach(arg1: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn bfd_m68k_elf32_create_embedded_relocs(arg1: *mut bfd,
                                                 arg2:
                                                     *mut Struct_bfd_link_info,
                                                 arg3:
                                                     *mut Struct_bfd_section,
                                                 arg4:
                                                     *mut Struct_bfd_section,
                                                 arg5:
                                                     *mut *mut ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_elf_m68k_set_target_options(arg1: *mut Struct_bfd_link_info,
                                           arg2: ::std::os::raw::c_int);
    pub fn bfd_bfin_elf32_create_embedded_relocs(arg1: *mut bfd,
                                                 arg2:
                                                     *mut Struct_bfd_link_info,
                                                 arg3:
                                                     *mut Struct_bfd_section,
                                                 arg4:
                                                     *mut Struct_bfd_section,
                                                 arg5:
                                                     *mut *mut ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_cr16_elf32_create_embedded_relocs(arg1: *mut bfd,
                                                 arg2:
                                                     *mut Struct_bfd_link_info,
                                                 arg3:
                                                     *mut Struct_bfd_section,
                                                 arg4:
                                                     *mut Struct_bfd_section,
                                                 arg5:
                                                     *mut *mut ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_sunos_get_needed_list(arg1: *mut bfd,
                                     arg2: *mut Struct_bfd_link_info)
     -> *mut Struct_bfd_link_needed_list;
    pub fn bfd_sunos_record_link_assignment(arg1: *mut bfd,
                                            arg2: *mut Struct_bfd_link_info,
                                            arg3:
                                                *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_sunos_size_dynamic_sections(arg1: *mut bfd,
                                           arg2: *mut Struct_bfd_link_info,
                                           arg3: *mut *mut Struct_bfd_section,
                                           arg4: *mut *mut Struct_bfd_section,
                                           arg5: *mut *mut Struct_bfd_section)
     -> bfd_boolean;
    pub fn bfd_i386linux_size_dynamic_sections(arg1: *mut bfd,
                                               arg2:
                                                   *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_m68klinux_size_dynamic_sections(arg1: *mut bfd,
                                               arg2:
                                                   *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_sparclinux_size_dynamic_sections(arg1: *mut bfd,
                                                arg2:
                                                    *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_init_window(arg1: *mut bfd_window);
    pub fn bfd_free_window(arg1: *mut bfd_window);
    pub fn bfd_get_file_window(arg1: *mut bfd, arg2: file_ptr,
                               arg3: bfd_size_type, arg4: *mut bfd_window,
                               arg5: bfd_boolean) -> bfd_boolean;
    pub fn bfd_xcoff_split_import_path(arg1: *mut bfd,
                                       arg2: *const ::std::os::raw::c_char,
                                       arg3:
                                           *mut *const ::std::os::raw::c_char,
                                       arg4:
                                           *mut *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_xcoff_set_archive_import_path(arg1: *mut Struct_bfd_link_info,
                                             arg2: *mut bfd,
                                             arg3:
                                                 *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_xcoff_link_record_set(arg1: *mut bfd,
                                     arg2: *mut Struct_bfd_link_info,
                                     arg3: *mut Struct_bfd_link_hash_entry,
                                     arg4: bfd_size_type) -> bfd_boolean;
    pub fn bfd_xcoff_import_symbol(arg1: *mut bfd,
                                   arg2: *mut Struct_bfd_link_info,
                                   arg3: *mut Struct_bfd_link_hash_entry,
                                   arg4: bfd_vma,
                                   arg5: *const ::std::os::raw::c_char,
                                   arg6: *const ::std::os::raw::c_char,
                                   arg7: *const ::std::os::raw::c_char,
                                   arg8: ::std::os::raw::c_uint)
     -> bfd_boolean;
    pub fn bfd_xcoff_export_symbol(arg1: *mut bfd,
                                   arg2: *mut Struct_bfd_link_info,
                                   arg3: *mut Struct_bfd_link_hash_entry)
     -> bfd_boolean;
    pub fn bfd_xcoff_link_count_reloc(arg1: *mut bfd,
                                      arg2: *mut Struct_bfd_link_info,
                                      arg3: *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_xcoff_record_link_assignment(arg1: *mut bfd,
                                            arg2: *mut Struct_bfd_link_info,
                                            arg3:
                                                *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_xcoff_size_dynamic_sections(arg1: *mut bfd,
                                           arg2: *mut Struct_bfd_link_info,
                                           arg3:
                                               *const ::std::os::raw::c_char,
                                           arg4:
                                               *const ::std::os::raw::c_char,
                                           arg5: ::std::os::raw::c_ulong,
                                           arg6: ::std::os::raw::c_ulong,
                                           arg7: ::std::os::raw::c_ulong,
                                           arg8: bfd_boolean,
                                           arg9: ::std::os::raw::c_int,
                                           arg10: bfd_boolean,
                                           arg11: ::std::os::raw::c_uint,
                                           arg12:
                                               *mut *mut Struct_bfd_section,
                                           arg13: bfd_boolean) -> bfd_boolean;
    pub fn bfd_xcoff_link_generate_rtinit(arg1: *mut bfd,
                                          arg2: *const ::std::os::raw::c_char,
                                          arg3: *const ::std::os::raw::c_char,
                                          arg4: bfd_boolean) -> bfd_boolean;
    pub fn bfd_xcoff_ar_archive_set_magic(arg1: *mut bfd,
                                          arg2: *mut ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_coff_set_symbol_class(arg1: *mut bfd,
                                     arg2: *mut Struct_bfd_symbol,
                                     arg3: ::std::os::raw::c_uint)
     -> bfd_boolean;
    pub fn bfd_m68k_coff_create_embedded_relocs(arg1: *mut bfd,
                                                arg2:
                                                    *mut Struct_bfd_link_info,
                                                arg3: *mut Struct_bfd_section,
                                                arg4: *mut Struct_bfd_section,
                                                arg5:
                                                    *mut *mut ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_elf32_arm_init_maps(arg1: *mut bfd);
    pub fn bfd_elf32_arm_set_vfp11_fix(arg1: *mut bfd,
                                       arg2: *mut Struct_bfd_link_info);
    pub fn bfd_elf32_arm_set_cortex_a8_fix(arg1: *mut bfd,
                                           arg2: *mut Struct_bfd_link_info);
    pub fn bfd_elf32_arm_vfp11_erratum_scan(arg1: *mut bfd,
                                            arg2: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_elf32_arm_vfp11_fix_veneer_locations(arg1: *mut bfd,
                                                    arg2:
                                                        *mut Struct_bfd_link_info);
    pub fn bfd_elf32_arm_set_stm32l4xx_fix(arg1: *mut bfd,
                                           arg2: *mut Struct_bfd_link_info);
    pub fn bfd_elf32_arm_stm32l4xx_erratum_scan(arg1: *mut bfd,
                                                arg2:
                                                    *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_elf32_arm_stm32l4xx_fix_veneer_locations(arg1: *mut bfd,
                                                        arg2:
                                                            *mut Struct_bfd_link_info);
    pub fn bfd_arm_allocate_interworking_sections(arg1:
                                                      *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_arm_process_before_allocation(arg1: *mut bfd,
                                             arg2: *mut Struct_bfd_link_info,
                                             arg3: ::std::os::raw::c_int)
     -> bfd_boolean;
    pub fn bfd_arm_get_bfd_for_interworking(arg1: *mut bfd,
                                            arg2: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_arm_pe_allocate_interworking_sections(arg1:
                                                         *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_arm_pe_process_before_allocation(arg1: *mut bfd,
                                                arg2:
                                                    *mut Struct_bfd_link_info,
                                                arg3: ::std::os::raw::c_int)
     -> bfd_boolean;
    pub fn bfd_arm_pe_get_bfd_for_interworking(arg1: *mut bfd,
                                               arg2:
                                                   *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_elf32_arm_allocate_interworking_sections(arg1:
                                                            *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_elf32_arm_process_before_allocation(arg1: *mut bfd,
                                                   arg2:
                                                       *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_elf32_arm_set_target_relocs(arg1: *mut bfd,
                                           arg2: *mut Struct_bfd_link_info,
                                           arg3: ::std::os::raw::c_int,
                                           arg4: *mut ::std::os::raw::c_char,
                                           arg5: ::std::os::raw::c_int,
                                           arg6: ::std::os::raw::c_int,
                                           arg7: bfd_arm_vfp11_fix,
                                           arg8: bfd_arm_stm32l4xx_fix,
                                           arg9: ::std::os::raw::c_int,
                                           arg10: ::std::os::raw::c_int,
                                           arg11: ::std::os::raw::c_int,
                                           arg12: ::std::os::raw::c_int,
                                           arg13: ::std::os::raw::c_int);
    pub fn bfd_elf32_arm_get_bfd_for_interworking(arg1: *mut bfd,
                                                  arg2:
                                                      *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_elf32_arm_add_glue_sections_to_bfd(arg1: *mut bfd,
                                                  arg2:
                                                      *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_is_arm_special_symbol_name(arg1: *const ::std::os::raw::c_char,
                                          arg2: ::std::os::raw::c_int)
     -> bfd_boolean;
    pub fn bfd_elf32_arm_set_byteswap_code(arg1: *mut Struct_bfd_link_info,
                                           arg2: ::std::os::raw::c_int);
    pub fn bfd_elf32_arm_use_long_plt();
    pub fn bfd_arm_merge_machines(arg1: *mut bfd, arg2: *mut bfd)
     -> bfd_boolean;
    pub fn bfd_arm_update_notes(arg1: *mut bfd,
                                arg2: *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_arm_get_mach_from_notes(arg1: *mut bfd,
                                       arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_uint;
    pub fn elf32_arm_setup_section_lists(arg1: *mut bfd,
                                         arg2: *mut Struct_bfd_link_info)
     -> ::std::os::raw::c_int;
    pub fn elf32_arm_next_input_section(arg1: *mut Struct_bfd_link_info,
                                        arg2: *mut Struct_bfd_section);
    pub fn elf32_arm_size_stubs(arg1: *mut bfd, arg2: *mut bfd,
                                arg3: *mut Struct_bfd_link_info,
                                arg4: bfd_signed_vma,
                                arg5:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *const ::std::os::raw::c_char,
                                                                               arg2:
                                                                                   *mut Struct_bfd_section,
                                                                               arg3:
                                                                                   ::std::os::raw::c_uint)
                                                              ->
                                                                  *mut Struct_bfd_section>,
                                arg6: ::std::option::Option<extern "C" fn()>)
     -> bfd_boolean;
    pub fn elf32_arm_build_stubs(arg1: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn elf32_arm_fix_exidx_coverage(arg1: *mut *mut Struct_bfd_section,
                                        arg2: ::std::os::raw::c_uint,
                                        arg3: *mut Struct_bfd_link_info,
                                        arg4: bfd_boolean) -> bfd_boolean;
    pub fn elf32_tic6x_fix_exidx_coverage(arg1: *mut *mut Struct_bfd_section,
                                          arg2: ::std::os::raw::c_uint,
                                          arg3: *mut Struct_bfd_link_info,
                                          arg4: bfd_boolean) -> bfd_boolean;
    pub fn _bfd_elf_ppc_at_tls_transform(arg1: ::std::os::raw::c_uint,
                                         arg2: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn _bfd_elf_ppc_at_tprel_transform(arg1: ::std::os::raw::c_uint,
                                           arg2: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn bfd_elf64_aarch64_init_maps(arg1: *mut bfd);
    pub fn bfd_elf32_aarch64_init_maps(arg1: *mut bfd);
    pub fn bfd_elf64_aarch64_set_options(arg1: *mut bfd,
                                         arg2: *mut Struct_bfd_link_info,
                                         arg3: ::std::os::raw::c_int,
                                         arg4: ::std::os::raw::c_int,
                                         arg5: ::std::os::raw::c_int,
                                         arg6: ::std::os::raw::c_int,
                                         arg7: ::std::os::raw::c_int);
    pub fn bfd_elf32_aarch64_set_options(arg1: *mut bfd,
                                         arg2: *mut Struct_bfd_link_info,
                                         arg3: ::std::os::raw::c_int,
                                         arg4: ::std::os::raw::c_int,
                                         arg5: ::std::os::raw::c_int,
                                         arg6: ::std::os::raw::c_int,
                                         arg7: ::std::os::raw::c_int);
    pub fn bfd_is_aarch64_special_symbol_name(name:
                                                  *const ::std::os::raw::c_char,
                                              _type: ::std::os::raw::c_int)
     -> bfd_boolean;
    pub fn elf64_aarch64_setup_section_lists(arg1: *mut bfd,
                                             arg2: *mut Struct_bfd_link_info)
     -> ::std::os::raw::c_int;
    pub fn elf64_aarch64_next_input_section(arg1: *mut Struct_bfd_link_info,
                                            arg2: *mut Struct_bfd_section);
    pub fn elf64_aarch64_size_stubs(arg1: *mut bfd, arg2: *mut bfd,
                                    arg3: *mut Struct_bfd_link_info,
                                    arg4: bfd_signed_vma,
                                    arg5:
                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *const ::std::os::raw::c_char,
                                                                                   arg2:
                                                                                       *mut Struct_bfd_section)
                                                                  ->
                                                                      *mut Struct_bfd_section>,
                                    arg6:
                                        ::std::option::Option<extern "C" fn()>)
     -> bfd_boolean;
    pub fn elf64_aarch64_build_stubs(arg1: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn elf32_aarch64_setup_section_lists(arg1: *mut bfd,
                                             arg2: *mut Struct_bfd_link_info)
     -> ::std::os::raw::c_int;
    pub fn elf32_aarch64_next_input_section(arg1: *mut Struct_bfd_link_info,
                                            arg2: *mut Struct_bfd_section);
    pub fn elf32_aarch64_size_stubs(arg1: *mut bfd, arg2: *mut bfd,
                                    arg3: *mut Struct_bfd_link_info,
                                    arg4: bfd_signed_vma,
                                    arg5:
                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *const ::std::os::raw::c_char,
                                                                                   arg2:
                                                                                       *mut Struct_bfd_section)
                                                                  ->
                                                                      *mut Struct_bfd_section>,
                                    arg6:
                                        ::std::option::Option<extern "C" fn()>)
     -> bfd_boolean;
    pub fn elf32_aarch64_build_stubs(arg1: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_ticoff_set_section_load_page(arg1: *mut Struct_bfd_section,
                                            arg2: ::std::os::raw::c_int);
    pub fn bfd_ticoff_get_section_load_page(arg1: *mut Struct_bfd_section)
     -> ::std::os::raw::c_int;
    pub fn bfd_h8300_pad_address(arg1: *mut bfd, arg2: bfd_vma) -> bfd_vma;
    pub fn bfd_elf32_ia64_after_parse(arg1: ::std::os::raw::c_int);
    pub fn bfd_elf64_ia64_after_parse(arg1: ::std::os::raw::c_int);
    pub fn v850_elf_create_sections(arg1: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn v850_elf_set_note(arg1: *mut bfd, arg2: ::std::os::raw::c_uint,
                             arg3: ::std::os::raw::c_uint) -> bfd_boolean;
    pub fn bfd_init();
    pub fn bfd_fopen(filename: *const ::std::os::raw::c_char,
                     target: *const ::std::os::raw::c_char,
                     mode: *const ::std::os::raw::c_char,
                     fd: ::std::os::raw::c_int) -> *mut bfd;
    pub fn bfd_openr(filename: *const ::std::os::raw::c_char,
                     target: *const ::std::os::raw::c_char) -> *mut bfd;
    pub fn bfd_fdopenr(filename: *const ::std::os::raw::c_char,
                       target: *const ::std::os::raw::c_char,
                       fd: ::std::os::raw::c_int) -> *mut bfd;
    pub fn bfd_openstreamr(filename: *const ::std::os::raw::c_char,
                           target: *const ::std::os::raw::c_char,
                           stream: *mut ::std::os::raw::c_void) -> *mut bfd;
    pub fn bfd_openr_iovec(filename: *const ::std::os::raw::c_char,
                           target: *const ::std::os::raw::c_char,
                           open_func:
                               ::std::option::Option<unsafe extern "C" fn(nbfd:
                                                                              *mut Struct_bfd,
                                                                          open_closure:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             *mut ::std::os::raw::c_void>,
                           open_closure: *mut ::std::os::raw::c_void,
                           pread_func:
                               ::std::option::Option<unsafe extern "C" fn(nbfd:
                                                                              *mut Struct_bfd,
                                                                          stream:
                                                                              *mut ::std::os::raw::c_void,
                                                                          buf:
                                                                              *mut ::std::os::raw::c_void,
                                                                          nbytes:
                                                                              file_ptr,
                                                                          offset:
                                                                              file_ptr)
                                                         -> file_ptr>,
                           close_func:
                               ::std::option::Option<unsafe extern "C" fn(nbfd:
                                                                              *mut Struct_bfd,
                                                                          stream:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           stat_func:
                               ::std::option::Option<unsafe extern "C" fn(abfd:
                                                                              *mut Struct_bfd,
                                                                          stream:
                                                                              *mut ::std::os::raw::c_void,
                                                                          sb:
                                                                              *mut Struct_stat)
                                                         ->
                                                             ::std::os::raw::c_int>)
     -> *mut bfd;
    pub fn bfd_openw(filename: *const ::std::os::raw::c_char,
                     target: *const ::std::os::raw::c_char) -> *mut bfd;
    pub fn bfd_close(abfd: *mut bfd) -> bfd_boolean;
    pub fn bfd_close_all_done(arg1: *mut bfd) -> bfd_boolean;
    pub fn bfd_create(filename: *const ::std::os::raw::c_char,
                      templ: *mut bfd) -> *mut bfd;
    pub fn bfd_make_writable(abfd: *mut bfd) -> bfd_boolean;
    pub fn bfd_make_readable(abfd: *mut bfd) -> bfd_boolean;
    pub fn bfd_alloc(abfd: *mut bfd, wanted: bfd_size_type)
     -> *mut ::std::os::raw::c_void;
    pub fn bfd_zalloc(abfd: *mut bfd, wanted: bfd_size_type)
     -> *mut ::std::os::raw::c_void;
    pub fn bfd_calc_gnu_debuglink_crc32(crc: ::std::os::raw::c_ulong,
                                        buf: *const ::std::os::raw::c_uchar,
                                        len: bfd_size_type)
     -> ::std::os::raw::c_ulong;
    pub fn bfd_get_debug_link_info(abfd: *mut bfd,
                                   crc32_out: *mut ::std::os::raw::c_ulong)
     -> *mut ::std::os::raw::c_char;
    pub fn bfd_get_alt_debug_link_info(abfd: *mut bfd,
                                       buildid_len: *mut bfd_size_type,
                                       buildid_out: *mut *mut bfd_byte)
     -> *mut ::std::os::raw::c_char;
    pub fn bfd_follow_gnu_debuglink(abfd: *mut bfd,
                                    dir: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bfd_follow_gnu_debugaltlink(abfd: *mut bfd,
                                       dir: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bfd_create_gnu_debuglink_section(abfd: *mut bfd,
                                            filename:
                                                *const ::std::os::raw::c_char)
     -> *mut Struct_bfd_section;
    pub fn bfd_fill_in_gnu_debuglink_section(abfd: *mut bfd,
                                             sect: *mut Struct_bfd_section,
                                             filename:
                                                 *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_get_mtime(abfd: *mut bfd) -> ::std::os::raw::c_long;
    pub fn bfd_get_size(abfd: *mut bfd) -> file_ptr;
    pub fn bfd_mmap(abfd: *mut bfd, addr: *mut ::std::os::raw::c_void,
                    len: bfd_size_type, prot: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int, offset: file_ptr,
                    map_addr: *mut *mut ::std::os::raw::c_void,
                    map_len: *mut bfd_size_type)
     -> *mut ::std::os::raw::c_void;
    pub fn bfd_section_list_clear(arg1: *mut bfd);
    pub fn bfd_get_section_by_name(abfd: *mut bfd,
                                   name: *const ::std::os::raw::c_char)
     -> *mut asection;
    pub fn bfd_get_next_section_by_name(ibfd: *mut bfd, sec: *mut asection)
     -> *mut asection;
    pub fn bfd_get_linker_section(abfd: *mut bfd,
                                  name: *const ::std::os::raw::c_char)
     -> *mut asection;
    pub fn bfd_get_section_by_name_if(abfd: *mut bfd,
                                      name: *const ::std::os::raw::c_char,
                                      func:
                                          ::std::option::Option<unsafe extern "C" fn(abfd:
                                                                                         *mut bfd,
                                                                                     sect:
                                                                                         *mut asection,
                                                                                     obj:
                                                                                         *mut ::std::os::raw::c_void)
                                                                    ->
                                                                        bfd_boolean>,
                                      obj: *mut ::std::os::raw::c_void)
     -> *mut asection;
    pub fn bfd_get_unique_section_name(abfd: *mut bfd,
                                       templat: *const ::std::os::raw::c_char,
                                       count: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn bfd_make_section_old_way(abfd: *mut bfd,
                                    name: *const ::std::os::raw::c_char)
     -> *mut asection;
    pub fn bfd_make_section_anyway_with_flags(abfd: *mut bfd,
                                              name:
                                                  *const ::std::os::raw::c_char,
                                              flags: flagword)
     -> *mut asection;
    pub fn bfd_make_section_anyway(abfd: *mut bfd,
                                   name: *const ::std::os::raw::c_char)
     -> *mut asection;
    pub fn bfd_make_section_with_flags(arg1: *mut bfd,
                                       name: *const ::std::os::raw::c_char,
                                       flags: flagword) -> *mut asection;
    pub fn bfd_make_section(arg1: *mut bfd,
                            name: *const ::std::os::raw::c_char)
     -> *mut asection;
    pub fn bfd_get_next_section_id() -> ::std::os::raw::c_int;
    pub fn bfd_set_section_flags(abfd: *mut bfd, sec: *mut asection,
                                 flags: flagword) -> bfd_boolean;
    pub fn bfd_rename_section(abfd: *mut bfd, sec: *mut asection,
                              newname: *const ::std::os::raw::c_char);
    pub fn bfd_map_over_sections(abfd: *mut bfd,
                                 func:
                                     ::std::option::Option<unsafe extern "C" fn(abfd:
                                                                                    *mut bfd,
                                                                                sect:
                                                                                    *mut asection,
                                                                                obj:
                                                                                    *mut ::std::os::raw::c_void)>,
                                 obj: *mut ::std::os::raw::c_void);
    pub fn bfd_sections_find_if(abfd: *mut bfd,
                                operation:
                                    ::std::option::Option<unsafe extern "C" fn(abfd:
                                                                                   *mut bfd,
                                                                               sect:
                                                                                   *mut asection,
                                                                               obj:
                                                                                   *mut ::std::os::raw::c_void)
                                                              -> bfd_boolean>,
                                obj: *mut ::std::os::raw::c_void)
     -> *mut asection;
    pub fn bfd_set_section_size(abfd: *mut bfd, sec: *mut asection,
                                val: bfd_size_type) -> bfd_boolean;
    pub fn bfd_set_section_contents(abfd: *mut bfd, section: *mut asection,
                                    data: *const ::std::os::raw::c_void,
                                    offset: file_ptr, count: bfd_size_type)
     -> bfd_boolean;
    pub fn bfd_get_section_contents(abfd: *mut bfd, section: *mut asection,
                                    location: *mut ::std::os::raw::c_void,
                                    offset: file_ptr, count: bfd_size_type)
     -> bfd_boolean;
    pub fn bfd_malloc_and_get_section(abfd: *mut bfd, section: *mut asection,
                                      buf: *mut *mut bfd_byte) -> bfd_boolean;
    pub fn bfd_copy_private_section_data(ibfd: *mut bfd, isec: *mut asection,
                                         obfd: *mut bfd, osec: *mut asection)
     -> bfd_boolean;
    pub fn bfd_generic_is_group_section(arg1: *mut bfd, sec: *const asection)
     -> bfd_boolean;
    pub fn bfd_generic_discard_group(abfd: *mut bfd, group: *mut asection)
     -> bfd_boolean;
    pub fn bfd_printable_name(abfd: *mut bfd)
     -> *const ::std::os::raw::c_char;
    pub fn bfd_scan_arch(string: *const ::std::os::raw::c_char)
     -> *const bfd_arch_info_type;
    pub fn bfd_arch_list() -> *mut *const ::std::os::raw::c_char;
    pub fn bfd_arch_get_compatible(abfd: *const bfd, bbfd: *const bfd,
                                   accept_unknowns: bfd_boolean)
     -> *const bfd_arch_info_type;
    pub fn bfd_set_arch_info(abfd: *mut bfd, arg: *const bfd_arch_info_type);
    pub fn bfd_get_arch(abfd: *mut bfd) -> Enum_bfd_architecture;
    pub fn bfd_get_mach(abfd: *mut bfd) -> ::std::os::raw::c_ulong;
    pub fn bfd_arch_bits_per_byte(abfd: *mut bfd) -> ::std::os::raw::c_uint;
    pub fn bfd_arch_bits_per_address(abfd: *mut bfd)
     -> ::std::os::raw::c_uint;
    pub fn bfd_get_arch_info(abfd: *mut bfd) -> *const bfd_arch_info_type;
    pub fn bfd_lookup_arch(arch: Enum_bfd_architecture,
                           machine: ::std::os::raw::c_ulong)
     -> *const bfd_arch_info_type;
    pub fn bfd_printable_arch_mach(arch: Enum_bfd_architecture,
                                   machine: ::std::os::raw::c_ulong)
     -> *const ::std::os::raw::c_char;
    pub fn bfd_octets_per_byte(abfd: *mut bfd) -> ::std::os::raw::c_uint;
    pub fn bfd_arch_mach_octets_per_byte(arch: Enum_bfd_architecture,
                                         machine: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_uint;
    pub fn bfd_get_reloc_size(arg1: *mut reloc_howto_type)
     -> ::std::os::raw::c_uint;
    pub fn bfd_check_overflow(how: Enum_complain_overflow,
                              bitsize: ::std::os::raw::c_uint,
                              rightshift: ::std::os::raw::c_uint,
                              addrsize: ::std::os::raw::c_uint,
                              relocation: bfd_vma) -> bfd_reloc_status_type;
    pub fn bfd_perform_relocation(abfd: *mut bfd, reloc_entry: *mut arelent,
                                  data: *mut ::std::os::raw::c_void,
                                  input_section: *mut asection,
                                  output_bfd: *mut bfd,
                                  error_message:
                                      *mut *mut ::std::os::raw::c_char)
     -> bfd_reloc_status_type;
    pub fn bfd_install_relocation(abfd: *mut bfd, reloc_entry: *mut arelent,
                                  data: *mut ::std::os::raw::c_void,
                                  data_start: bfd_vma,
                                  input_section: *mut asection,
                                  error_message:
                                      *mut *mut ::std::os::raw::c_char)
     -> bfd_reloc_status_type;
    pub fn bfd_reloc_type_lookup(abfd: *mut bfd,
                                 code: bfd_reloc_code_real_type)
     -> *mut reloc_howto_type;
    pub fn bfd_reloc_name_lookup(abfd: *mut bfd,
                                 reloc_name: *const ::std::os::raw::c_char)
     -> *mut reloc_howto_type;
    pub fn bfd_get_reloc_code_name(code: bfd_reloc_code_real_type)
     -> *const ::std::os::raw::c_char;
    pub fn bfd_is_local_label(abfd: *mut bfd, sym: *mut asymbol)
     -> bfd_boolean;
    pub fn bfd_is_local_label_name(abfd: *mut bfd,
                                   name: *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_is_target_special_symbol(abfd: *mut bfd, sym: *mut asymbol)
     -> bfd_boolean;
    pub fn bfd_set_symtab(abfd: *mut bfd, location: *mut *mut asymbol,
                          count: ::std::os::raw::c_uint) -> bfd_boolean;
    pub fn bfd_print_symbol_vandf(abfd: *mut bfd,
                                  file: *mut ::std::os::raw::c_void,
                                  symbol: *mut asymbol);
    pub fn _bfd_generic_make_empty_symbol(arg1: *mut bfd) -> *mut asymbol;
    pub fn bfd_decode_symclass(symbol: *mut asymbol) -> ::std::os::raw::c_int;
    pub fn bfd_is_undefined_symclass(symclass: ::std::os::raw::c_int)
     -> bfd_boolean;
    pub fn bfd_symbol_info(symbol: *mut asymbol, ret: *mut symbol_info);
    pub fn bfd_copy_private_symbol_data(ibfd: *mut bfd, isym: *mut asymbol,
                                        obfd: *mut bfd, osym: *mut asymbol)
     -> bfd_boolean;
    pub fn bfd_get_error() -> bfd_error_type;
    pub fn bfd_set_error(error_tag: bfd_error_type, ...);
    pub fn bfd_errmsg(error_tag: bfd_error_type)
     -> *const ::std::os::raw::c_char;
    pub fn bfd_perror(message: *const ::std::os::raw::c_char);
    pub fn bfd_set_error_handler(arg1: bfd_error_handler_type)
     -> bfd_error_handler_type;
    pub fn bfd_set_error_program_name(arg1: *const ::std::os::raw::c_char);
    pub fn bfd_get_error_handler() -> bfd_error_handler_type;
    pub fn bfd_set_assert_handler(arg1: bfd_assert_handler_type)
     -> bfd_assert_handler_type;
    pub fn bfd_get_assert_handler() -> bfd_assert_handler_type;
    pub fn bfd_get_reloc_upper_bound(abfd: *mut bfd, sect: *mut asection)
     -> ::std::os::raw::c_long;
    pub fn bfd_canonicalize_reloc(abfd: *mut bfd, sec: *mut asection,
                                  loc: *mut *mut arelent,
                                  syms: *mut *mut asymbol)
     -> ::std::os::raw::c_long;
    pub fn bfd_set_reloc(abfd: *mut bfd, sec: *mut asection,
                         rel: *mut *mut arelent,
                         count: ::std::os::raw::c_uint);
    pub fn bfd_set_file_flags(abfd: *mut bfd, flags: flagword) -> bfd_boolean;
    pub fn bfd_get_arch_size(abfd: *mut bfd) -> ::std::os::raw::c_int;
    pub fn bfd_get_sign_extend_vma(abfd: *mut bfd) -> ::std::os::raw::c_int;
    pub fn bfd_set_start_address(abfd: *mut bfd, vma: bfd_vma) -> bfd_boolean;
    pub fn bfd_get_gp_size(abfd: *mut bfd) -> ::std::os::raw::c_uint;
    pub fn bfd_set_gp_size(abfd: *mut bfd, i: ::std::os::raw::c_uint);
    pub fn bfd_scan_vma(string: *const ::std::os::raw::c_char,
                        end: *mut *const ::std::os::raw::c_char,
                        base: ::std::os::raw::c_int) -> bfd_vma;
    pub fn bfd_copy_private_header_data(ibfd: *mut bfd, obfd: *mut bfd)
     -> bfd_boolean;
    pub fn bfd_copy_private_bfd_data(ibfd: *mut bfd, obfd: *mut bfd)
     -> bfd_boolean;
    pub fn bfd_merge_private_bfd_data(ibfd: *mut bfd, obfd: *mut bfd)
     -> bfd_boolean;
    pub fn bfd_set_private_flags(abfd: *mut bfd, flags: flagword)
     -> bfd_boolean;
    pub fn bfd_get_relocated_section_contents(arg1: *mut bfd,
                                              arg2: *mut Struct_bfd_link_info,
                                              arg3:
                                                  *mut Struct_bfd_link_order,
                                              arg4: *mut bfd_byte,
                                              arg5: bfd_boolean,
                                              arg6: *mut *mut asymbol)
     -> *mut bfd_byte;
    pub fn bfd_alt_mach_code(abfd: *mut bfd,
                             alternative: ::std::os::raw::c_int)
     -> bfd_boolean;
    pub fn bfd_emul_get_maxpagesize(arg1: *const ::std::os::raw::c_char)
     -> bfd_vma;
    pub fn bfd_emul_set_maxpagesize(arg1: *const ::std::os::raw::c_char,
                                    arg2: bfd_vma);
    pub fn bfd_emul_get_commonpagesize(arg1: *const ::std::os::raw::c_char)
     -> bfd_vma;
    pub fn bfd_emul_set_commonpagesize(arg1: *const ::std::os::raw::c_char,
                                       arg2: bfd_vma);
    pub fn bfd_demangle(arg1: *mut bfd, arg2: *const ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn bfd_update_compression_header(abfd: *mut bfd,
                                         contents: *mut bfd_byte,
                                         sec: *mut asection);
    pub fn bfd_check_compression_header(abfd: *mut bfd,
                                        contents: *mut bfd_byte,
                                        sec: *mut asection,
                                        uncompressed_size: *mut bfd_size_type)
     -> bfd_boolean;
    pub fn bfd_get_compression_header_size(abfd: *mut bfd, sec: *mut asection)
     -> ::std::os::raw::c_int;
    pub fn bfd_convert_section_size(ibfd: *mut bfd, isec: *mut asection,
                                    obfd: *mut bfd, size: bfd_size_type)
     -> bfd_size_type;
    pub fn bfd_convert_section_contents(ibfd: *mut bfd, isec: *mut asection,
                                        obfd: *mut bfd,
                                        ptr: *mut *mut bfd_byte,
                                        ptr_size: *mut bfd_size_type)
     -> bfd_boolean;
    pub fn bfd_get_next_mapent(abfd: *mut bfd, previous: symindex,
                               sym: *mut *mut carsym) -> symindex;
    pub fn bfd_set_archive_head(output: *mut bfd, new_head: *mut bfd)
     -> bfd_boolean;
    pub fn bfd_openr_next_archived_file(archive: *mut bfd, previous: *mut bfd)
     -> *mut bfd;
    pub fn bfd_core_file_failing_command(abfd: *mut bfd)
     -> *const ::std::os::raw::c_char;
    pub fn bfd_core_file_failing_signal(abfd: *mut bfd)
     -> ::std::os::raw::c_int;
    pub fn bfd_core_file_pid(abfd: *mut bfd) -> ::std::os::raw::c_int;
    pub fn core_file_matches_executable_p(core_bfd: *mut bfd,
                                          exec_bfd: *mut bfd) -> bfd_boolean;
    pub fn generic_core_file_matches_executable_p(core_bfd: *mut bfd,
                                                  exec_bfd: *mut bfd)
     -> bfd_boolean;
    pub fn bfd_set_default_target(name: *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_find_target(target_name: *const ::std::os::raw::c_char,
                           abfd: *mut bfd) -> *const bfd_target;
    pub fn bfd_get_target_info(target_name: *const ::std::os::raw::c_char,
                               abfd: *mut bfd, is_bigendian: *mut bfd_boolean,
                               underscoring: *mut ::std::os::raw::c_int,
                               def_target_arch:
                                   *mut *const ::std::os::raw::c_char)
     -> *const bfd_target;
    pub fn bfd_target_list() -> *mut *const ::std::os::raw::c_char;
    pub fn bfd_search_for_target(search_func:
                                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *const bfd_target,
                                                                                arg2:
                                                                                    *mut ::std::os::raw::c_void)
                                                               ->
                                                                   ::std::os::raw::c_int>,
                                 arg1: *mut ::std::os::raw::c_void)
     -> *const bfd_target;
    pub fn bfd_flavour_name(flavour: Enum_bfd_flavour)
     -> *const ::std::os::raw::c_char;
    pub fn bfd_check_format(abfd: *mut bfd, format: bfd_format)
     -> bfd_boolean;
    pub fn bfd_check_format_matches(abfd: *mut bfd, format: bfd_format,
                                    matching:
                                        *mut *mut *mut ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_set_format(abfd: *mut bfd, format: bfd_format) -> bfd_boolean;
    pub fn bfd_format_string(format: bfd_format)
     -> *const ::std::os::raw::c_char;
    pub fn bfd_link_split_section(abfd: *mut bfd, sec: *mut asection)
     -> bfd_boolean;
    pub fn bfd_section_already_linked(abfd: *mut bfd, sec: *mut asection,
                                      info: *mut Struct_bfd_link_info)
     -> bfd_boolean;
    pub fn bfd_generic_define_common_symbol(output_bfd: *mut bfd,
                                            info: *mut Struct_bfd_link_info,
                                            h:
                                                *mut Struct_bfd_link_hash_entry)
     -> bfd_boolean;
    pub fn bfd_find_version_for_sym(verdefs: *mut Struct_bfd_elf_version_tree,
                                    sym_name: *const ::std::os::raw::c_char,
                                    hide: *mut bfd_boolean)
     -> *mut Struct_bfd_elf_version_tree;
    pub fn bfd_hide_sym_by_version(verdefs: *mut Struct_bfd_elf_version_tree,
                                   sym_name: *const ::std::os::raw::c_char)
     -> bfd_boolean;
    pub fn bfd_simple_get_relocated_section_contents(abfd: *mut bfd,
                                                     sec: *mut asection,
                                                     outbuf: *mut bfd_byte,
                                                     symbol_table:
                                                         *mut *mut asymbol)
     -> *mut bfd_byte;
    pub fn bfd_get_full_section_contents(abfd: *mut bfd,
                                         section: *mut asection,
                                         ptr: *mut *mut bfd_byte)
     -> bfd_boolean;
    pub fn bfd_cache_section_contents(sec: *mut asection,
                                      contents: *mut ::std::os::raw::c_void);
    pub fn bfd_is_section_compressed_with_header(abfd: *mut bfd,
                                                 section: *mut asection,
                                                 compression_header_size_p:
                                                     *mut ::std::os::raw::c_int,
                                                 uncompressed_size_p:
                                                     *mut bfd_size_type)
     -> bfd_boolean;
    pub fn bfd_is_section_compressed(abfd: *mut bfd, section: *mut asection)
     -> bfd_boolean;
    pub fn bfd_init_section_decompress_status(abfd: *mut bfd,
                                              section: *mut asection)
     -> bfd_boolean;
    pub fn bfd_init_section_compress_status(abfd: *mut bfd,
                                            section: *mut asection)
     -> bfd_boolean;
    pub fn bfd_compress_section(abfd: *mut bfd, section: *mut asection,
                                uncompressed_buffer: *mut bfd_byte)
     -> bfd_boolean;
}
